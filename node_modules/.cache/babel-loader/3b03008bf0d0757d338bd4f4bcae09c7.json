{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/home/navigation/src/components/dashboard/global/GlobalView.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport { floorList, imgDetails, getAllBuildingElements, venueList, buildingList, getGpsLocation, globalNavigation, getUserPortfolio, osmRoutes, pickupPoints, navContent, refPoint } from \"../../../store/actions/index\";\nimport BottomBar from \"./BottomBar\";\nimport Instructions from \"./Instructions\";\nimport { getHaversineDistance, distance, obtaincoordinates, findInstructions, simplifyPath } from \"./module\";\nimport { Map as MapContainer, Marker, Popup, TileLayer, GeoJSON } from \"react-leaflet\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport L from \"leaflet\";\nimport hash from \"object-hash\";\nimport \"../../navStyles.css\";\n/**\n * @id  N1.1.1\n * @author Anirudh Khammampati & Sai Kumar Reddy\n * @description Create graph node\n */\n\nvar special = ['base2', 'base1', 'ground', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelvth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth']; // import {Graph} from \"./Graph\";\n\nclass Graph {\n  // defining vertex array and \n  // adjacent list \n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  } // functions to be implemented \n  // addVertex(v) \n\n\n  addVertex(v) {\n    // initialize the adjacent list with a \n    // null array \n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      // get the list for vertex v and put the \n      // vertex w denoting edge between v and w \n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt); // Since graph is undirected, \n      // add an edge from w to v also \n\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  } // Prints the vertex and adjacency list \n\n\n  printGraph() {\n    // get all the vertices \n    var get_keys = this.AdjList.keys(); // iterate over the vertices \n\n    for (var i of get_keys) {\n      // great the corresponding adjacency list \n      // for the vertex \n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\"; // iterate over the adjacency list \n      // concatenate the values into a string \n\n      for (var j of get_values) conc += j + \" \";\n\n      for (var j of val) conc2 += j + \" \"; // print the vertex and its adjacency list \n\n    }\n  }\n\n}\n/**\n * @id  N1.1.2\n * @author Pankaj Singh\n * @description Global center of osm\n */\n\n\nconst center = {\n  lat: 28.6139,\n  lng: 77.209\n};\n/**\n * @id  N1.1.3\n * @author Pankaj Singh\n * @description OSM Marker List\n */\n\nlet female_toileticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-female awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet male_toileticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-male awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet lifticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-street-view awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet watericon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-glass awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet stairicon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-align-left awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet source = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fas fa-crosshairs awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet destination = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-map-pin awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet doticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div  class='marker-pin1'></div>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nvar myStyle = {\n  //Style to display the non-walkable linestrings\n  color: \"#000000\",\n  weight: 3,\n  opacity: 0.7\n};\n/**\n * @id  N1.1.34\n * @author Pankaj Singh\n * @description Marker\n */\n\nvar myStyle_background = {\n  //Style to display the background tile\n  fillColor: \"#d9d0c9\",\n  fillOpacity: 1,\n  color: \"#d9d0c9\",\n  weight: 2,\n  opacity: 0.1,\n  border: \"none\",\n  width: \"200px\",\n  height: \"200px\"\n};\n\nclass GlobalView extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getVenueList = (coordinates = null) => {\n      this.props.venueList(() => {\n        this.setState({\n          venueList: this.props.vnList.data\n        });\n      });\n    };\n\n    this.selectedVenue = (venueName, coordinates = null) => {\n      this.setState({\n        selectedVenue: venueName,\n        venueMarker: {\n          lat: coordinates[0],\n          lng: coordinates[1]\n        }\n      }, () => {\n        this.getBuildingList(venueName);\n      });\n    };\n\n    this.getBuildingList = (venueName, coordinates = null) => {\n      this.props.buildingList({\n        venueName: venueName\n      }, () => {\n        this.setState({\n          buildingList: this.props.bldList.data,\n          selectNavigation: true\n        }, () => {\n          let lat = this.state.buildingList[0].lat;\n          let lng = this.state.buildingList[0].lng;\n          const map = this.leafletMap.leafletElement;\n          let bldList = this.state.buildingList;\n          var globalRef = [];\n          this.globalList(bldList, venueName, globalRef);\n          map.flyTo(new L.LatLng(lat, lng), map.getZoom(), {\n            animate: true,\n            duration: 1\n          });\n        });\n      });\n    };\n\n    this.globalList = (bldList, venueName, globalRef) => {\n      bldList.forEach((element, i) => {\n        this.mapReferencePoint(element, element.buildingName, globalRef);\n      });\n    };\n\n    this.mapReferencePoint = (element, buildingName, globalRef) => {\n      let {\n        selectedVenue,\n        dstData\n      } = this.state;\n      this.props.refPoint(selectedVenue, buildingName, \"ground\", () => {\n        globalRef.push({\n          buildingName: buildingName,\n          refPoints: this.props.globalCoords.coordinates\n        });\n        this.setState({\n          glbCoords: this.props.globalCoords.coordinates\n        }, () => {\n          if (globalRef.length === this.state.buildingList.length) {\n            this.setState({\n              globalRefPointsList: globalRef\n            }, () => {\n              let refPoints = this.state.globalRefPointsList;\n              refPoints.forEach(r => {\n                this.createBackgroudLayer(element, r.refPoints, r);\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.createBackgroudLayer = (element, refPoints, r) => {\n      let arr = refPoints.map(r => {\n        return [parseFloat(r.globalRef.lng), parseFloat(r.globalRef.lat)];\n      });\n      var poly = {\n        // background layer for SIT building\n        type: \"FeatureCollection\",\n        features: [{\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [arr]\n          }\n        }]\n      };\n      const map = this.leafletMap.leafletElement;\n      L.geoJson(poly, {\n        style: myStyle_background\n      }).addTo(map);\n      this.setState({\n        backgroundPoly: poly\n      }, () => {\n        let lists = this.state.globalRefPointsList; // lists.forEach(r=>{\n\n        this.props.globalNavigation({\n          venueName: this.state.selectedVenue,\n          buildingName: r.buildingName\n        }, () => {\n          let arr = [];\n          let arr1 = [];\n          this.saveAllLadmark(arr, arr1, element, this.state.buildingList, r.refPoints, r);\n        }); // })\n      });\n    };\n\n    this.saveAllLadmark = (arr, arr1, element, bldList, globalCoords, r) => {\n      let data = this.props.androidNav;\n      let building = r.buildingName;\n      this.props.floorList({\n        venueName: this.state.selectedVenue,\n        buildingName: building\n      }, () => {\n        let flrList = this.props.flrList.data;\n        let length = flrList.length;\n        let sliced = data.slice(data.length - length);\n        data.splice(data.length - length, length);\n        this.buildingPoly.push({\n          building: building,\n          data: sliced\n        });\n        this.venueLandmark.push({\n          building: building,\n          data: data\n        });\n        data.forEach(element => {\n          element.buildingName = building;\n        });\n        let grdData = [];\n        data.forEach(r => {\n          if (r.floor === \"ground\") {\n            grdData.push(r);\n          }\n        });\n        let grdDataPoly = [];\n\n        for (let k = 0; k < sliced.length; k++) {\n          if (sliced[k].floor === \"ground\") {\n            grdDataPoly.push(sliced[k]);\n          }\n        }\n\n        this.handleLocalGlobal(grdData, grdDataPoly, building, globalCoords);\n        arr.push(data);\n        this.distLandmark.push(data);\n\n        if (this.distLandmark.length === bldList.length) {\n          var oldArray = this.distLandmark;\n          let buildingCluster = oldArray.map(r => {\n            return {\n              buildingName: r[0].buildingName,\n              data: r\n            };\n          });\n          var newArray = Array.prototype.concat.apply([], oldArray);\n          this.setState({\n            venueData: arr1,\n            venueNavigation: newArray,\n            buildingCluster: buildingCluster,\n            buildingPolyCluster: this.buildingPoly // landMarks:landMarks,\n            // polygons:polygons\n            // redData: red_data,\n            // polyData: poly_data\n\n          });\n        }\n      });\n    };\n\n    this.handleLocalGlobal = (redData, polyData, buildingName, globalCoords, floor = null) => {\n      let crd = globalCoords;\n      var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\n\n      this.coordHashMap(crd, coords); // let { redData, polyData } = this.state;\n\n      let red_data = redData;\n      let poly_data = polyData; //finding the point with lowest latitude and highest longitude\n\n      var least_lat = 0;\n      var high_lon = 0; //finding the point with lowest latitude and highest longitude\n\n      least_lat = this.findLeastLat(coords, least_lat); //evaluating high_lon\n\n      var c1 = least_lat === 3 ? 0 : least_lat + 1;\n      var c2 = least_lat === 0 ? 3 : least_lat - 1;\n      var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2; ///lengths between given 4 global co-ordinates\n\n      var lengths = [];\n      this.betweenLength(coords, lengths); // building angle with equator or true horizontal\n\n      var out = this.buildingAngle(coords, least_lat, high_lon); // Vertical alignment or lift correction\n\n      var diff = []; //array to store offset of each floor\n\n      this.liftCorrection(red_data, diff); // loop to calculate all the coordinates of local points\n\n      var local_coords = {\n        localx: 0,\n        localy: 0\n      };\n      this.coordGlblLandmark(red_data, diff, local_coords, coords, least_lat, high_lon, out); //converting to geoJSON format\n\n      let geoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n      };\n      this.geoJsonLandmark(red_data, geoJSON); ///// nonWalkableGrids Calculations\n\n      var local_coords = {\n        localx: 0,\n        localy: 0\n      };\n      this.coordGlblPolygon(poly_data, local_coords, diff, coords, least_lat, high_lon, out); //converting to geoJSON format\n\n      let geoJSON_poly = {\n        type: \"FeatureCollection\",\n        features: []\n      };\n      this.geoJSONPoly(poly_data, geoJSON_poly);\n      this.landMarks.push({\n        buildingName: buildingName,\n        geoJSON: geoJSON\n      });\n      this.polygons.push({\n        buildingName: buildingName,\n        geoJSONPoly: geoJSON_poly\n      });\n\n      if (this.state.dstName !== \"Destination\" && this.state.dstData.floor === this.state.srcData.floor) {\n        this.setState({\n          landMarks: this.landMarks,\n          polygons: this.polygons,\n          showMarker: true,\n          geoJSON: this.landMarks\n        }, () => {\n          this.singleFloorNav(globalCoords);\n        });\n      } else if (this.state.dstName !== \"Destination\" && this.state.dstData.floor !== this.state.srcData.floor) {\n        if (floor === this.state.srcData.floor) {\n          this.srcFloorPoly = geoJSON_poly;\n          this.srcFloorLandmark = geoJSON;\n        } else {\n          this.dstFloorPoly = geoJSON_poly;\n          this.dstFloorLandmark = geoJSON;\n        }\n      }\n\n      if (!this.state.navigationStrt && this.landMarks.length === this.state.buildingList.length) {\n        this.setState({\n          landMarks: this.landMarks,\n          polygons: this.polygons\n        });\n      } // this.setState({\n      //   // geoJSON: geoJSON,\n      //   // geoJSONPoly: geoJSON_poly,\n      //   currentPos: {\n      //     lat: geoJSON.features[0].properties.latitude,\n      //     lng: geoJSON.features[0].properties.longitude\n      //   }\n      // },()=>{\n      //   // this.singleFloorNav()\n      //   // this.callGlobal(shortestpath)\n      // });\n\n    };\n\n    this.sourceLabel = option => {\n      let resp = \"\";\n\n      if (option.element.type === \"Rooms\") {\n        resp = `${option.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"FloorConnection\") {\n        resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"Services\") {\n        if (option.element.subType === \"beacons\") {\n          resp = ``;\n        } else {\n          resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\n        }\n      } else {\n        resp = \"\";\n      }\n\n      return resp;\n    };\n\n    this.renderSourceMenu = option => {\n      let resp = \"\";\n\n      if (option.element.type === \"Rooms\") {\n        resp = `${option.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"FloorConnection\") {\n        resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"Services\") {\n        if (option.element.subType === \"beacons\") {\n          resp = ``;\n        } else {\n          resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\n        }\n      } else {\n        resp = \"\";\n      }\n\n      if (resp) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mapped-data m-0 \",\n          style: {\n            padding: \"0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row w-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-2\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"/inclunav/assets/images/destination2.svg\",\n                  alt: \"destination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: resp\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12 text-capitalize\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 9\n        }, this);\n      } else {\n        return null;\n      }\n    };\n\n    this.setNavigation = () => {\n      let {\n        srcData,\n        dstData,\n        selectedVenue\n      } = this.state;\n\n      if (srcData.buildingName !== dstData.buildingName) {\n        this.multiBldNav();\n      } else {\n        this.grids_all = []; // this.createGraph()\n\n        let building = this.state.dstData.buildingName;\n        let flrData = this.state.buildingCluster.filter(r => r.buildingName === this.state.dstData.buildingName)[0].data;\n        let polyData = this.state.buildingPolyCluster.filter(r => r.building === this.state.dstData.buildingName)[0].data;\n        let refPoint = this.state.globalRefPointsList.filter(r => r.buildingName === this.state.dstData.buildingName)[0].refPoints;\n\n        if (srcData.floor !== dstData.floor) {\n          this.multiFloorNav();\n        } else {\n          let flrMarkData = [];\n          flrData.forEach(r => {\n            if (r.floor === this.state.dstData.floor) {\n              flrMarkData.push(r);\n            }\n          });\n          let flrDataPoly = [];\n\n          for (let k = 0; k < polyData.length; k++) {\n            if (polyData[k].floor === this.state.dstData.floor) {\n              flrDataPoly.push(polyData[k]);\n            }\n          }\n\n          this.landMarks = [];\n          this.polygons = [];\n          this.handleLocalGlobal(flrMarkData, flrDataPoly, building, refPoint); // this.props.refPoint(\n          // selectedVenue,\n          // this.state.dstData.buildingName,\n          // \"ground\",\n          // () => {\n          // this.props.globalNavigation(\n          //   { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\n          //   () => {\n          //     this.fltrNvgnData(this.state.dstData.floor)\n          //   }\n          // );\n          //   }\n          // );\n        }\n      }\n    };\n\n    this.multiBldNav = () => {};\n\n    this.multiFloorNav = () => {\n      this.props.getAllBuildingElements({\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.dstData.buildingName\n      }, () => {\n        this.createGraph();\n      });\n    };\n\n    this.fltrNvgnData = floor => {\n      let data = this.props.androidNav;\n      const floors = [...new Set(data.map(s => s.floor))]; //polygon data or nonwalkables of all floors\n\n      var poly_data = data.slice(data.length - floors.length, data.length).filter(r => {\n        return r.floor === floor;\n      }); //reduced data without non walkables\n\n      var red_data = data.slice(0, data.length - floors.length).filter(r => {\n        return r.floor === floor;\n      });\n      this.setState({\n        floor: floors[0],\n        floors: floors,\n        redData: red_data,\n        polyData: poly_data\n      }, () => {\n        this.handleLocalGlobal(); // this.mapReferencePoint()\n        // this.singleFloorNav()\n      });\n    };\n\n    this.getData = building => {\n      let data = {\n        venueName: this.state.selectedVenue,\n        buildingName: building\n      };\n      this.props.floorList(data, () => {\n        let flrList = this.props.flrList.data;\n        this.setState({\n          flrList: flrList,\n          selectedBuilding: building\n        });\n      });\n    };\n\n    this.getCompleteData = floor => {\n      let {\n        selectedVenue,\n        selectedBuilding\n      } = this.state;\n      this.props.globalNavigation({\n        venueName: selectedVenue,\n        buildingName: selectedBuilding\n      }, () => {\n        this.fltrNvgnData(floor);\n      });\n    };\n\n    this.coordHashMap = (crd, coords) => {\n      coords[0] = {\n        lat: parseFloat(crd[0].globalRef.lat),\n        lon: parseFloat(crd[0].globalRef.lng),\n        localx: parseInt(crd[0].localRef.lat),\n        localy: parseInt(crd[0].localRef.lng)\n      };\n      coords[1] = {\n        lat: parseFloat(crd[3].globalRef.lat),\n        lon: parseFloat(crd[3].globalRef.lng),\n        localx: parseInt(crd[3].localRef.lng),\n        localy: parseInt(crd[3].localRef.lat)\n      };\n      coords[2] = {\n        lat: parseFloat(crd[2].globalRef.lat),\n        lon: parseFloat(crd[2].globalRef.lng),\n        localx: parseInt(crd[2].localRef.lng),\n        localy: parseInt(crd[2].localRef.lat)\n      };\n      coords[3] = {\n        lat: parseFloat(crd[1].globalRef.lat),\n        lon: parseFloat(crd[1].globalRef.lng),\n        localx: parseInt(crd[1].localRef.lng),\n        localy: parseInt(crd[1].localRef.lat)\n      };\n    };\n\n    this.findLeastLat = (coords, leastLat) => {\n      for (let i = 0; i < coords.length; i++) {\n        if (coords[i].lat == coords[leastLat].lat) {\n          //handling two points with equal lat\n          if (coords[i].lon > coords[leastLat].lon) {\n            leastLat = i;\n          }\n        } else if (coords[i].lat < coords[leastLat].lat) {\n          leastLat = i;\n        }\n      }\n\n      return leastLat;\n    };\n\n    this.betweenLength = (coords, lengths) => {\n      for (let i = 0; i < coords.length; i++) {\n        var temp1;\n\n        if (i == coords.length - 1) {\n          temp1 = getHaversineDistance(coords[i], coords[0]);\n        } else {\n          temp1 = getHaversineDistance(coords[i], coords[i + 1]);\n        }\n\n        lengths.push(temp1);\n      }\n    };\n\n    this.buildingAngle = (coords, leastLat, highLon) => {\n      let b = getHaversineDistance(coords[leastLat], coords[highLon]);\n      const horizontal = obtaincoordinates(coords[leastLat], 0, b);\n      let c = getHaversineDistance(coords[leastLat], horizontal);\n      let a = getHaversineDistance(coords[highLon], horizontal);\n      let out = Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180 / Math.PI;\n      return out;\n    };\n\n    this.liftCorrection = (red_data, diff) => {\n      var ground_lift = red_data.filter(x => {\n        return x.element.subType === \"lift\" && x.floor === \"ground\";\n      });\n\n      if (ground_lift.length != 0) {\n        var nth_lift = 0; //loop to find which lift is across more floors\n\n        for (let i = 0; i < ground_lift.length; i++) {\n          var temp = red_data.filter(x => {\n            return x.element.subType === \"lift\" && x.properties.name === ground_lift[i].properties.name;\n          });\n\n          if (temp.length >= red_data.filter(x => {\n            return x.element.subType === \"lift\" && x.properties.name === ground_lift[nth_lift].properties.name;\n          }).length) {\n            nth_lift = i;\n          }\n        }\n\n        var lifts = red_data.filter(x => {\n          return x.element.subType === \"lift\" && x.properties.name === ground_lift[nth_lift].properties.name;\n        });\n\n        for (let i = 0; i < lifts.length; i++) {\n          var temp = {};\n          temp.x = lifts[i].coordinateX - ground_lift[nth_lift].coordinateX;\n          temp.y = lifts[i].coordinateY - ground_lift[nth_lift].coordinateY;\n          temp.floor = lifts[i].floor;\n          diff.push(temp);\n        }\n      }\n    };\n\n    this.coordGlblLandmark = (red_data, diff, local_coords, coords, least_lat, high_lon, out) => {\n      for (let i = 0; i < red_data.length; i++) {\n        if (diff.length > 1) {\n          //vertical correction across floors\n          var test = diff.filter(x => {\n            return x.floor === red_data[i].floor;\n          });\n          local_coords.localx = red_data[i].coordinateX - test[0].x;\n          local_coords.localy = red_data[i].coordinateY - test[0].y;\n        } else {\n          local_coords.localx = red_data[i].coordinateX;\n          local_coords.localy = red_data[i].coordinateY;\n        }\n\n        var l = distance(coords[least_lat], coords[high_lon]);\n        var m = distance(local_coords, coords[high_lon]);\n        var n = distance(coords[least_lat], local_coords);\n        var theta = Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180 / Math.PI;\n\n        if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n          theta = 0;\n        } //staright line case\n\n\n        let ang = theta + out;\n        var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n\n        var ver = dist * Math.sin(ang * Math.PI / 180.0);\n        var hor = dist * Math.cos(ang * Math.PI / 180.0);\n        var final = obtaincoordinates(coords[least_lat], ver, hor);\n        red_data[i].properties.latitude = final.lat;\n        red_data[i].properties.longitude = final.lon;\n      }\n    };\n\n    this.geoJsonLandmark = (red_data, geoJSON) => {\n      for (let i = 0; i < red_data.length; i++) {\n        var p = red_data[i];\n\n        if (p.name === \"\") {\n          //to deal with empty name field\n          p.name = p.properties.name;\n        }\n\n        geoJSON.features.push({\n          type: \"Feature\",\n          properties: {\n            name: p.name,\n            floor: p.floor,\n            type: p.element.subType,\n            floorElement: p.element.type,\n            localx: p.coordinateX,\n            localy: p.coordinateY,\n            ...p.properties\n          },\n          geometry: {\n            type: \"Point\",\n            coordinates: [p.properties.longitude, p.properties.latitude]\n          }\n        });\n      }\n    };\n\n    this.coordGlblPolygon = (poly_data, local_coords, diff, coords, least_lat, high_lon, out) => {\n      for (let k = 0; k < poly_data.length; k++) {\n        var temp2 = [];\n        var floor_length = poly_data[k].properties.floorLength;\n\n        for (let j = 0; j < poly_data[k].properties.clickedPoints.length; j++) {\n          var line = poly_data[k].properties.clickedPoints[j];\n          var numbers = line.split(\",\").map(Number);\n          var temp1 = [];\n\n          for (let i = 0; i < numbers.length; i++) {\n            local_coords.localx = numbers[i] % floor_length;\n            local_coords.localy = numbers[i] / floor_length; //for vertical allignment across floors\n\n            if (diff.length > 1) {\n              var test = diff.filter(x => {\n                return x.floor == poly_data[k].floor;\n              });\n              local_coords.localx = local_coords.localx - test[0].x;\n              local_coords.localy = local_coords.localy - test[0].y;\n            }\n\n            var l = distance(coords[least_lat], coords[high_lon]);\n            var m = distance(local_coords, coords[high_lon]);\n            var n = distance(coords[least_lat], local_coords);\n            var theta = Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180 / Math.PI;\n\n            if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n              theta = 0;\n            } //staright line case\n\n\n            let ang = theta + out;\n            var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n\n            var ver = dist * Math.sin(ang * Math.PI / 180.0);\n            var hor = dist * Math.cos(ang * Math.PI / 180.0);\n            var final = obtaincoordinates(coords[least_lat], ver, hor);\n            var temp = [];\n            temp.push(final.lon, final.lat);\n            temp1.push(temp);\n          }\n\n          temp2.push(temp1);\n        }\n\n        poly_data[k][\"global\"] = temp2;\n      }\n    };\n\n    this.geoJSONPoly = (poly_data, geoJSON_poly) => {\n      for (let j = 0; j < poly_data.length; j++) {\n        for (let i = 0; i < poly_data[j].global.length; i++) {\n          geoJSON_poly.features.push({\n            type: \"Feature\",\n            properties: {\n              floor: poly_data[j].floor\n            },\n            geometry: {\n              type: \"LineString\",\n              coordinates: poly_data[j].global[i]\n            }\n          });\n        }\n      }\n    };\n\n    this.handleCall = (e, position) => {\n      if (String(position.properties.contactNo) === \"null\") {\n        /*to handle null values*/\n        e.preventDefault();\n        alert(` No contact number associated`);\n      } else {\n        window.location.href = \"tel:\" + position.properties.contactNo;\n      }\n    };\n\n    this.handleInternet = (e, position) => {\n      if (String(position.properties.url) === \"null\") {\n        /*to handle null values*/\n        e.preventDefault();\n        alert(` No website associated`);\n      } else {\n        window.open(position.properties.url, \"_blank\"\n        /*Open in a new window.*/\n        );\n      }\n    };\n\n    this.handleWhatsapp = (e, position) => {\n      if (String(position.properties.contactNo) == \"null\") {\n        /*to handle null values*/\n        e.preventDefault();\n        alert(` No whatsapp number associated`);\n      } else {\n        window.open(\"https://api.whatsapp.com/send?phone=\" + position.properties.contactNo, \"_blank\"\n        /*Open in a new window.*/\n        );\n      }\n    };\n\n    this.handleEmail = (e, position) => {\n      if (String(position.properties.email) == \"null\") {\n        /*to handle null values*/\n        e.preventDefault();\n        alert(` No Email associated`);\n      } else {\n        window.location.href = `mailto: ${position.properties.email}`;\n      }\n    };\n\n    this.handleInfo = (e, position) => {\n      const info = \"\\n\" + \"Name :  \" + position.properties.name + \"\\n\" + \"Floor num. :  \" + position.properties.floor + \"\\n\" + \"Contact num. :  \" + position.properties.contactNo + \"\\n\" + \"Timings :  \" + position.properties.startTime + \" - \" + position.properties.endTime;\n      e.preventDefault();\n      alert(` ${info}`);\n    };\n\n    this.singleFloorNav = globalCoords => {\n      this.props.getAllBuildingElements({\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.dstData.buildingName\n      }, () => {\n        // this.setState(\n        //   {\n        //     list: lists\n        //   },\n        //   () => {\n        this.mapBuildingData();\n        let data = {\n          venueName: this.state.selectedVenue,\n          buildingName: this.state.dstData.buildingName\n        };\n        this.props.floorList(data, () => {\n          let flrList = this.props.flrList.data;\n          this.setState({\n            flrList: flrList\n          }, () => {\n            this.handleSubmit(globalCoords);\n          });\n        }); //   }\n        // );\n      });\n    };\n\n    this.createGraph = () => {\n      let building = this.state.dstData.buildingName;\n      let flrList = [];\n      let flrData = this.state.buildingCluster.filter(r => r.buildingName === this.state.dstData.buildingName)[0].data;\n      let polyData = this.state.buildingPolyCluster.filter(r => r.building === this.state.dstData.buildingName)[0].data;\n      let refPoint = this.state.globalRefPointsList.filter(r => r.buildingName === this.state.dstData.buildingName)[0].refPoints;\n      polyData.forEach(r => {\n        flrList.push(r.floor);\n      });\n      let srcFlrMarkData = [];\n      let dstFlrMarkData = [];\n      flrData.forEach(r => {\n        if (r.floor === this.state.srcData.floor) {\n          srcFlrMarkData.push(r);\n        }\n\n        if (r.floor === this.state.dstData.floor) {\n          dstFlrMarkData.push(r);\n        }\n      });\n      let srcFlrDataPoly = [];\n      let dstFlrDataPoly = [];\n\n      for (let k = 0; k < polyData.length; k++) {\n        if (polyData[k].floor === this.state.srcData.floor) {\n          srcFlrDataPoly.push(polyData[k]);\n        }\n\n        if (polyData[k].floor === this.state.dstData.floor) {\n          dstFlrDataPoly.push(polyData[k]);\n        }\n      }\n\n      this.handleLocalGlobal(srcFlrMarkData, srcFlrDataPoly, building, refPoint, this.state.srcData.floor);\n      this.handleLocalGlobal(dstFlrMarkData, dstFlrDataPoly, building, refPoint, this.state.dstData.floor);\n      this.mapBuildingData();\n      this.setState({\n        floorList: flrList,\n        srcFloorPoly: this.srcFloorPoly,\n        geoJSONPoly: this.srcFloorPoly,\n        dstFloorPoly: this.dstFloorPoly,\n        srcFloorLandMark: this.srcFloorLandmark,\n        geoJSON: this.srcFloorLandmark,\n        dstFloorLandMark: this.dstFloorLandmark,\n        currentFloor: this.state.srcData.floor\n      }, () => {\n        this.findpath(refPoint);\n      });\n    };\n\n    this.mapBuildingData = () => {\n      let nodes = this.props.navigationInfo;\n      this.grids_all = [];\n      let lists = [];\n      let num_vert = 0;\n      let fc = new Map();\n\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          num_vert++;\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n\n          if (fc.has(v) === false) {\n            fc.set(v, [val]);\n          } else {\n            fc.get(v).push(val);\n          }\n        }\n      }\n\n      this.graph = new Graph(num_vert + 2);\n\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.graph.addVertex(val);\n        }\n\n        if (nodes[i].properties.floorElement === \"Floor\") {\n          if (nodes[i].properties.length == 8) {\n            var v = nodes[i].properties.frConn[0].split(\",\");\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n            var len = v.length / 2;\n\n            if (v.length % 2 === 0) {\n              for (var j = 0; j < v.length; j = j + 2) {\n                var val = parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) + parseInt(v[j]);\n                var vert1 = nodes[i].properties.floor + \",\" + val;\n\n                for (var k = j + 2; k < v.length; k = k + 2) {\n                  val = parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) + parseInt(v[k]);\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\n                  this.graph.addEdge(vert1, vert2, flrmatrix[len * (j / 2) + k / 2], true);\n                }\n              }\n            } else {}\n          }\n\n          this.grids_all.push(nodes[i]);\n        }\n      }\n\n      let getKeys = fc.keys();\n\n      for (let i of getKeys) {\n        var get_values = fc.get(i);\n        var cnt = 0;\n        var prev = null;\n\n        for (var j of get_values) {\n          if (cnt > 0) {\n            this.graph.addEdge(prev, j, 0, true);\n            prev = j;\n          }\n\n          if (cnt === 0) {\n            prev = j;\n          }\n\n          cnt++;\n        }\n      }\n    };\n\n    this.handleSubmit = globalCoords => {\n      let {\n        srcData,\n        srcName,\n        dstData,\n        dstName,\n        dstfloorL,\n        dstfloorB\n      } = this.state;\n      let srcVal = \"\";\n      let dstVal = \"\";\n      let srcfloor = \"\";\n      let dstfloor = \"\";\n\n      for (let k = 0; k < this.props.navigationInfo.length; k++) {\n        if (this.props.navigationInfo[k].properties.floorElement !== undefined && this.props.navigationInfo[k].properties.floorElement === \"Rooms\") {\n          if (srcData.name === this.props.navigationInfo[k].properties.roomName) {\n            srcVal = this.props.navigationInfo[k].properties.node;\n            srcfloor = this.props.navigationInfo[k].properties.floor;\n            dstfloor = this.props.navigationInfo[k].properties.floor;\n          }\n\n          if (dstData.name === this.props.navigationInfo[k].properties.roomName) {\n            dstVal = this.props.navigationInfo[k].properties.node;\n          }\n        }\n      }\n\n      let flrList = this.state.buildingPolyCluster.filter((r, i) => {\n        return r.building === this.state.dstData.buildingName;\n      })[0].data;\n      let dstFlrDt = flrList.filter((r, i) => {\n        return r.floor === this.state.dstData.floor;\n      });\n      let srcfloorL = dstFlrDt[0].properties.floorLength;\n      let srcfloorB = dstFlrDt[0].properties.floorBreadth;\n\n      if (srcVal != null && dstVal != null) {\n        let dest_x = this.state.dstData.coordinateX;\n        let dest_y = this.state.dstData.coordinateY;\n\n        if (srcfloor === dstfloor) {\n          this.callwhile(srcfloor, srcVal, srcfloorL, srcfloorB, dest_x, dest_y, true, \"myCanvassrc\", globalCoords);\n          this.setState({\n            samefloor: true\n          });\n        } else {// this.setState({\n          //   samefloor: false,\n          //   buildingView: true\n          // });\n          // this.findpath();\n        }\n      } else {}\n    };\n\n    this.findFloor = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (array[i].type) {\n            if (array[i].geomtery.type === \"Polygon\") {\n              if (array[i].properties.floor === key) {\n                return i;\n              }\n            }\n          }\n\n          if (array[i].floor === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.findAccessPath = (paths, srcfloor) => {\n      var weights = [1, 1, 1, 1, 1, 1];\n      var score = [];\n      var protrusion = [];\n      var epi = 0;\n\n      for (let i = 0; i < paths.length; i++) {\n        var points = paths[i];\n        var pro = [0, 0, 0, 0, 0, 0]; //stairs\n\n        for (let j = 0; j < parseInt(this.flrconn.length); j++) {\n          var cord = [parseInt(this.flrconn[j][0]), parseInt(this.flrconn[j][1])];\n\n          if (points.includes(cord)) {\n            pro[0] = pro[0] + 1;\n          }\n        } //turn\n\n\n        for (let j = 1; j < points.length - 1; j++) {\n          var a = points[j - 1][0] - points[j][0];\n          var b = points[j][1] - points[j + 1][1];\n          var c = points[j - 1][1] - points[j][1];\n          var d = points[j][0] - points[j + 1][0];\n\n          if (a * b != c * d) {\n            pro[1] = pro[1] + 1;\n          }\n        } //protrusion\n\n\n        for (let j = 0; j < protrusion.length; j++) {\n          for (let k = 0; j < points.length; k++) {\n            var dist = Math.sqrt((points[k][0] - protrusion[j][0]) * (points[k][0] - protrusion[j][0]) + (points[k][1] - protrusion[j][1]) * (points[k][1] - protrusion[j][1]));\n\n            if (dist < epi) {\n              pro[2] = pro[2] + 1;\n            }\n          }\n        }\n\n        var pathscr = 0;\n\n        for (let j = 0; j < 6; j++) {\n          pathscr = pathscr + weights[j] * pro[j];\n        }\n\n        score.push(pathscr);\n      }\n\n      var min = Number.MAX_VALUE();\n      var index = -1;\n\n      for (let i = 0; i < score.length; i++) {\n        if (score[i] < min) {\n          min = score[i];\n          index = i;\n        }\n      }\n\n      return paths[index];\n    };\n\n    this.findSafePath = (paths, srcfloor) => {\n      var weights = [1, 1, 1, 1, 1, 1];\n      var score = [];\n\n      for (let i = 0; i < paths.length; i++) {\n        var points = paths[i];\n        var props = [0, 0, 0, 0, 0, 0];\n        var protrusion = [];\n        var epi = 0; //stairs\n\n        for (let j = 0; j < parseInt(this.flrconn.length); j++) {\n          var cord = [parseInt(this.flrconn[j][0]), parseInt(this.flrconn[j][1])];\n\n          if (points.includes(cord)) {\n            props[0] = props[0] + 1;\n          }\n        } //turn\n\n\n        for (let j = 1; j < points.length - 1; j++) {\n          var a = points[j - 1][0] - points[j][0];\n          var b = points[j][1] - points[j + 1][1];\n          var c = points[j - 1][1] - points[j][1];\n          var d = points[j][0] - points[j + 1][0];\n\n          if (a * b != c * d) {\n            props[1] = props[1] + 1;\n          }\n        } //protrusion\n\n\n        for (let j = 0; j < protrusion.length; j++) {\n          for (let k = 0; j < points.length; k++) {\n            var dist = Math.sqrt((points[k][0] - protrusion[j][0]) * (points[k][0] - protrusion[j][0]) + (points[k][1] - protrusion[j][1]) * (points[k][1] - protrusion[j][1]));\n\n            if (dist < epi) {\n              props[2] = props[2] + 1;\n            }\n          }\n        }\n\n        var pathscr = 0;\n\n        for (let j = 0; j < 6; j++) {\n          pathscr = pathscr + weights[j] * props[j];\n        }\n\n        score[i] = pathscr;\n      }\n\n      var min = Number.MAX_VALUE();\n      var index = -1;\n\n      for (let i = 0; i < score.length; i++) {\n        if (score[i] < min) {\n          min = score[i];\n          index = i;\n        }\n      }\n\n      return paths[index];\n    };\n\n    this.callwhile_h = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid, globalCoords = null) => {\n      var closed = [];\n\n      for (let i = 0; i < m; i++) {\n        var row = [],\n            row1 = [],\n            row2 = [],\n            row3 = [],\n            row4 = [];\n\n        for (let j = 0; j < n; j++) {\n          row.push(1);\n          row1.push(-1);\n          row3.push(Number.MAX_VALUE);\n          var row5 = [];\n          row4.push(row5);\n        }\n\n        this.shortestpath(row4);\n        this.grids.push(row);\n        this.visited.push(row1);\n        this.minimumcost.push(row3);\n      }\n\n      var ind1 = this.findFloor(srcfloor, this.grids_all);\n\n      if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n        for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n          var nodes = this.grid_all[ind1].properties.grid_1[i].split(\",\");\n\n          for (let j = 0; j < nodes.length; j++) {\n            var val = nodes[j];\n            var x = val % m;\n            var y = parseInt(val / m);\n            this.grids[x][y] = 0;\n          }\n        }\n      }\n\n      var src_x = srcVal % m;\n      var src_y = parseInt(srcVal / m);\n      this.leaves.push([src_x, src_y]);\n      this.shortestpath[src_x][src_y].push([src_x, src_y]);\n      this.minimumcost[src_x][src_y] = 0;\n\n      while (this.leaves.length > 0) {\n        var min = Number.MAX_VALUE;\n        var q;\n        var ind;\n\n        for (let i = 0; i < this.leaves.length; i++) {\n          if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n            min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n            q = this.leaves[i];\n          }\n        }\n\n        this.visited[q[0]][q[1]] = 1;\n\n        if (single == true) {\n          if (q[0] == dest_x && q[1] == dest_y) {\n            break;\n          }\n        } else {\n          var check = true;\n\n          for (let i = 0; i < parseInt(this.flrconn.lenght); i++) {\n            if (this.visited[parseInt(this.flrconn[i][0])][parseInt(this.flrconn[i][1])] == -1) {\n              check = false;\n            }\n          }\n\n          if (check == true) {\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n              var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n              console.log(\"verjsdh1\", vert);\n              this.graph.addEdge(vert, this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])], true);\n            }\n\n            this.reset_var();\n            break;\n          }\n        }\n\n        this.leaves.splice(ind, 1);\n\n        for (let i = q[0] - 1; i <= q[0] + 1; i++) {\n          for (let j = q[1] - 1; j <= q[1] + 1; j++) {\n            if (i >= 0 && i < m || j >= 0 && j < n) {\n              if (this.visited[i][j] == -1 && this.grids[i][j] == 1) {//A* main part to release closed list and open lists   \n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.callwhile = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid, globalCoords = null) => {\n      var min = Number.MAX_VALUE;\n      var minleave = [];\n      var var_i;\n      var notthere;\n\n      for (let i = 0; i < m; i++) {\n        var row = [],\n            row1 = [],\n            row3 = [],\n            row4 = [];\n\n        for (let j = 0; j < n; j++) {\n          row.push(1);\n          row1.push(-1);\n          row3.push(Number.MAX_VALUE);\n          var row5 = [];\n          row4.push(row5);\n        }\n\n        this.shortestpath.push(row4);\n        this.grids.push(row);\n        this.visited.push(row1);\n        this.minimumcost.push(row3);\n      }\n\n      var ind1 = this.findFloor(srcfloor, this.grids_all);\n\n      if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n        for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n          var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n\n          for (let j = 0; j < nodes.length; j++) {\n            var val = nodes[j];\n            var x = val % m;\n            var y = parseInt(val / m);\n            this.grids[x][y] = 0;\n          }\n        }\n      }\n\n      var src_x = srcVal % m;\n      var src_y = parseInt(srcVal / m);\n      this.leaves.push([src_x, src_y]);\n      this.shortestpath[src_x][src_y].push([src_x, src_y]);\n      this.minimumcost[src_x][src_y] = 0;\n\n      while (this.leaves.length > 0) {\n        min = Number.MAX_VALUE;\n\n        for (let i = 0; i < this.leaves.length; i++) {\n          if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n            min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n            minleave = this.leaves[i];\n            var_i = i;\n          }\n        }\n\n        this.visited[minleave[0]][minleave[1]] = 1;\n\n        if (single == true) {\n          if (minleave[0] == dest_x && minleave[1] == dest_y) {\n            break;\n          }\n        } else {\n          var check = true; //console.log(this.flrconn);\n\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            if (this.visited[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])] == 1) {} else {\n              check = false;\n            }\n          }\n\n          if (check == true) {\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n              var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n              console.log(\"verjsdh1\", vert);\n              console.log(this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])]);\n              this.graph.addEdge(vert, this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])], true);\n            }\n\n            this.reset_var();\n            break;\n          }\n        }\n\n        this.leaves.splice(var_i, 1);\n\n        for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n          for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n            if (j >= 0 && j < m && k >= 0 && k < n) {\n              if (this.visited[j][k] == -1 && this.grids[j][k] == 1 && (j == minleave[0] || k == minleave[1])) {\n                if (this.minimumcost[j][k] > this.minimumcost[minleave[0]][minleave[1]] + Math.abs(minleave[0] - j) + Math.abs(minleave[1] - k) //Math.abs(j-dest_x)+Math.abs(k-dest_y)\n                ) {\n                    this.minimumcost[j][k] = this.minimumcost[minleave[0]][minleave[1]] + Math.abs(minleave[0] - j) + Math.abs(minleave[1] - k); //+Math.abs(j-dest_x)+Math.abs(k-dest_y);\n\n                    this.shortestpath[j][k] = this.shortestpath[minleave[0]][minleave[1]].concat([[j, k]]);\n                    notthere = 1;\n\n                    for (var p = 0; p < this.leaves.length; p++) {\n                      if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                        notthere = 0;\n                      }\n                    }\n\n                    if (notthere == 1) {\n                      this.leaves.push([j, k]);\n                    }\n                  }\n              }\n            }\n          }\n        }\n      }\n\n      if (single == true) {\n        let sp = this.shortestpath[dest_x][dest_y];\n        let mypoints = sp.map(r => {\n          return {\n            x: r[0],\n            y: r[1]\n          };\n        });\n        sp = JSON.stringify(sp);\n        var refinedpaths = simplifyPath(mypoints, 2);\n        let {\n          selectedVenue,\n          selectedBuilding\n        } = this.state; // this.props.globalNavigation(\n        // { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\n        // () => {\n\n        this.callGlobal(sp, srcfloor, globalCoords); // this.fltrNvgnData(floor)\n        // }\n        // );\n\n        let flrData = this.state.buildingCluster.filter(r => r.buildingName === this.state.dstData.buildingName)[0].data;\n        let allElements = flrData;\n\n        if (this.state.srcData.floor === this.state.dstData.floor) {\n          let instructions = findInstructions(sp, refinedpaths, allElements, srcfloor);\n          this.setState({\n            instructions: instructions\n          });\n        } else {\n          let instructions = findInstructions(sp, refinedpaths, allElements, srcfloor);\n\n          if (srcfloor === this.state.srcData.floor) {\n            this.srcFlrInstructions = instructions;\n            this.setState({\n              instructions: instructions\n            });\n          } else {\n            this.dstFlrInstructions = instructions;\n          }\n        } // this.setState({\n        //   instructions: instructions\n        // });\n\n      }\n\n      this.reset_var();\n    };\n\n    this.callGlobal = (shortestpath, srcfloor = null, globalCoords = null) => {\n      let crd = this.props.globalCoords.coordinates;\n\n      if (globalCoords) {\n        crd = globalCoords;\n      }\n\n      var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\n\n      let sp = JSON.parse(shortestpath);\n      this.defineCoords(crd, coords); //finding the point with lowest latitude and highest longitude\n\n      var least_lat = 0;\n      var high_lon = 0; //finding the point with lowest latitude and highest longitude\n\n      for (let i = 0; i < coords.length; i++) {\n        if (coords[i].lat == coords[least_lat].lat) {\n          //handling two points with equal lat\n          if (coords[i].lon > coords[least_lat].lon) {\n            least_lat = i;\n          }\n        } else if (coords[i].lat < coords[least_lat].lat) {\n          least_lat = i;\n        }\n      } //evaluating high_lon\n\n\n      var c1 = least_lat == 3 ? 0 : least_lat + 1;\n      var c2 = least_lat == 0 ? 3 : least_lat - 1;\n      var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2;\n      console.log(c1);\n      console.log(c2);\n      console.log(coords[c1].lat);\n      console.log(coords[c2].lon); ///lengths between given 4 global co-ordinates\n\n      var lengths = [];\n\n      for (let i = 0; i < coords.length; i++) {\n        var temp1;\n\n        if (i == coords.length - 1) {\n          temp1 = getHaversineDistance(coords[i], coords[0]);\n        } else {\n          temp1 = getHaversineDistance(coords[i], coords[i + 1]);\n        }\n\n        lengths.push(temp1);\n      } // building angle with equator or true horizontal\n\n\n      var b = getHaversineDistance(coords[least_lat], coords[high_lon]);\n      const horizontal = obtaincoordinates(coords[least_lat], 0, b);\n      var c = getHaversineDistance(coords[least_lat], horizontal);\n      var a = getHaversineDistance(coords[high_lon], horizontal);\n      var out = Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180 / Math.PI; // Vertical alignment or lift correction\n\n      var diff = []; //array to store offset of each floor\n      // loop to calculate all the coordinates of local points\n\n      var local_coords = {\n        localx: 0,\n        localy: 0\n      };\n      var myarr = JSON.parse(shortestpath); //finding min and max latitude and longitude for the path\n\n      var max_lat = Number.MIN_SAFE_INTEGER;\n      var max_long = Number.MIN_SAFE_INTEGER;\n      var min_lat = Number.MAX_VALUE;\n      var min_long = Number.MAX_VALUE;\n\n      for (let i = 0; i < sp.length; i++) {\n        if (diff.length > 1) {\n          //vertical correction across floors\n          local_coords.localx = sp[i][0];\n          local_coords.localy = sp[i][1];\n        } else {\n          local_coords.localx = sp[i][0];\n          local_coords.localy = sp[i][1];\n        }\n\n        var l = distance(coords[least_lat], coords[high_lon]);\n        var m = distance(local_coords, coords[high_lon]);\n        var n = distance(coords[least_lat], local_coords);\n        var theta = Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180 / Math.PI;\n\n        if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n          theta = 0;\n        } //staright line case\n\n\n        let ang = theta + out;\n        var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n\n        var ver = dist * Math.sin(ang * Math.PI / 180.0);\n        var hor = dist * Math.cos(ang * Math.PI / 180.0);\n        var final = obtaincoordinates(coords[least_lat], ver, hor);\n        myarr[i][0] = final.lat;\n        myarr[i][1] = final.lon;\n        if (max_lat < myarr[i][0]) max_lat = myarr[i][0];\n        if (max_long < myarr[i][1]) max_long = myarr[i][1];\n        if (min_lat > myarr[i][0]) min_lat = myarr[i][0];\n        if (min_long > myarr[i][1]) min_long = myarr[i][1];\n      }\n\n      var mid_lat = (min_lat + max_lat) / 2;\n      var mid_long = (min_long + max_long) / 2;\n      var corner1 = L.latLng(min_lat + 0.0001, min_long + 0.0001);\n      var corner2 = L.latLng(max_lat + 0.0001, max_long + 0.0001);\n      var myBounds = L.latLngBounds(corner1, corner2);\n      var map = this.leafletMap.leafletElement; //console.log(myBounds.getNorthEast());\n      //console.log(min_lat);\n      //console.log(max_lat);\n\n      map.flyTo(new L.latLng(mid_lat, mid_long), 21.6);\n      console.log(map.getZoom()); //map.flyToBounds(myBounds);\n\n      console.log(map.getZoom()); //map.flyTo(new L.LatLng(mid_lat+0.00002,mid_long+0.00001),22.5, {animation : true, duration :1});\n      //console.log(min_long);\n      //console.log(min_lat);\n\n      console.log(map.getZoom()); //converting to geoJSON format\n\n      let geoJSON = {\n        type: \"FeatureCollection\",\n        features: []\n      }; // myarr.shift();\n      // myarr.pop();\n      // myarr.pop();\n\n      for (let i = 0; i < myarr.length; i++) {\n        var p = myarr[i];\n        geoJSON.features.push({\n          type: \"Feature\",\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [p[0], p[1]]\n          }\n        });\n      }\n\n      if (this.state.srcData.floor !== this.state.dstData.floor) {\n        if (srcfloor === this.state.srcData.floor) {\n          this.srcFloorSp = geoJSON;\n        } else {\n          this.dstFloorSp = geoJSON;\n        }\n      } else {\n        this.setState({\n          showpath: true,\n          // showMarker: false,\n          zoom: 19,\n          pathgeoJSON: geoJSON\n        }, () => {// var southWest = L.latLng(src[1], src[0]),\n          // northEast = L.latLng(dst[1], dst[0]),\n          // bounds = L.latLngBounds(southWest, northEast);\n          // map.fitBounds(bounds);\n        });\n      }\n    };\n\n    this.defineCoords = (crd, coords) => {\n      coords[0] = {\n        lat: parseFloat(crd[0].globalRef.lat),\n        lon: parseFloat(crd[0].globalRef.lng),\n        localx: parseInt(crd[0].localRef.lat),\n        localy: parseInt(crd[0].localRef.lng)\n      };\n      coords[1] = {\n        lat: parseFloat(crd[3].globalRef.lat),\n        lon: parseFloat(crd[3].globalRef.lng),\n        localx: parseInt(crd[3].localRef.lng),\n        localy: parseInt(crd[3].localRef.lat)\n      };\n      coords[2] = {\n        lat: parseFloat(crd[2].globalRef.lat),\n        lon: parseFloat(crd[2].globalRef.lng),\n        localx: parseInt(crd[2].localRef.lng),\n        localy: parseInt(crd[2].localRef.lat)\n      };\n      coords[3] = {\n        lat: parseFloat(crd[1].globalRef.lat),\n        lon: parseFloat(crd[1].globalRef.lng),\n        localx: parseInt(crd[1].localRef.lng),\n        localy: parseInt(crd[1].localRef.lat)\n      };\n    };\n\n    this.handleVenueChange = e => {\n      this.setState({\n        buildingList: [],\n        flrList: [],\n        selectedBuilding: \"\",\n        floorSelect: false,\n        selectNavigation: false,\n        geoJSON: [],\n        geoJSONPoly: []\n      }, () => {\n        this.selectedVenue(e[0].venueName, e[0].coordinates);\n      });\n    };\n\n    this.findpath = () => {\n      let srcVal = \"\";\n      let dstVal = \"\";\n      let srcfloor = \"\";\n      let dstfloor = \"\";\n      let srcFloorL = \"\";\n      let srcFloorB = \"\";\n      let dstFloorL = \"\";\n      let dstFloorB = \"\";\n      let building = this.state.dstData.buildingName;\n      let flrData = this.state.buildingCluster.filter(r => r.buildingName === this.state.dstData.buildingName)[0].data;\n      let polyData = this.state.buildingPolyCluster.filter(r => r.building === this.state.dstData.buildingName)[0].data;\n      let refPoint = this.state.globalRefPointsList.filter(r => r.buildingName === this.state.dstData.buildingName)[0].refPoints; // let i = parseInt(gridY) * floorL + parseInt(gridX);\n      // let flrMarkData = []\n      //        flrData.forEach(r=>{\n      //         if(r.floor === this.state.dstData.floor){\n      //           flrMarkData.push(r)\n      //         } \n      //       })\n\n      let flrDataPoly = [];\n\n      for (let k = 0; k < polyData.length; k++) {\n        if (polyData[k].floor === this.state.dstData.floor) {\n          dstFloorL = polyData[k].properties.floorLength;\n          dstFloorB = polyData[k].properties.floorBreadth;\n        }\n\n        if (polyData[k].floor === this.state.srcData.floor) {\n          srcFloorL = polyData[k].properties.floorLength;\n          srcFloorB = polyData[k].properties.floorBreadth;\n        }\n      }\n\n      let {\n        srcData,\n        dstData\n      } = this.state;\n      let srcNode = parseInt(srcData.coordinateY) * srcFloorL + parseInt(srcData.coordinateX);\n      let dstNode = parseInt(dstData.coordinateY) * dstFloorL + parseInt(dstData.coordinateX);\n\n      for (let k = 0; k < flrData.length; k++) {\n        if (flrData[k].floor === this.state.dstData.floor) {\n          dstVal = flrData[k].properties.node;\n        }\n\n        if (flrData[k].floor === this.state.srcData.floor) {\n          srcVal = flrData[k].properties.node;\n        }\n      } // let i = parseInt(gridY) * floorL + parseInt(gridX);\n\n\n      var srcvert = this.state.srcData.floor + \",\" + srcNode + \",\" + \"virtual\";\n      var dstvert = this.state.dstData.floor + \",\" + dstNode + \",\" + \"virtual\";\n\n      if (this.graph.hasvertex(srcvert)) {} else {\n        this.graph.addVertex(srcvert);\n        this.flrconn = [];\n        this.flrind = [];\n        console.log(this.state.srcData.floor);\n\n        for (let k = 0; k < flrData.length; k++) {\n          if (flrData[k].floor === this.state.srcData.floor && flrData[k].element.type === \"FloorConnection\") {\n            // var vert = flrData[k].properties.node\n            var vert = flrData[k].floor + \",\" + flrData[k].properties.node;\n            this.flrconn.push([flrData[k].coordinateX, flrData[k].coordinateY, vert]);\n            this.flrind.push([k, vert]);\n            console.log(this.flrconn);\n          }\n        }\n\n        this.callwhile(this.state.srcData.floor, srcNode, srcFloorL, srcFloorB, null, null, false, null);\n      }\n\n      if (this.graph.hasvertex(dstvert)) {} else {\n        this.graph.addVertex(dstvert);\n        this.flrconn = [];\n        this.flrind = [];\n\n        for (let k = 0; k < flrData.length; k++) {\n          if (flrData[k].floor === this.state.dstData.floor && flrData[k].element.type === \"FloorConnection\") {\n            var vert = flrData[k].floor + \",\" + flrData[k].properties.node;\n            this.flrind.push([k, vert]);\n            this.flrconn.push([flrData[k].coordinateX, flrData[k].coordinateY, vert]);\n          }\n        }\n\n        console.log(this.flrconn);\n        console.log(this.flrind);\n        this.callwhile(this.state.dstData.floor, dstNode, dstFloorL, dstFloorB, null, null, false, null);\n      }\n\n      this.specialcallwhile(this.state.srcData.floor, srcvert, this.state.dstData.floor, dstvert, refPoint);\n    };\n\n    this.state = {\n      venueList: [],\n      buildingList: [],\n      flrList: [],\n      selectedVenue: \"Select Venue\",\n      selectedBuilding: \"\",\n      geoJSON: [],\n      pathgeoJSON: [],\n      geoJSONPoly: [],\n      showpath: false,\n      landmark: [],\n      landMarks: [],\n      polygons: [],\n      selectNavigation: false,\n      srcFlrInstructions: [],\n      dstFlrInstructions: [],\n      backgroundPoly: {\n        // background layer for SIT building\n        type: \"FeatureCollection\",\n        features: [{\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [[[77.19015095013468, 28.545269361046977], [77.19040173667757, 28.54534708573104], [77.19028371948092, 28.54564396115854], [77.19003561514704, 28.545566236693578], [77.19015095013468, 28.545269361046977]]]\n          }\n        }]\n      },\n      floor: \"\",\n      srcName: \"Source\",\n      srcData: [],\n      dstName: \"Destination\",\n      dstData: [],\n      showServices: false,\n      venueMarker: center,\n      floorSelect: false,\n      showMarker: false,\n      showInstructions: false,\n      instructions: [],\n      venueNavigation: [],\n      globalRefPointsList: [],\n      buildingCluster: [],\n      buildingPolyCluster: [],\n      srcFloorSp: [],\n      dstFloorSp: [],\n      srcFloorPoly: [],\n      dstFloorPoly: [],\n      srcFloorLandMark: [],\n      dstFloorLandMark: [],\n      floorList: [],\n      navigationStrt: false,\n      samefloor: true,\n      currentFloor: \"\",\n      zoom: 18\n    };\n    this.shortestPathVar = []; // minpath var \n\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.landMarks = [];\n    this.polygons = [];\n    this.distLandmark = [];\n    this.venueLandmark = [];\n    this.buildingPoly = [];\n    this.srcFloorSp = [];\n    this.dstFloorSp = [];\n    this.srcFloorPoly = [];\n    this.dstFloorPoly = [];\n    this.srcFloorLandmark = [];\n    this.dstFloorLandmark = [];\n    this.srcFlrInstructions = [];\n    this.dstFlrInstructions = [];\n  }\n  /**\n   * @id  N1.1.2\n   * @author Pankaj Singh\n   * @description Initial rendering of component\n   */\n\n\n  componentDidMount() {\n    this.getVenueList();\n\n    if (window.navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success => {\n        this.setState({\n          center: {\n            lat: success.coords.latitude,\n            lng: success.coords.longitude\n          },\n          currentPos: {\n            lat: success.coords.latitude,\n            lng: success.coords.longitude\n          }\n        });\n      });\n    }\n  }\n  /**\n   * @id  N1.1.3\n   * @author Pankaj Singh\n   * @description Get venue list\n   */\n\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n  /**\n   *@id test 3  \n   *@author Jahnavi Methukumalli\n   *@description Find the safest path between source and destination\n   */\n\n\n  /** \n   *  @id test2\n   * @author Jahnavi Methukumalli\n   * @description Find simplest path between source and dest\n   * \n  */\n  callsimplest(shortestpath, srcVal, dest_x, dest_y) {}\n  /**\n   * @id test 1\n   * @author Jahnavi Methukumalli\n   * @description Find simplest path between source and destination(A*)  \n   */\n\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert, refPoint) {\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\", srcfloor, srcvert, dstfloor, dstvert, refPoint);\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    let flrData = this.state.buildingCluster.filter(r => r.buildingName === this.state.dstData.buildingName)[0].data;\n    var get_keys = this.graph.AdjList.keys();\n\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0); // this.graph.printGraph()\n\n    while (leaves.length > 0) {\n      // alert(\"stop \"+leaves.length);\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n\n      visited.set(minleave, true);\n\n      if (minleave == dstvert) {\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n        break;\n      }\n\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n      var flag = 0;\n\n      for (var jj = 0; jj < get_values.length; jj++) {\n        console.log(j);\n        var j = get_values[jj];\n        var l = j.split(\",\");\n        var neighbour = false;\n\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n\n        var dataind = 0;\n\n        for (var kk = 0; kk < this.flrind.lenght; kk++) {\n          if (this.flrind[kk][1] == j) {\n            dataind = this.flrind[kk][0];\n          }\n        }\n\n        console.log(j);\n        console.log(this.flrind[dataind]);\n        console.log(flrData[dataind].element.subType);\n\n        if (visited.get(j) == false && neighbour) {\n          console.log(j); //console.log(minleave);\n\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            // console.log(j);\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n\n    this.createcanvas(shortestpath.get(dstvert), false, refPoint);\n  }\n\n  createcanvas(list, samefloor, refPoint) {\n    if (samefloor === false) {\n      let ans = new Map();\n\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n\n      this.callimage(0, ans, cnt, clist, floorLlist, refPoint);\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist, refPoint) {\n    let floorList = [this.state.srcData.floor, this.state.dstData.floor];\n\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let me = this;\n          let get_val = ans.get(i);\n          var id = \"canvas\" + ii; // me.loadMultiFloorNonwalkable(id)\n\n          var index = me.findFloor(i, me.grids_all);\n          var m = parseInt(me.grids_all[index].properties.length);\n          var n = parseInt(me.grids_all[index].properties.breadth);\n\n          for (var j = 0; j < get_val.length - 1; j++) {\n            var dest_x = get_val[j + 1] % m;\n            var dest_y = parseInt(get_val[j + 1] / m);\n            console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\", i, get_val[j], m, n, dest_x, dest_y, true, id);\n            me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id, refPoint);\n          }\n\n          var node_count = 0;\n\n          for (var j of get_val) {\n            if (ii === count - 1) {\n              if (node_count === get_val.length - 1) {//me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n              } else {//me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                }\n            } else {\n              if (node_count === 0 && ii === 0) {//me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n              } else {//me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                }\n            }\n\n            node_count++;\n          }\n        }\n      }\n    }\n\n    console.log(\"this.srcFloorSp,this.dstFloorSp\");\n    this.setState({\n      srcFloorSp: this.srcFloorSp,\n      dstFloorSp: this.dstFloorSp,\n      pathgeoJSON: this.srcFloorSp,\n      srcFlrInstructions: this.srcFlrInstructions,\n      dstFlrInstructions: this.dstFlrInstructions,\n      showpath: true\n    });\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n\n      cnt++;\n    }\n  }\n\n  render() {\n    let srtdFlr = [];\n    special.forEach((r1, i) => {\n      this.state.floorList && this.state.floorList.forEach(r2 => {\n        if (r1 === r2) {\n          srtdFlr.push(r1);\n        }\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: !this.state.showInstructions,\n        children: /*#__PURE__*/_jsxDEV(Instructions, {\n          dstAddress: this.state.dstAddress,\n          globalTime: this.state.globalTime,\n          globalDistance: this.state.globalDistance,\n          currentLocation: this.state.currentLocation,\n          handleBuildingView: this.handleBuildingView,\n          instructionSet: this.state.instructions,\n          buildingView: this.state.buildingView,\n          sourceLocation: this.state.currentLocation,\n          dstLocation: this.state.dstAddress,\n          dstName: this.state.dstName,\n          srcName: this.state.srcName,\n          handleInstr: () => {\n            this.setState({\n              showInstructions: false\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2394,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"landing-height\",\n        hidden: this.state.showInstructions,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"src-dst fixed-top\",\n          id: \"src-bar\",\n          style: {\n            height: this.state.selectNavigation === true ? \"167px\" : \"57px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row w-100  mx-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 p-0\",\n              children: /*#__PURE__*/_jsxDEV(Typeahead, {\n                required: true,\n                placeholder: `${this.state.selectedVenue}`,\n                filterBy: [\"venueName\"],\n                labelKey: option => {\n                  return `${option.venueName.split(/(?=[A-Z])/).join(\" \")}`;\n                },\n                onChange: e => {\n                  if (e.length > 0) {\n                    this.handleVenueChange(e);\n                  }\n                },\n                disabled: false,\n                id: \"source\",\n                value: this.state.selectedVenue,\n                options: this.state.venueList,\n                name: \"list\",\n                className: \"mb-2 form-control-dashboard mt-1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2424,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mx-auto hr-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2445,\n            columnNumber: 13\n          }, this), this.state.selectNavigation === true ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100  mx-auto mt-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 p-0\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-nvgtn text-white\",\n                  onClick: () => {\n                    this.props.navContent(\"SELECT DESTINATION\", () => {});\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"float-left mt-2 mr-2\",\n                    src: \"/inclunav/assets/images/profile.svg\",\n                    alt: \"user location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2456,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typeahead, {\n                    required: true,\n                    placeholder: `Select Source`,\n                    filterBy: [\"name\"],\n                    labelKey: option => {\n                      let resp = this.sourceLabel(option);\n                      return resp;\n                    },\n                    renderMenuItemChildren: option => {\n                      return this.renderSourceMenu(option);\n                    },\n                    onChange: e => {\n                      if (e.length > 0) {\n                        this.setState({\n                          srcName: e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\n                          srcData: e[0]\n                        });\n                      }\n                    },\n                    disabled: false,\n                    id: \"source\",\n                    value: this.state.srcName,\n                    options: this.state.venueNavigation,\n                    name: \"list\",\n                    className: \"mb-2 form-control-dashboard mt-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2461,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2450,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2449,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2448,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mx-auto hr-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2491,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100 mx-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 p-0\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-nvgtn text-white\",\n                  onClick: () => {\n                    this.props.navContent(\"SELECT DESTINATION\", () => {});\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"float-left mt-2 mr-2 my-auto\",\n                    src: \"/inclunav/assets/images/navigation.svg\",\n                    alt: \"select destination\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2500,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typeahead, {\n                    required: true,\n                    placeholder: `Select Destination`,\n                    filterBy: [\"name\"],\n                    labelKey: option => {\n                      let resp = this.sourceLabel(option);\n                      return resp;\n                    },\n                    renderMenuItemChildren: option => {\n                      return this.renderSourceMenu(option);\n                    },\n                    onChange: e => {\n                      if (e.length > 0) {\n                        this.setState({\n                          dstName: e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\n                          dstData: e[0],\n                          navigationStrt: true,\n                          samefloor: e[0].floor !== this.state.srcData.floor ? false : true\n                        }, () => {\n                          // this.mapReferencePoint()\n                          // this.handleLocalGlobal();\n                          this.setNavigation();\n                        });\n                      }\n                    },\n                    disabled: false,\n                    id: \"source\",\n                    value: this.state.dstName,\n                    options: this.state.venueNavigation,\n                    name: \"list\",\n                    className: \"mb-2 form-control-dashboard mt-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2505,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2494,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2493,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2492,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2447,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"btn-group-vertical glbl-btn mr-2\",\n          role: \"group\",\n          \"aria-label\": \"First group\",\n          children: srtdFlr && srtdFlr.map((r, i) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\" // className={\"btn btn-secondary\"}                    \n              ,\n              className: this.state.currentFloor === r ? \"btn btn-secondary active active1\" : \"btn btn-secondary\",\n              onClick: () => {\n                this.setState({\n                  currentFloor: r\n                }, () => {\n                  if (this.state.srcData.floor === this.state.currentFloor) {\n                    this.setState({\n                      pathgeoJSON: this.srcFloorSp,\n                      geoJSON: this.state.srcFloorLandMark,\n                      instructions: this.state.srcFlrInstructions\n                    });\n                  } else {\n                    this.setState({\n                      pathgeoJSON: this.dstFloorSp,\n                      geoJSON: this.state.dstFloorLandMark,\n                      instructions: this.state.dstFlrInstructions\n                    }); // srcFloorSp:,\n                    // dstFloorSp:,\n                    // pathgeoJSON:this.srcFloorSp,\n                  }\n                });\n              },\n              children: [\"L\", i]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2555,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"btn-group-vertical glbl-hm-btn mr-2\",\n          role: \"group\",\n          \"aria-label\": \"First group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn btn-secondary\",\n            onClick: () => {\n              this.props.history.push(\"/navigate\");\n            },\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2600,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2593,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2588,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n          style: {\n            height: \"100vh\"\n          },\n          center: center,\n          zoom: this.state.zoom,\n          ref: m => {\n            this.leafletMap = m;\n          },\n          onZoomEnd: e => {\n            // Zoom in & out control\n            if (e.target._zoom < 21.2) {\n              //remove all layers from map\n              this.setState({\n                showpath: false\n              });\n            }\n\n            if (e.target._zoom < 20) {\n              //remove all layers from map\n              this.setState({\n                showMarker: false,\n                showpath: false\n              });\n            }\n\n            if (e.target._zoom < 20) {\n              //remove all layers from map\n              this.setState({\n                showServices: false\n              });\n            } else {} //adding non-room layers beyond 20 zoom\n\n\n            if (e.target._zoom > 19 && !this.state.showpath) {\n              this.setState({\n                showMarker: true\n              });\n            }\n\n            if (e.target._zoom > 21.2 && !this.state.showpath) {\n              this.setState({\n                showpath: true\n              });\n            }\n\n            if (e.target._zoom > 20 && !this.state.showpath) {\n              this.setState({\n                showServices: true\n              });\n            } else {}\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href='https://osm.org/copyright'>OpenStreetMap</a> contributors\",\n            url: \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            maxZoom: 25,\n            maxNativeZoom: 19\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2653,\n            columnNumber: 13\n          }, this), this.state.floorSelect ? null : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: this.state.buildingList && this.state.buildingList.map(r => {\n              return /*#__PURE__*/_jsxDEV(Marker, {\n                position: {\n                  lat: r.lat,\n                  lng: r.lng\n                },\n                onClick: this.getData.bind(this, r.buildingName),\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  position: {\n                    lat: r.lat,\n                    lng: r.lng\n                  },\n                  children: [\"Building Name:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n                    children: r.buildingName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2670,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2668,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2664,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2660,\n            columnNumber: 15\n          }, this), this.state.showMarker ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: this.state.geoJSON.features && this.state.geoJSON.features.map((position, idx) => {\n              switch (position.properties.floorElement) {\n                case \"Rooms\":\n                  return /*#__PURE__*/_jsxDEV(Marker, {\n                    position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                    children: /*#__PURE__*/_jsxDEV(Popup, {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"font-weight-bold\",\n                        children: position.properties.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2691,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        class: \"btn-group btn-block\",\n                        role: \"group\",\n                        \"aria-label\": \"Basic example\",\n                        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          onClick: e => {\n                            this.handleCall(e, position);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-phone\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2705,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2699,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          onClick: e => {\n                            this.handleInternet(e, position);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-globe\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2713,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2707,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          onClick: e => {\n                            this.handleWhatsapp(e, position);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-whatsapp\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2721,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2715,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          onClick: e => {\n                            this.handleEmail(e, position);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-envelope\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2729,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2723,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          onClick: e => {\n                            this.handleInfo(e, position);\n                          },\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-info\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2737,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2731,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          class: \"btn btn-primary\",\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            class: \"fa fa-plus-square\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2740,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2739,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2694,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2690,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2684,\n                    columnNumber: 27\n                  }, this);\n\n                case \"Services\":\n                  if (this.state.showServices) {\n                    switch (position.properties.type) {\n                      case \"drinkingWater\":\n                        return /*#__PURE__*/_jsxDEV(Marker, {\n                          position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                          icon: watericon,\n                          children: /*#__PURE__*/_jsxDEV(Popup, {\n                            children: /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: position.properties.name\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2759,\n                              columnNumber: 37\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2758,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2751,\n                          columnNumber: 33\n                        }, this);\n\n                      case \"restRoom\":\n                        switch (position.properties.washroomType) {\n                          case \"Male\":\n                            return /*#__PURE__*/_jsxDEV(Marker, {\n                              position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                              icon: male_toileticon,\n                              children: /*#__PURE__*/_jsxDEV(Popup, {\n                                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                                  children: position.properties.name\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 2775,\n                                  columnNumber: 41\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 2774,\n                                columnNumber: 39\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2767,\n                              columnNumber: 37\n                            }, this);\n\n                          case \"Female\":\n                            return /*#__PURE__*/_jsxDEV(Marker, {\n                              position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                              icon: female_toileticon,\n                              children: /*#__PURE__*/_jsxDEV(Popup, {\n                                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                                  children: position.properties.name\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 2789,\n                                  columnNumber: 41\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 2788,\n                                columnNumber: 39\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2781,\n                              columnNumber: 37\n                            }, this);\n\n                          default:\n                            return /*#__PURE__*/_jsxDEV(Marker, {\n                              position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                              children: /*#__PURE__*/_jsxDEV(Popup, {\n                                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                                  children: position.properties.name\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 2802,\n                                  columnNumber: 41\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 2801,\n                                columnNumber: 39\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 2795,\n                              columnNumber: 37\n                            }, this);\n                        }\n\n                      default:\n                        return null;\n                    }\n                  }\n\n                  break;\n\n                case \"FloorConnection\":\n                  switch (position.properties.type) {\n                    case \"stairs\":\n                      return /*#__PURE__*/_jsxDEV(Marker, {\n                        position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                        icon: stairicon,\n                        children: /*#__PURE__*/_jsxDEV(Popup, {\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: position.properties.name\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2824,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2823,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2816,\n                        columnNumber: 31\n                      }, this);\n\n                    case \"lift\":\n                      return /*#__PURE__*/_jsxDEV(Marker, {\n                        position: [position.geometry.coordinates[1], position.geometry.coordinates[0]],\n                        icon: lifticon,\n                        children: /*#__PURE__*/_jsxDEV(Popup, {\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: position.properties.name\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 2838,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 2837,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2830,\n                        columnNumber: 31\n                      }, this);\n\n                    default:\n                      return null;\n                  }\n\n                default:\n                  return null;\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2678,\n            columnNumber: 15\n          }, this) : null, this.state.samefloor && this.state.polygons && this.state.polygons.map(r => {\n            return /*#__PURE__*/_jsxDEV(GeoJSON, {\n              data: r.geoJSONPoly\n            }, hash(r.geoJSONPoly), false, {\n              fileName: _jsxFileName,\n              lineNumber: 2858,\n              columnNumber: 22\n            }, this);\n          }), !this.state.samefloor ? /*#__PURE__*/_jsxDEV(GeoJSON, {\n            data: this.state.currentFloor === this.state.srcData.floor ? this.state.srcFloorPoly : this.state.dstFloorPoly\n          }, hash(this.state.currentFloor === this.state.srcData.floor ? this.state.srcFloorPoly : this.state.dstFloorPoly), false, {\n            fileName: _jsxFileName,\n            lineNumber: 2864,\n            columnNumber: 14\n          }, this) : null, this.state.showpath && this.state.pathgeoJSON.features && this.state.pathgeoJSON.features.map((position, idx) => {\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: [position.geometry.coordinates[0], position.geometry.coordinates[1]],\n              icon: doticon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3017,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2603,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BottomBar, {\n          srcName: this.state.srcName,\n          dstName: this.state.dstName,\n          dstData: this.state.dstData,\n          handleInstr: () => {\n            this.setState({\n              showInstructions: true\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3027,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2413,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2391,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile: state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.globalNavigation,\n    globalRoutes: state.osmRoutes,\n    pickupPoint: state.pickupPoints,\n    currentTab: state.navContent,\n    globalCoords: state.refPoint\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  globalNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent,\n  refPoint\n})(GlobalView);","map":{"version":3,"sources":["/home/home/navigation/src/components/dashboard/global/GlobalView.js"],"names":["React","Link","config","connect","floorList","imgDetails","getAllBuildingElements","venueList","buildingList","getGpsLocation","globalNavigation","getUserPortfolio","osmRoutes","pickupPoints","navContent","refPoint","BottomBar","Instructions","getHaversineDistance","distance","obtaincoordinates","findInstructions","simplifyPath","Map","MapContainer","Marker","Popup","TileLayer","GeoJSON","Typeahead","L","hash","special","Graph","constructor","noOfVertices","AdjList","Adjweights","addVertex","v","set","hasvertex","has","edges","get","addEdge","w","wt","undir","push","printGraph","get_keys","keys","i","get_values","val","conc","conc2","j","center","lat","lng","female_toileticon","divIcon","className","html","iconSize","iconAnchor","popupAnchor","male_toileticon","lifticon","watericon","stairicon","source","destination","doticon","myStyle","color","weight","opacity","myStyle_background","fillColor","fillOpacity","border","width","height","GlobalView","Component","props","getVenueList","coordinates","setState","vnList","data","selectedVenue","venueName","venueMarker","getBuildingList","bldList","selectNavigation","state","map","leafletMap","leafletElement","globalRef","globalList","flyTo","LatLng","getZoom","animate","duration","forEach","element","mapReferencePoint","buildingName","dstData","refPoints","globalCoords","glbCoords","length","globalRefPointsList","r","createBackgroudLayer","arr","parseFloat","poly","type","features","properties","geometry","geoJson","style","addTo","backgroundPoly","lists","arr1","saveAllLadmark","androidNav","building","flrList","sliced","slice","splice","buildingPoly","venueLandmark","grdData","floor","grdDataPoly","k","handleLocalGlobal","distLandmark","oldArray","buildingCluster","newArray","Array","prototype","concat","apply","venueData","venueNavigation","buildingPolyCluster","redData","polyData","crd","coords","coordHashMap","red_data","poly_data","least_lat","high_lon","findLeastLat","c1","c2","lon","lengths","betweenLength","out","buildingAngle","diff","liftCorrection","local_coords","localx","localy","coordGlblLandmark","geoJSON","geoJsonLandmark","coordGlblPolygon","geoJSON_poly","geoJSONPoly","landMarks","polygons","dstName","srcData","showMarker","singleFloorNav","srcFloorPoly","srcFloorLandmark","dstFloorPoly","dstFloorLandmark","navigationStrt","sourceLabel","option","resp","name","subType","renderSourceMenu","padding","setNavigation","multiBldNav","grids_all","flrData","filter","multiFloorNav","flrMarkData","flrDataPoly","createGraph","fltrNvgnData","floors","Set","s","getData","selectedBuilding","getCompleteData","parseInt","localRef","leastLat","temp1","highLon","b","horizontal","c","a","Math","acos","PI","ground_lift","x","nth_lift","temp","lifts","coordinateX","y","coordinateY","test","l","m","n","theta","ang","dist","ver","sin","hor","cos","final","latitude","longitude","p","floorElement","temp2","floor_length","floorLength","clickedPoints","line","numbers","split","Number","global","handleCall","e","position","String","contactNo","preventDefault","alert","window","location","href","handleInternet","url","open","handleWhatsapp","handleEmail","email","handleInfo","info","startTime","endTime","mapBuildingData","handleSubmit","srcFlrMarkData","dstFlrMarkData","srcFlrDataPoly","dstFlrDataPoly","srcFloorLandMark","dstFloorLandMark","currentFloor","findpath","nodes","navigationInfo","num_vert","fc","node","graph","sel","frConn","flrmatrix","flr_dist_matrix","len","vert1","vert2","getKeys","cnt","prev","srcName","dstfloorL","dstfloorB","srcVal","dstVal","srcfloor","dstfloor","undefined","roomName","dstFlrDt","srcfloorL","srcfloorB","floorBreadth","dest_x","dest_y","callwhile","samefloor","findFloor","key","array","geomtery","findAccessPath","paths","weights","score","protrusion","epi","points","pro","flrconn","cord","includes","d","sqrt","pathscr","min","MAX_VALUE","index","findSafePath","callwhile_h","single","canvasid","closed","row","row1","row2","row3","row4","row5","shortestpath","grids","visited","minimumcost","ind1","grid_1","grid_all","src_x","src_y","leaves","q","ind","check","lenght","ch","vert","console","log","reset_var","minleave","var_i","notthere","abs","sp","mypoints","JSON","stringify","refinedpaths","callGlobal","allElements","instructions","srcFlrInstructions","dstFlrInstructions","parse","defineCoords","myarr","max_lat","MIN_SAFE_INTEGER","max_long","min_lat","min_long","mid_lat","mid_long","corner1","latLng","corner2","myBounds","latLngBounds","srcFloorSp","dstFloorSp","showpath","zoom","pathgeoJSON","handleVenueChange","floorSelect","srcFloorL","srcFloorB","dstFloorL","dstFloorB","srcNode","dstNode","srcvert","dstvert","flrind","specialcallwhile","landmark","showServices","showInstructions","shortestPathVar","num_floors","componentDidMount","navigator","geolocation","getCurrentPosition","success","currentPos","callsimplest","get_dist","flag","jj","neighbour","dataind","kk","dum","createcanvas","list","ans","clist","floorLlist","id","scale","floorL","floorB","breadth","fileName","callimage","count","ii","me","get_val","node_count","callmark","color_canvas_spl","render","srtdFlr","r1","r2","dstAddress","globalTime","globalDistance","currentLocation","handleBuildingView","buildingView","join","history","target","_zoom","bind","idx","washroomType","mapStateToProps","getImage","allNodes","getAllElem","userProfile","userPortfolio","gpsLocation","globalRoutes","pickupPoint","currentTab"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  globalNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent,\n  refPoint\n} from \"../../../store/actions/index\";\nimport BottomBar from \"./BottomBar\";\nimport Instructions from \"./Instructions\";\nimport {\n  getHaversineDistance,\n  distance,\n  obtaincoordinates,\n  findInstructions,\n  simplifyPath\n} from \"./module\";\nimport {\n  Map as MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n  GeoJSON\n} from \"react-leaflet\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport L from \"leaflet\";\nimport hash from \"object-hash\";\nimport \"../../navStyles.css\";\n/**\n * @id  N1.1.1\n * @author Anirudh Khammampati & Sai Kumar Reddy\n * @description Create graph node\n */\n\nvar special = ['base2','base1','ground','first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelvth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth'];\n\n// import {Graph} from \"./Graph\";\nclass Graph { \n  // defining vertex array and \n  // adjacent list \n  constructor(noOfVertices) \n  { \n      this.noOfVertices = noOfVertices; \n      this.AdjList = new Map(); \n      this.Adjweights = new Map();\n  } \n\n  // functions to be implemented \n\n  // addVertex(v) \n  addVertex(v) \n  { \n      // initialize the adjacent list with a \n      // null array \n      this.AdjList.set(v, []); \n      this.Adjweights.set(v,[]);\n  } \n  hasvertex(v){\n    return this.AdjList.has(v);\n  }\n  edges(v){\n    return this.AdjList.get(v);\n  }\n  addEdge(v, w, wt,undir) \n  { \n      if(undir){\n\n        // get the list for vertex v and put the \n        // vertex w denoting edge between v and w \n        this.AdjList.get(v).push(w); \n        this.Adjweights.get(v).push(wt);\n        // Since graph is undirected, \n        // add an edge from w to v also \n        this.AdjList.get(w).push(v); \n        this.Adjweights.get(w).push(wt);\n      }\n      else{\n        this.AdjList.get(v).push(w); \n        this.Adjweights.get(v).push(wt);\n      }\n  }\n\n  // Prints the vertex and adjacency list \n  printGraph() \n  { \n      // get all the vertices \n      var get_keys = this.AdjList.keys(); \n\n    \n      // iterate over the vertices \n      for (var i of get_keys)  \n  { \n          // great the corresponding adjacency list \n          // for the vertex \n          var get_values = this.AdjList.get(i);\n\n          var val = this.Adjweights.get(i); \n          var conc = \"\"; \n          var conc2 = \"\"; \n    \n          // iterate over the adjacency list \n          // concatenate the values into a string \n          for (var j of get_values) \n              conc += j + \" \"; \n          for (var j of val) \n            conc2 += j + \" \";\n          // print the vertex and its adjacency list \n      } \n  }\n} \n/**\n * @id  N1.1.2\n * @author Pankaj Singh\n * @description Global center of osm\n */\nconst center = { lat: 28.6139, lng: 77.209 };\n/**\n * @id  N1.1.3\n * @author Pankaj Singh\n * @description OSM Marker List\n */\nlet female_toileticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-female awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nlet male_toileticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-male awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nlet lifticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-street-view awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet watericon = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-glass awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\nlet stairicon = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-align-left awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nlet source = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fas fa-crosshairs awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nlet destination = L.divIcon({\n  className: \"custom-div-icon\",\n  html:\n    \"<div style='background-color:#4b85bb;' class='marker-pin'></div><i class='fa fa-map-pin awesome'>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nlet doticon = L.divIcon({\n  className: \"custom-div-icon\",\n  html: \"<div  class='marker-pin1'></div>\",\n  iconSize: [30, 42],\n  iconAnchor: [15, 42],\n  popupAnchor: [0, -30]\n});\n\nvar myStyle = {\n  //Style to display the non-walkable linestrings\n  color: \"#000000\",\n  weight: 3,\n  opacity: 0.7\n};\n/**\n * @id  N1.1.34\n * @author Pankaj Singh\n * @description Marker\n */\nvar myStyle_background = {\n  //Style to display the background tile\n  fillColor: \"#d9d0c9\",\n  fillOpacity: 1,\n  color: \"#d9d0c9\",\n  weight: 2,\n  opacity: 0.1,\n  border: \"none\",\n  width: \"200px\",\n  height: \"200px\"\n};\n\nclass GlobalView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      venueList: [],\n      buildingList: [],\n      flrList: [],\n      selectedVenue: \"Select Venue\",\n      selectedBuilding: \"\",\n      geoJSON: [],\n      pathgeoJSON: [],\n      geoJSONPoly: [],\n      showpath: false,\n      landmark: [],\n      landMarks:[],\n      polygons:[],\n      selectNavigation: false,\n      srcFlrInstructions:[],\n      dstFlrInstructions:[],\n      backgroundPoly: {\n        // background layer for SIT building\n        type: \"FeatureCollection\",\n        features: [\n          {\n            type: \"Feature\",\n            properties: {},\n            geometry: {\n              type: \"Polygon\",\n              coordinates: [\n                [\n                  [77.19015095013468, 28.545269361046977],\n                  [77.19040173667757, 28.54534708573104],\n                  [77.19028371948092, 28.54564396115854],\n                  [77.19003561514704, 28.545566236693578],\n                  [77.19015095013468, 28.545269361046977]\n                ]\n              ]\n            }\n          }\n        ]\n      },\n      floor: \"\",\n      srcName: \"Source\",\n      srcData: [],\n      dstName: \"Destination\",\n      dstData: [],\n      showServices: false,\n      venueMarker: center,\n      floorSelect: false,\n      showMarker: false,\n      showInstructions: false,\n      instructions: [],\n      venueNavigation: [],\n      globalRefPointsList:[],\n      buildingCluster:[],\n      buildingPolyCluster:[],\n      srcFloorSp:[],\n      dstFloorSp:[],\n      srcFloorPoly:[],\n      dstFloorPoly:[],\n      srcFloorLandMark:[],\n      dstFloorLandMark:[],\n      floorList:[],\n      navigationStrt:false,\n      samefloor:true,\n      currentFloor:\"\",\n      zoom: 18\n    };\n    this.shortestPathVar = [];\n    // minpath var \n    this.grids_all=[];\n    this.grids=[];\n    this.visited=[];\n    this.shortestpath =[];\n    this.minimumcost=[];\n    this.leaves=[];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors=0;\n    \n    this.landMarks = [];\n    this.polygons = [];\n    this.distLandmark = [];\n    this.venueLandmark = [];\n    this.buildingPoly = [];\n    this.srcFloorSp = [];\n    this.dstFloorSp = [];\n    this.srcFloorPoly = [];\n    this.dstFloorPoly = [];\n    this.srcFloorLandmark = [];\n    this.dstFloorLandmark = [];\n    this.srcFlrInstructions = [];\n    this.dstFlrInstructions = [];\n  }\n  /**\n   * @id  N1.1.2\n   * @author Pankaj Singh\n   * @description Initial rendering of component\n   */\n  componentDidMount() {\n    this.getVenueList();\n    if (window.navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success => {\n        this.setState({\n          center: {\n            lat: success.coords.latitude,\n            lng: success.coords.longitude\n          },\n          currentPos: {\n            lat: success.coords.latitude,\n            lng: success.coords.longitude\n          }\n        });\n      });\n    }\n  }\n  /**\n   * @id  N1.1.3\n   * @author Pankaj Singh\n   * @description Get venue list\n   */\n  getVenueList = (coordinates = null) => {\n    this.props.venueList(() => {\n      this.setState({\n        venueList: this.props.vnList.data\n      });\n    });\n  };\n  /**\n   * @id  N1.1.4\n   * @author Pankaj Singh\n   * @param venueName\n   * @description Select venue\n   */\n  selectedVenue = (venueName, coordinates = null) => {\n    this.setState(\n      {\n        selectedVenue: venueName,\n        venueMarker: { lat: coordinates[0], lng: coordinates[1] }\n      },\n      () => {\n        this.getBuildingList(venueName);\n      }\n    );\n  };\n  /**\n   * @id  N1.1.5\n   * @param venueName\n   * @author Pankaj Singh\n   * @description get building list\n   */\n  getBuildingList = (venueName, coordinates = null) => {\n    this.props.buildingList({ venueName: venueName }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data,\n          selectNavigation:true\n        },\n        () => {\n          let lat = this.state.buildingList[0].lat;\n          let lng = this.state.buildingList[0].lng;\n          const map = this.leafletMap.leafletElement;\n          let bldList = this.state.buildingList;\n          var globalRef = [];\n          this.globalList(bldList,venueName,globalRef);\n          map.flyTo(new L.LatLng(lat, lng), map.getZoom(), {\n            animate: true,\n            duration: 1\n          });\n        }\n      );\n    });\n  };\n\n    /**\n   * @id  N1.1.10\n   * @author Pankaj Singh\n   * @param bldList\n   * @param venueName\n   * @description get all landmark within venue\n   */\n  globalList = (bldList, venueName,globalRef) => {\n    bldList.forEach((element, i) => {\n      this.mapReferencePoint(element,element.buildingName,globalRef)\n    });\n  };\n\n      /**\n   * @id  N1.1.6\n   * @author Ushaswini Chintha\n   * @param floor\n   * @description Get global reference point of ground floor of a building\n   */\n  mapReferencePoint = (element,buildingName,globalRef)=>{\n    let { selectedVenue, dstData } = this.state;\n    this.props.refPoint(\n      selectedVenue,\n      buildingName,\n      \"ground\",\n      () => {\n        globalRef.push({buildingName:buildingName,refPoints:this.props.globalCoords.coordinates})\n        this.setState(\n          {\n            glbCoords: this.props.globalCoords.coordinates\n          },\n          () => {\n            if(globalRef.length === this.state.buildingList.length){\n              this.setState({\n                globalRefPointsList:globalRef\n              },()=>{\n                let refPoints = this.state.globalRefPointsList;\n                refPoints.forEach(r=>{\n                  this.createBackgroudLayer(element,r.refPoints,r)\n                })\n              })\n            }\n          }\n        );\n      }\n    );\n  }\n  /**\n   * @id  N1.1.7\n   * @author Ushaswini Chintha\n   * @description Create Backround layer of building\n   */\n  createBackgroudLayer = (element,refPoints,r)=>{\n    let arr = refPoints.map(r => {\n      return [\n        parseFloat(r.globalRef.lng),\n        parseFloat(r.globalRef.lat)\n      ];\n    });\n    var poly = {\n      // background layer for SIT building\n      type: \"FeatureCollection\",\n      features: [\n        {\n          type: \"Feature\",\n          properties: {},\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [\n              arr\n            ]\n          }\n        }\n      ]\n    };\n    const map = this.leafletMap.leafletElement;\n    L.geoJson(poly, { style: myStyle_background }).addTo(map);\n    this.setState({\n      backgroundPoly: poly\n    },()=>{\n      let lists = this.state.globalRefPointsList;\n      // lists.forEach(r=>{\n        this.props.globalNavigation(\n          { venueName: this.state.selectedVenue, buildingName: r.buildingName },\n          () => {\n            let arr = [];\n            let arr1 = [];\n            this.saveAllLadmark(arr,arr1,element,this.state.buildingList,r.refPoints,r)\n          }\n        );\n      // })\n    });\n  }\n/**\n   * @id  N1.1.11\n   * @param arr\n   * @param element\n   * @param bldList\n   * @author Pankaj Singh\n   * @description get all landmakr withing venue\n  */\n  saveAllLadmark = (arr,arr1,element,bldList,globalCoords,r)=>{\n    let data = this.props.androidNav;\n    let building = r.buildingName;\n    this.props.floorList(\n      { venueName: this.state.selectedVenue, buildingName: building },\n      () => {\n        let flrList = this.props.flrList.data;\n        let length = flrList.length;\n        let sliced = data.slice(data.length - length)\n        data.splice(\n          data.length - length,\n          length\n        );\n        this.buildingPoly.push({building:building,data:sliced})\n        this.venueLandmark.push({building:building,data:data})\n        data.forEach((element)=> {\n          element.buildingName = building;\n        });\n        let grdData = []\n         data.forEach(r=>{\n          if(r.floor === \"ground\"){\n            grdData.push(r)\n          } \n        })\n        let grdDataPoly = []\n        for(let k=0;k<sliced.length;k++){\n            if(sliced[k].floor === \"ground\"){\n              grdDataPoly.push(sliced[k])\n            } \n        }\n        this.handleLocalGlobal(grdData,grdDataPoly,building,globalCoords)\n        arr.push(data);\n        this.distLandmark.push(data)\n        if (this.distLandmark.length === bldList.length) {\n          var oldArray = this.distLandmark;\n          let buildingCluster = oldArray.map(r=>{\n            return {buildingName:r[0].buildingName,data:r}\n          })\n           var newArray = Array.prototype.concat.apply([], oldArray);\n           this.setState({\n            venueData:arr1,\n            venueNavigation: newArray,\n            buildingCluster:buildingCluster,\n            buildingPolyCluster:this.buildingPoly\n            // landMarks:landMarks,\n            // polygons:polygons\n            // redData: red_data,\n            // polyData: poly_data\n          });\n        }\n      }\n    );\n  }\n /**\n   * @id  N1.1.14\n   * @author Ushaswini Chintha\n   * @description convert local floor element and non walkables coordinates to global coordinates\n   */\n  handleLocalGlobal = (redData,polyData,buildingName,globalCoords,floor =null) => {\n    let crd = globalCoords;\n    var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\n    this.coordHashMap(crd,coords)\n    // let { redData, polyData } = this.state;\n    let red_data = redData;\n    let poly_data = polyData;\n    //finding the point with lowest latitude and highest longitude\n    var least_lat = 0;\n    var high_lon = 0;\n    //finding the point with lowest latitude and highest longitude\n    least_lat = this.findLeastLat(coords,least_lat)\n    //evaluating high_lon\n    var c1 = least_lat === 3 ? 0 : least_lat + 1;\n    var c2 = least_lat === 0 ? 3 : least_lat - 1;\n    var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2;\n    ///lengths between given 4 global co-ordinates\n    var lengths = [];\n    this.betweenLength(coords,lengths)  \n    // building angle with equator or true horizontal\n   var out =  this.buildingAngle(coords,least_lat,high_lon)\n    // Vertical alignment or lift correction\n    var diff = []; //array to store offset of each floor\n    this.liftCorrection(red_data,diff)\n    // loop to calculate all the coordinates of local points\n    var local_coords = { localx: 0, localy: 0 };\n    this.coordGlblLandmark(red_data,diff,local_coords,coords,least_lat,high_lon,out)\n    //converting to geoJSON format\n    let geoJSON = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    this.geoJsonLandmark(red_data,geoJSON) \n    ///// nonWalkableGrids Calculations\n    var local_coords = { localx: 0, localy: 0 };\n    this.coordGlblPolygon(poly_data,local_coords,diff,coords,least_lat,high_lon,out)\n    //converting to geoJSON format\n    let geoJSON_poly = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    this.geoJSONPoly(poly_data,geoJSON_poly) \n    this.landMarks.push({buildingName:buildingName,geoJSON:geoJSON})\n    this.polygons.push({buildingName:buildingName,geoJSONPoly: geoJSON_poly})\n    if(this.state.dstName !== \"Destination\" && (this.state.dstData.floor === this.state.srcData.floor)){\n      this.setState({\n        landMarks:this.landMarks,\n        polygons:this.polygons,\n        showMarker:true,\n        geoJSON:this.landMarks\n      },()=>{\n        this.singleFloorNav(globalCoords)\n      })\n    }else if(this.state.dstName !== \"Destination\" && (this.state.dstData.floor !== this.state.srcData.floor)){\n      if(floor === this.state.srcData.floor){\n        this.srcFloorPoly = geoJSON_poly\n        this.srcFloorLandmark = geoJSON\n      }else{\n        this.dstFloorPoly = geoJSON_poly\n        this.dstFloorLandmark = geoJSON\n      }\n    }\n    if(!this.state.navigationStrt && this.landMarks.length === this.state.buildingList.length){\n      this.setState({\n        landMarks:this.landMarks,\n        polygons:this.polygons\n      })\n    }\n    // this.setState({\n    //   // geoJSON: geoJSON,\n    //   // geoJSONPoly: geoJSON_poly,\n    \n    //   currentPos: {\n    //     lat: geoJSON.features[0].properties.latitude,\n    //     lng: geoJSON.features[0].properties.longitude\n    //   }\n    // },()=>{\n    //   // this.singleFloorNav()\n    //   // this.callGlobal(shortestpath)\n    // });\n  };\n  /**\n   * @id  N1.1.6\n   * @param option\n   * @author Pankaj Singh\n   * @description option from venue details\n   */\n  sourceLabel = option => {\n    let resp = \"\";\n    if (option.element.type === \"Rooms\") {\n      resp = `${option.name}(${option.floor},${option.buildingName})`;\n    } else if (option.element.type === \"FloorConnection\") {\n      resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\n    } else if (option.element.type === \"Services\") {\n      if (option.element.subType === \"beacons\") {\n        resp = ``;\n      } else {\n        resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\n      }\n    } else {\n      resp = \"\";\n    }\n    return resp;\n  };\n  /**\n   * @id  N1.1.7\n   * @param option\n   * @author Pankaj Singh\n   * @description UI for menu of typeahead\n   */\n  renderSourceMenu = option => {\n    let resp = \"\";\n      if (option.element.type === \"Rooms\") {\n        resp = `${option.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"FloorConnection\") {\n        resp = `${option.properties.name}(${option.floor},${option.buildingName})`;\n      } else if (option.element.type === \"Services\") {\n        if (option.element.subType === \"beacons\") {\n          resp = ``;\n        } else {\n          resp = `${option.element.subType}(${option.floor},${option.buildingName})`;\n        }\n      } else {\n        resp = \"\";\n      }\n    if (resp) {\n      return (\n        <div className=\"mapped-data m-0 \" style={{ padding: \"0\" }}>\n          <div className=\"row w-100\">\n            <div className=\"col-2\">\n              <div>\n                <img\n                  src=\"/inclunav/assets/images/destination2.svg\"\n                  alt=\"destination\"\n                />\n              </div>\n            </div>\n            <div className=\"col-10\">\n              <div className=\"row\">\n                <div className=\"col-12\">{resp}</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12 text-capitalize\"></div>\n              </div>\n            </div>\n          </div>\n          <div></div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  };\n    /**\n   * @id  N1.1.8\n   * @author Pankaj Singh\n   * @description Set navigation on input field\n   */\n  setNavigation = () => {\n    let {srcData,dstData,selectedVenue} = this.state;\n      if(srcData.buildingName !== dstData.buildingName){\n        this.multiBldNav()\n      }else{\n        this.grids_all=[];\n        // this.createGraph()\n        let building = this.state.dstData.buildingName;\n        let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\n        let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\n        let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;\n\n      if(srcData.floor !== dstData.floor){\n        this.multiFloorNav()\n      }else{        \n        let flrMarkData = []\n        flrData.forEach(r=>{\n          if(r.floor === this.state.dstData.floor){\n            flrMarkData.push(r)\n          } \n        })\n        let flrDataPoly = []\n        for(let k=0;k<polyData.length;k++){\n            if(polyData[k].floor === this.state.dstData.floor){\n              flrDataPoly.push(polyData[k])\n            } \n        }\n        this.landMarks = [];\n        this.polygons = []\n        this.handleLocalGlobal(flrMarkData,flrDataPoly,building,refPoint)\n        // this.props.refPoint(\n          // selectedVenue,\n          // this.state.dstData.buildingName,\n          // \"ground\",\n          // () => {\n            // this.props.globalNavigation(\n            //   { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\n            //   () => {\n            //     this.fltrNvgnData(this.state.dstData.floor)\n            //   }\n            // );\n        //   }\n        // );\n      }\n    }\n  };\n  /**\n   * @id  N1.1.9\n   * @author Pankaj Singh\n   * @description Building to building Navigation\n   */\n  multiBldNav = () => {\n    \n  };\n    /**\n   * @id  N1.1.10\n   * @author Pankaj Singh\n   * @description floor to floor navigation\n   */\n  multiFloorNav = () => {\n    this.props.getAllBuildingElements(\n      {\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.dstData.buildingName\n      },\n      () => {\n    this.createGraph()\n      })\n  };\n    /**\n   * @id  N1.1.11\n   * @author Ushaswini Chintha\n   * @param floor\n   * @description Filter out landmark and nonwalkable from  building data\n   */\n  fltrNvgnData = (floor)=>{\n    let data = this.props.androidNav;\n    const floors = [...new Set(data.map(s => s.floor))];\n    //polygon data or nonwalkables of all floors\n    var poly_data = data\n      .slice(data.length - floors.length, data.length)\n      .filter(r => {\n        return r.floor === floor;\n      });\n    //reduced data without non walkables\n    var red_data = data.slice(0, data.length - floors.length).filter(r => {\n      return r.floor === floor;\n    });\n    this.setState(\n      {\n        floor: floors[0],\n        floors: floors,\n        redData: red_data,\n        polyData: poly_data\n      },\n      () => {\n        this.handleLocalGlobal();\n        // this.mapReferencePoint()\n        // this.singleFloorNav()\n    }\n    );\n  }\n\n\n \n  /**\n   * @id  N1.1.6\n   * @author Pankaj Singh\n   * @description get floor list\n   */\n  getData = (building) => {\n    let data = { venueName: this.state.selectedVenue, buildingName: building };\n    this.props.floorList(data, () => {\n      let flrList = this.props.flrList.data;\n      this.setState({\n        flrList: flrList,\n        selectedBuilding: building\n      });\n    });\n  };\n\n  /**\n   * @id  N1.1.12\n   * @author Pankaj Singh\n   * @description get get complete building data thart\n   */\n  getCompleteData = floor => {\n    let { selectedVenue, selectedBuilding } = this.state;\n    this.props.globalNavigation(\n      { venueName: selectedVenue, buildingName: selectedBuilding },\n      () => {\n        this.fltrNvgnData(floor)\n      }\n    );\n  };\n\n\n\n  /**\n   * @id  N1.1.17\n   * @author Ushaswini Chintha\n   * @description Create Coordinate hasmap\n   */\n  coordHashMap = (crd,coords)=>{\n    coords[0] = {\n      lat: parseFloat(crd[0].globalRef.lat),\n      lon: parseFloat(crd[0].globalRef.lng),\n      localx: parseInt(crd[0].localRef.lat),\n      localy: parseInt(crd[0].localRef.lng)\n    };\n    coords[1] = {\n      lat: parseFloat(crd[3].globalRef.lat),\n      lon: parseFloat(crd[3].globalRef.lng),\n      localx: parseInt(crd[3].localRef.lng),\n      localy: parseInt(crd[3].localRef.lat)\n    };\n    coords[2] = {\n      lat: parseFloat(crd[2].globalRef.lat),\n      lon: parseFloat(crd[2].globalRef.lng),\n      localx: parseInt(crd[2].localRef.lng),\n      localy: parseInt(crd[2].localRef.lat)\n    };\n    coords[3] = {\n      lat: parseFloat(crd[1].globalRef.lat),\n      lon: parseFloat(crd[1].globalRef.lng),\n      localx: parseInt(crd[1].localRef.lng),\n      localy: parseInt(crd[1].localRef.lat)\n    };\n  }\n    /**\n   * @id  N1.1.18\n   * @author Ushaswini Chintha\n   * @description Create Coordinate hasmap\n   */\n  findLeastLat = (coords,leastLat)=>{\n    for (let i = 0; i < coords.length; i++) {\n      if (coords[i].lat == coords[leastLat].lat) {\n        //handling two points with equal lat\n        if (coords[i].lon > coords[leastLat].lon) {\n          leastLat = i;\n        }\n      } else if (coords[i].lat < coords[leastLat].lat) {\n        leastLat = i;\n      }\n    }\n    return leastLat\n  }\n  /**\n   * @id  N1.1.19\n   * @author Ushaswini Chintha\n   * @description Create Coordinate hasmap\n   */\n  betweenLength = (coords,lengths)=>{\n    for (let i = 0; i < coords.length; i++) {\n      var temp1;\n      if (i == coords.length - 1) {\n        temp1 = getHaversineDistance(coords[i], coords[0]);\n      } else {\n        temp1 = getHaversineDistance(coords[i], coords[i + 1]);\n      }\n      lengths.push(temp1);\n    }\n  }\n    /**\n   * @id  N1.1.20\n   * @author Ushaswini Chintha\n   * @description buildingAngle\n   */\n  buildingAngle = (coords,leastLat,highLon)=>{\n    let b = getHaversineDistance(coords[leastLat], coords[highLon]);\n    const horizontal = obtaincoordinates(coords[leastLat], 0, b);\n    let c = getHaversineDistance(coords[leastLat], horizontal);\n    let a = getHaversineDistance(coords[highLon], horizontal);\n    let out =\n      (Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180) / Math.PI;\n      return out\n  }\n/**\n   * @id  N1.1.22\n   * @author Ushaswini Chintha\n   * @description lift correction\n   */\n  liftCorrection = (red_data,diff)=>{\n    var ground_lift = red_data.filter(x => {\n      return x.element.subType === \"lift\" && x.floor === \"ground\";\n    });\n    if (ground_lift.length != 0) {\n      var nth_lift = 0; //loop to find which lift is across more floors\n      for (let i = 0; i < ground_lift.length; i++) {\n        var temp = red_data.filter(x => {\n          return (\n            x.element.subType === \"lift\" &&\n            x.properties.name === ground_lift[i].properties.name\n          );\n        });\n        if (\n          temp.length >=\n          red_data.filter(x => {\n            return (\n              x.element.subType === \"lift\" &&\n              x.properties.name === ground_lift[nth_lift].properties.name\n            );\n          }).length\n        ) {\n          nth_lift = i;\n        }\n      }\n      var lifts = red_data.filter(x => {\n        return (\n          x.element.subType === \"lift\" &&\n          x.properties.name === ground_lift[nth_lift].properties.name\n        );\n      });\n      for (let i = 0; i < lifts.length; i++) {\n        var temp = {};\n        temp.x = lifts[i].coordinateX - ground_lift[nth_lift].coordinateX;\n        temp.y = lifts[i].coordinateY - ground_lift[nth_lift].coordinateY;\n        temp.floor = lifts[i].floor;\n        diff.push(temp);\n      }\n    }\n  }\n  /**\n   * @id  N1.1.23\n   * @author Ushaswini Chintha\n   * @description lift correction\n   */\n  coordGlblLandmark = (red_data,diff,local_coords,coords,least_lat,high_lon,out)=>{\n    for (let i = 0; i < red_data.length; i++) {\n      if (diff.length > 1) {\n        //vertical correction across floors\n        var test = diff.filter(x => {\n          return x.floor === red_data[i].floor;\n        });\n        local_coords.localx = red_data[i].coordinateX - test[0].x;\n        local_coords.localy = red_data[i].coordinateY - test[0].y;\n      } else {\n        local_coords.localx = red_data[i].coordinateX;\n        local_coords.localy = red_data[i].coordinateY;\n      }\n      var l = distance(coords[least_lat], coords[high_lon]);\n      var m = distance(local_coords, coords[high_lon]);\n      var n = distance(coords[least_lat], local_coords);\n      var theta =\n        (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\n      if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n        theta = 0;\n      } //staright line case\n      let ang = theta + out;\n      var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n      var ver = dist * Math.sin((ang * Math.PI) / 180.0);\n      var hor = dist * Math.cos((ang * Math.PI) / 180.0);\n      var final = obtaincoordinates(coords[least_lat], ver, hor);\n      red_data[i].properties.latitude = final.lat;\n      red_data[i].properties.longitude = final.lon;\n    }\n  }\n  /**\n   * @id  N1.1.24\n   * @author Ushaswini Chintha\n   * @description conver geojson landmark\n   */\n  geoJsonLandmark = (red_data,geoJSON)=>{\n    for (let i = 0; i < red_data.length; i++) {\n      var p = red_data[i];\n      if (p.name === \"\") {\n        //to deal with empty name field\n        p.name = p.properties.name;\n      }\n      geoJSON.features.push({\n        type: \"Feature\",\n        properties: {\n          name: p.name,\n          floor: p.floor,\n          type: p.element.subType,\n          floorElement: p.element.type,\n          localx: p.coordinateX,\n          localy: p.coordinateY,\n          ...p.properties\n        },\n        geometry: {\n          type: \"Point\",\n          coordinates: [p.properties.longitude, p.properties.latitude]\n        }\n      });\n    }\n  }\n\n  /**\n   * @id  N1.1.25\n   * @author Ushaswini Chintha\n   * @description generate global coordinates for non walkable polygon\n   */\n  coordGlblPolygon = (poly_data,local_coords,diff,coords,least_lat,high_lon,out)=>{\n    for (let k = 0; k < poly_data.length; k++) {\n      var temp2 = [];\n      var floor_length = poly_data[k].properties.floorLength;\n      for (let j = 0; j < poly_data[k].properties.clickedPoints.length; j++) {\n        var line = poly_data[k].properties.clickedPoints[j];\n        var numbers = line.split(\",\").map(Number);\n        var temp1 = [];\n        for (let i = 0; i < numbers.length; i++) {\n          local_coords.localx = numbers[i] % floor_length;\n          local_coords.localy = numbers[i] / floor_length;\n\n          //for vertical allignment across floors\n          if (diff.length > 1) {\n            var test = diff.filter(x => {\n              return x.floor == poly_data[k].floor;\n            });\n            local_coords.localx = local_coords.localx - test[0].x;\n            local_coords.localy = local_coords.localy - test[0].y;\n          }\n          var l = distance(coords[least_lat], coords[high_lon]);\n          var m = distance(local_coords, coords[high_lon]);\n          var n = distance(coords[least_lat], local_coords);\n          var theta =\n            (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\n          if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n            theta = 0;\n          } //staright line case\n          let ang = theta + out;\n          var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n          var ver = dist * Math.sin((ang * Math.PI) / 180.0);\n          var hor = dist * Math.cos((ang * Math.PI) / 180.0);\n          var final = obtaincoordinates(coords[least_lat], ver, hor);\n          var temp = [];\n          temp.push(final.lon, final.lat);\n          temp1.push(temp);\n        }\n        temp2.push(temp1);\n      }\n      poly_data[k][\"global\"] = temp2;\n    }\n  }\n  /**\n   * @id  N1.1.26\n   * @author Ushaswini Chintha\n   * @description geojson for polygon\n   */\n  geoJSONPoly = (poly_data,geoJSON_poly)=>{\n    for (let j = 0; j < poly_data.length; j++) {\n      for (let i = 0; i < poly_data[j].global.length; i++) {\n        geoJSON_poly.features.push({\n          type: \"Feature\",\n          properties: {\n            floor: poly_data[j].floor\n          },\n          geometry: {\n            type: \"LineString\",\n            coordinates: poly_data[j].global[i]\n          }\n        });\n      }\n    }\n  }\n  /**\n   * @id  N1.1.11\n   * @author Ushaswini Chintha\n   * @description Call Handling\n   */\n  handleCall = (e, position) => {\n    if (String(position.properties.contactNo) === \"null\") {\n      /*to handle null values*/\n      e.preventDefault();\n      alert(` No contact number associated`);\n    } else {\n      window.location.href = \"tel:\" + position.properties.contactNo;\n    }\n  };\n  /**\n   * @id  N1.1.12\n   * @author Ushaswini Chintha\n   * @description Internet Browsing\n   */\n  handleInternet = (e, position) => {\n    if (String(position.properties.url) === \"null\") {\n      /*to handle null values*/\n      e.preventDefault();\n      alert(` No website associated`);\n    } else {\n      window.open(position.properties.url, \"_blank\" /*Open in a new window.*/);\n    }\n  };\n  /**\n   * @id  N1.1.13\n   * @author Ushaswini Chintha\n   * @description Whatsapp Messaging\n   */\n  handleWhatsapp = (e, position) => {\n    if (String(position.properties.contactNo) == \"null\") {\n      /*to handle null values*/\n      e.preventDefault();\n      alert(` No whatsapp number associated`);\n    } else {\n      window.open(\n        \"https://api.whatsapp.com/send?phone=\" + position.properties.contactNo,\n        \"_blank\" /*Open in a new window.*/\n      );\n    }\n  };\n  /**\n   * @id  N1.1.14\n   * @author Ushaswini Chintha\n   * @description Send Mail\n   */\n  handleEmail = (e, position) => {\n    if (String(position.properties.email) == \"null\") {\n      /*to handle null values*/\n      e.preventDefault();\n      alert(` No Email associated`);\n    } else {\n      window.location.href = `mailto: ${position.properties.email}`;\n    }\n  };\n  /**\n   * @id  N1.1.15\n   * @author Ushaswini Chintha\n   * @description Floor Element Info Details\n   */\n  handleInfo = (e, position) => {\n    const info =\n      \"\\n\" +\n      \"Name :  \" +\n      position.properties.name +\n      \"\\n\" +\n      \"Floor num. :  \" +\n      position.properties.floor +\n      \"\\n\" +\n      \"Contact num. :  \" +\n      position.properties.contactNo +\n      \"\\n\" +\n      \"Timings :  \" +\n      position.properties.startTime +\n      \" - \" +\n      position.properties.endTime;\n    e.preventDefault();\n    alert(` ${info}`);\n  };\n\n\n  singleFloorNav = (globalCoords)=>{\n\t\n   this.props.getAllBuildingElements(\n      {\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.dstData.buildingName\n      },\n      () => {\n        \n        // this.setState(\n        //   {\n        //     list: lists\n        //   },\n        //   () => {\n          this.mapBuildingData()\n            let data = { venueName: this.state.selectedVenue, buildingName: this.state.dstData.buildingName };\n            this.props.floorList(data, () => {\n              let flrList = this.props.flrList.data;\n\t\t\n              this.setState({\n                flrList:flrList\n              },()=>{\n\t\t\n                this.handleSubmit(globalCoords);\n\n              })\n            });\n        //   }\n        // );\n      }\n    );\n  }\n\n  createGraph =  ()=>{\n    let building = this.state.dstData.buildingName;\n    let flrList = []\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\n    let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\n    let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;\n    polyData.forEach((r)=>{\n      flrList.push(r.floor)\n    })  \n    let srcFlrMarkData = []\n    let dstFlrMarkData = []\n    flrData.forEach(r=>{\n      if(r.floor === this.state.srcData.floor){\n        srcFlrMarkData.push(r)\n      }\n      if(r.floor === this.state.dstData.floor){\n        dstFlrMarkData.push(r)\n      } \n    })\n    let srcFlrDataPoly = []\n    let dstFlrDataPoly = []\n    for(let k=0;k<polyData.length;k++){\n        if(polyData[k].floor === this.state.srcData.floor){\n          srcFlrDataPoly.push(polyData[k])\n        }\n        if(polyData[k].floor === this.state.dstData.floor){\n          dstFlrDataPoly.push(polyData[k])\n        } \n    }\n    this.handleLocalGlobal(srcFlrMarkData,srcFlrDataPoly,building,refPoint,this.state.srcData.floor)\n    this.handleLocalGlobal(dstFlrMarkData,dstFlrDataPoly,building,refPoint,this.state.dstData.floor)\n    this.mapBuildingData()\n        this.setState({\n          floorList:flrList,\n          srcFloorPoly:this.srcFloorPoly,\n          geoJSONPoly:this.srcFloorPoly,\n          dstFloorPoly:this.dstFloorPoly,\n          srcFloorLandMark:this.srcFloorLandmark,\n          geoJSON:this.srcFloorLandmark,\n          dstFloorLandMark:this.dstFloorLandmark,\n          currentFloor:this.state.srcData.floor\n        },()=>{\n          this.findpath(refPoint)\n        });\n  }\n\n\n  mapBuildingData = ()=>{\n    let nodes = this.props.navigationInfo;\n    this.grids_all = [];\n    let lists = [];\n    let num_vert = 0;\n    let fc = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].properties.floorElement === \"FloorConnection\") {\n        num_vert++;\n        var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n        var val =\n          nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n        if (fc.has(v) === false) {\n          fc.set(v, [val]);\n        } else {\n          fc.get(v).push(val);\n        }\n      }\n    }\n    this.graph = new Graph(num_vert + 2);\n    for (let i = 0; i < nodes.length; i++) {\n      var sel = nodes[i].properties;\n      lists.push(sel);\n      if (nodes[i].properties.floorElement === \"FloorConnection\") {\n        var val =\n          nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n        this.graph.addVertex(val);\n      }\n      if (nodes[i].properties.floorElement === \"Floor\") {\n        if (nodes[i].properties.length == 8) {\n          var v = nodes[i].properties.frConn[0].split(\",\");\n          var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n          var len = v.length / 2;\n          if (v.length % 2 === 0) {\n            for (var j = 0; j < v.length; j = j + 2) {\n              var val =\n                parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                parseInt(v[j]);\n              var vert1 = nodes[i].properties.floor + \",\" + val;\n              for (var k = j + 2; k < v.length; k = k + 2) {\n                val =\n                  parseInt(nodes[i].properties.length) *\n                    parseInt(v[k + 1]) +\n                  parseInt(v[k]);\n                var vert2 = nodes[i].properties.floor + \",\" + val;\n                this.graph.addEdge(\n                  vert1,\n                  vert2,\n                  flrmatrix[len * (j / 2) + k / 2],\n                  true\n                );\n              }\n            }\n          } else {\n          }\n        }\n        this.grids_all.push(nodes[i]);\n      }\n    }\n    let getKeys = fc.keys();\n    for (let i of getKeys) {\n      var get_values = fc.get(i);\n      var cnt = 0;\n      var prev = null;\n      for (var j of get_values) {\n        if (cnt > 0) {\n          this.graph.addEdge(prev, j, 0, true);\n          prev = j;\n        }\n        if (cnt === 0) {\n          prev = j;\n        }\n        cnt++;\n      }\n    }\n  }\n\n  handleSubmit = (globalCoords) => {\n    let { srcData,srcName, dstData,dstName, dstfloorL, dstfloorB } = this.state;\n    let srcVal = \"\";\n    let dstVal = \"\";\n    let srcfloor = \"\";\n    let dstfloor = \"\";\n    for (let k = 0; k < this.props.navigationInfo.length; k++) {\n      if (\n        this.props.navigationInfo[k].properties.floorElement !== undefined &&\n        this.props.navigationInfo[k].properties.floorElement === \"Rooms\"\n      ) {\n        if (srcData.name === this.props.navigationInfo[k].properties.roomName) {\n          srcVal = this.props.navigationInfo[k].properties.node;\n          srcfloor = this.props.navigationInfo[k].properties.floor;\n          dstfloor = this.props.navigationInfo[k].properties.floor;\n        }\n        if (dstData.name === this.props.navigationInfo[k].properties.roomName) {\n          dstVal = this.props.navigationInfo[k].properties.node;\n        }\n      }\n    }\n    let flrList = this.state.buildingPolyCluster.filter((r, i) => {\n      return r.building === this.state.dstData.buildingName;\n    })[0].data;\n        \n    let dstFlrDt = flrList.filter((r, i) => {\n      return r.floor === this.state.dstData.floor;\n    });\n    let srcfloorL = dstFlrDt[0].properties.floorLength;\n    let srcfloorB = dstFlrDt[0].properties.floorBreadth;\n    if (srcVal != null && dstVal != null) {\n      let dest_x = this.state.dstData.coordinateX;\n      let dest_y = this.state.dstData.coordinateY;\n     \n      if (srcfloor === dstfloor) {\n        this.callwhile(\n          srcfloor,\n          srcVal,\n          srcfloorL,\n          srcfloorB,\n          dest_x,\n          dest_y,\n          true,\n          \"myCanvassrc\",\n          globalCoords\n        );\n        this.setState({\n          samefloor: true\n        });\n      } else {\n        // this.setState({\n        //   samefloor: false,\n        //   buildingView: true\n        // });\n        // this.findpath();\n      }\n    } else {\n    }\n  };\n  /**\n   * @id  N1.1.17\n   * @author Pankaj Singh\n   * @description Find index of floor from floor list array\n   */\n  findFloor = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].type) {\n          if (array[i].geomtery.type === \"Polygon\") {\n            if (array[i].properties.floor === key) {\n              return i;\n            }\n          }\n        }\n        if (array[i].floor === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n  /**\n   *@id test 3  \n   *@author Jahnavi Methukumalli\n   *@description Find the safest path between source and destination\n   */\n\n   findAccessPath = (paths, srcfloor) => {\n\t\n\tvar weights = [1,1,1,1,1,1];\n\tvar score = [];\n\tvar protrusion=[];\n\tvar epi = 0;\n\tfor(let i=0; i<paths.length; i++){\n\t\tvar points = paths[i];\n\t\tvar pro = [0,0,0,0,0,0];\n\t\t//stairs\n\t\tfor(let j=0;j<parseInt(this.flrconn.length);j++){\n\t\t\tvar cord = [parseInt(this.flrconn[j][0]),parseInt(this.flrconn[j][1])];\n\t\t\tif(points.includes(cord)){\n\t\t\t\tpro[0] = pro[0]+1;\t\n\t\t\t}\t\t\t\n\t\t\n\t\t}\n\t\t//turn\n\t\tfor(let j=1;j<points.length-1;j++){\n\t\t\tvar a = points[j-1][0] - points[j][0];\n\t\t\tvar b = points[j][1] - points[j+1][1];\n\t\t\tvar c = points[j-1][1] - points[j][1];\n\t\t\tvar d = points[j][0] - points[j+1][0];\n\n\t\t\tif(a*b != c*d){\n\t\t\t\tpro[1] = pro[1]+1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//protrusion\n\t\tfor (let j=0;j<protrusion.length;j++){\n\t\t\tfor (let k=0;j<points.length;k++){\n\t\t\t\tvar dist = Math.sqrt((points[k][0]-protrusion[j][0])*(points[k][0]-protrusion[j][0]) +\n\t\t\t\t\t(points[k][1]-protrusion[j][1])*(points[k][1]-protrusion[j][1]));\n\t\t\t\tif(dist<epi){\n\t\t\t\t\tpro[2] = pro[2]+1;\n\t\t\t\t}\t\t\t\t\n\n\t\t\t}\n\n\t\t}\t\t\n\t\t\t\n\t\tvar pathscr = 0;\n\t\tfor(let j=0;j<6;j++){\n\t\t\tpathscr = pathscr + (weights[j]*pro[j]);\n\t\t}\n\t\tscore.push(pathscr);\n\t}\n\tvar min = Number.MAX_VALUE();\n\tvar index = -1;\n\tfor(let i=0;i<score.length;i++){\n\t\tif(score[i]<min){\n\t\t\tmin = score[i];\n\t\t\tindex = i;\n\t\t}\n\t\n\t}\n\t \n\treturn paths[index];\n   }\n\t\n   \n    \n  /**\n   *@id test 2  \n   *@author Jahnavi Methukumalli\n   *@description Find the safest path between source and destination\n   */\n\n   findSafePath = (paths, srcfloor) => {\n\t\n\tvar weights = [1,1,1,1,1,1];\n\tvar score = [];\n\tfor(let i=0; i<paths.length; i++){\n\t\tvar points = paths[i];\n\t\tvar props = [0,0,0,0,0,0];\n\t\tvar protrusion = [];\n\t\tvar epi=0;\n\t\t//stairs\n\t\tfor(let j=0;j<parseInt(this.flrconn.length);j++){\n\t\t\tvar cord = [parseInt(this.flrconn[j][0]),parseInt(this.flrconn[j][1])];\n\t\t\tif(points.includes(cord)){\n\t\t\t\tprops[0] = props[0]+1;\t\n\t\t\t}\t\t\t\n\t\t\n\t\t}\n\t\t//turn\n\t\tfor(let j=1;j<points.length-1;j++){\n\t\t\tvar a = points[j-1][0] - points[j][0];\n\t\t\tvar b = points[j][1] - points[j+1][1];\n\t\t\tvar c = points[j-1][1] - points[j][1];\n\t\t\tvar d = points[j][0] - points[j+1][0];\n\n\t\t\tif(a*b != c*d){\n\t\t\t\tprops[1] = props[1]+1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//protrusion\n\t\tfor (let j=0;j<protrusion.length;j++){\n\t\t\tfor (let k=0;j<points.length;k++){\n\t\t\t\tvar dist = Math.sqrt((points[k][0]-protrusion[j][0])*(points[k][0]-protrusion[j][0]) +\n\t\t\t\t\t(points[k][1]-protrusion[j][1])*(points[k][1]-protrusion[j][1]));\n\t\t\t\tif(dist<epi){\n\t\t\t\t\tprops[2] = props[2]+1;\n\t\t\t\t}\t\t\t\t\n\n\t\t\t}\n\n\t\t}\t\t\t\n\t\t\t\n\t\tvar pathscr = 0;\n\t\tfor(let j=0;j<6;j++){\n\t\t\tpathscr = pathscr + (weights[j]*props[j]);\n\t\t}\n\t\tscore[i] = pathscr;\n\t}\n\tvar min = Number.MAX_VALUE();\n\tvar index = -1;\n\tfor(let i=0;i<score.length;i++){\n\t\tif(score[i]<min){\n\t\t\tmin = score[i];\n\t\t\tindex = i;\n\t\t}\n\t\n\t}\n\t \n\treturn paths[index];\n\t\n   }\n\n   /** \n    *  @id test2\n    * @author Jahnavi Methukumalli\n    * @description Find simplest path between source and dest\n    * \n   */\n    callsimplest(shortestpath, srcVal, dest_x , dest_y,  ){\n      \n\n\n    }\n  /**\n   * @id test 1\n   * @author Jahnavi Methukumalli\n   * @description Find simplest path between source and destination(A*)  \n   */\n\n  callwhile_h = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid, globalCoords = null) => {\n\n   var closed = [];\n   \n   for (let i=0 ; i<m ; i++){\n      var row = [],\n         row1 = [],\n         row2 = [],\n         row3 = [],\n         row4 = [];\n      for (let j=0 ; j<n ; j++){\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n   }\n\n   var ind1 = this.findFloor(srcfloor, this.grids_all);\n   if(ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null){\n      for(let i=0 ; i < this.grids_all[ind1].properties.grid_1.length; i++){\n        var nodes = this.grid_all[ind1].properties.grid_1[i].split(\",\");\n        for(let j=0 ; j<nodes.length ; j++){\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val/m);\n\n          this.grids[x][y] = 0;\n        }\n      }\n   }\n\n   var src_x = srcVal % m ;\n   var src_y = parseInt(srcVal/m);\n   this.leaves.push([src_x,src_y]);\n   this.shortestpath[src_x][src_y].push([src_x,src_y]);\n   this.minimumcost[src_x][src_y] = 0;\n   while (this.leaves.length > 0){\n      var min = Number.MAX_VALUE;\n      var q;\n      var ind;\n      for (let i = 0; i<this.leaves.length;i++){\n        if(min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]){\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          q = this.leaves[i];\n\n        }\n      }\n      this.visited[q[0]][q[1]] = 1;\n      if(single == true){\n          if(q[0] == dest_x && q[1] == dest_y){\n              break;\n          }\n      }else {\n          var check = true;\n          for (let i=0 ; i< parseInt(this.flrconn.lenght); i++){\n            if(this.visited[parseInt(this.flrconn[i][0])][parseInt(this.flrconn[i][1])] == -1){\n              check = false;\n            }\n          }\n          if(check == true){\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n              var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n              console.log(\"verjsdh1\",vert)\n              this.graph.addEdge(\n                vert,\n                this.flrconn[ch][2],\n                this.minimumcost[parseInt(this.flrconn[ch][0])][\n                  parseInt(this.flrconn[ch][1])\n                ],\n                true\n              );\n            }\n             this.reset_var();\n             break;           \n          }\n      }\n      this.leaves.splice(ind,1);\n      for (let i = q[0]-1; i<=q[0]+1 ;i++){\n        for(let j = q[1]-1; j<=q[1]+1 ; j++){\n          if(i>=0 && i<m || j>=0 && j<n){\n            if(this.visited[i][j]==-1 && this.grids[i][j] == 1){\n              //A* main part to release closed list and open lists   \n              \n            }\n          }\n        }\n      }\n\n   }\n\n  }\n\n  /**\n   * @id  N1.1.18\n   * @author Anirudh Khammampati & Sai Kumar Reddy\n   * @description Find shortest path between source and destination\n   */\n  callwhile = (srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid,globalCoords = null) => {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n    for (let i = 0; i < m; i++) {\n      var row = [],\n        row1 = [],\n        row3 = [],\n        row4 = [];\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath.push(row4);\n\t\t\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n      this.visited[minleave[0]][minleave[1]] = 1;\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n        //console.log(this.flrconn);\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (\n            this.visited[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])\n            ] == 1\n          ) {\n          } else {\n            check = false;\n          }\n        }\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            console.log(\"verjsdh1\",vert)\n            console.log(this.flrconn[ch][2],this.minimumcost[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])]);\n            this.graph.addEdge(\n              vert,\n              this.flrconn[ch][2],\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\n                parseInt(this.flrconn[ch][1])\n              ],\n              true\n            );\n          }\n          this.reset_var();\n          break;\n        }\n      }\n      this.leaves.splice(var_i, 1);\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1 &&(j==minleave[0]||k==minleave[1])) {\n              if (\n                this.minimumcost[j][k] >\n                this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.abs(minleave[0]-j)+Math.abs(minleave[1]-k)\n\t\t//Math.abs(j-dest_x)+Math.abs(k-dest_y)\n              ) {\n                this.minimumcost[j][k] =\n                  this.minimumcost[minleave[0]][minleave[1]] +\n                 Math.abs(minleave[0]-j)+Math.abs(minleave[1]-k);\n                 //+Math.abs(j-dest_x)+Math.abs(k-dest_y);\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                  minleave[1]\n                ].concat([[j, k]]);\n                notthere = 1;\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (single == true) {\n    let sp = this.shortestpath[dest_x][dest_y];\n      let mypoints = sp.map(r => {\n        return { x: r[0], y: r[1] };\n      });\n      sp = JSON.stringify(sp);\n      var refinedpaths = simplifyPath(mypoints, 2);\n      let { selectedVenue, selectedBuilding } = this.state;\n      // this.props.globalNavigation(\n        // { venueName: selectedVenue, buildingName: this.state.dstData.buildingName },\n        // () => {\n          this.callGlobal(sp,srcfloor,globalCoords);\n          // this.fltrNvgnData(floor)\n        // }\n      // );\n      let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\n        let allElements = flrData;\n      if(this.state.srcData.floor === this.state.dstData.floor){\n        let instructions = findInstructions(\n            sp,\n            refinedpaths,\n            allElements,\n            srcfloor\n        );\n        this.setState({\n          instructions:instructions\n        })\n      }else{\n        let instructions = findInstructions(\n          sp,\n          refinedpaths,\n          allElements,\n          srcfloor\n      );\n      \n      if(srcfloor === this.state.srcData.floor){\n        this.srcFlrInstructions = instructions;\n        this.setState({\n          instructions:instructions\n        })\n      }else{\n        this.dstFlrInstructions = instructions\n      }\n      }\n      // this.setState({\n      //   instructions: instructions\n      // });\n    }\n    this.reset_var()\n  };\n  /**\n   * @id  N1.1.19\n   * @author Pankaj Singh\n   * @description Load coordinates on osm\n   */\n  callGlobal = (shortestpath,srcfloor = null,globalCoords = null) => {\n    let crd = this.props.globalCoords.coordinates;\n    if(globalCoords){\n      crd = globalCoords\n    }\n\n    var coords = []; // \"breadth\":\"154\",\"length\":\"173\" , conversion: *3.28084\n    let sp = JSON.parse(shortestpath);\n    this.defineCoords(crd, coords);\n    //finding the point with lowest latitude and highest longitude\n    var least_lat = 0;\n    var high_lon = 0;\n    //finding the point with lowest latitude and highest longitude\n    for (let i = 0; i < coords.length; i++) {\n      \n      if (coords[i].lat == coords[least_lat].lat) {\n        //handling two points with equal lat\n        if (coords[i].lon > coords[least_lat].lon) {\n          least_lat = i;\n        }\n      } else if (coords[i].lat < coords[least_lat].lat) {\n        least_lat = i;\n      }\n    }\n    //evaluating high_lon\n    var c1 = least_lat == 3 ? 0 : least_lat + 1;\n    var c2 = least_lat == 0 ? 3 : least_lat - 1;\n    var high_lon = coords[c1].lon > coords[c2].lon ? c1 : c2;\n    console.log(c1);\n    console.log(c2);\n    console.log(coords[c1].lat);\n    console.log(coords[c2].lon);\n    ///lengths between given 4 global co-ordinates\n    var lengths = [];\n    for (let i = 0; i < coords.length; i++) {\n      var temp1;\n      if (i == coords.length - 1) {\n        temp1 = getHaversineDistance(coords[i], coords[0]);\n      } else {\n        temp1 = getHaversineDistance(coords[i], coords[i + 1]);\n      }\n      lengths.push(temp1);\n    }\n    // building angle with equator or true horizontal\n    var b = getHaversineDistance(coords[least_lat], coords[high_lon]);\n    const horizontal = obtaincoordinates(coords[least_lat], 0, b);\n    var c = getHaversineDistance(coords[least_lat], horizontal);\n    var a = getHaversineDistance(coords[high_lon], horizontal);\n    var out =\n      (Math.acos((b * b + c * c - a * a) / (2 * b * c)) * 180) / Math.PI;\n    // Vertical alignment or lift correction\n    var diff = []; //array to store offset of each floor\n    // loop to calculate all the coordinates of local points\n    var local_coords = { localx: 0, localy: 0 };\n    var myarr = JSON.parse(shortestpath);\n    //finding min and max latitude and longitude for the path\n    var max_lat = Number.MIN_SAFE_INTEGER;\n    var max_long = Number.MIN_SAFE_INTEGER;\n    var min_lat = Number.MAX_VALUE;\n    var min_long = Number.MAX_VALUE;\n    \n    for (let i = 0; i < sp.length; i++) {\n      if (diff.length > 1) {\n        //vertical correction across floors\n        local_coords.localx = sp[i][0];\n        local_coords.localy = sp[i][1];\n      } else {\n        local_coords.localx = sp[i][0];\n        local_coords.localy = sp[i][1];\n      }\n      var l = distance(coords[least_lat], coords[high_lon]);\n      var m = distance(local_coords, coords[high_lon]);\n      var n = distance(coords[least_lat], local_coords);\n      var theta =\n        (Math.acos((l * l + n * n - m * m) / (2 * l * n)) * 180) / Math.PI;\n      if ((l * l + n * n - m * m) / (2 * l * n) > 1 || m == 0 || n == 0) {\n        theta = 0;\n      } //staright line case\n      let ang = theta + out;\n      var dist = distance(coords[least_lat], local_coords) * 0.3048; //to convert to meter\n      var ver = dist * Math.sin((ang * Math.PI) / 180.0);\n      var hor = dist * Math.cos((ang * Math.PI) / 180.0);\n      var final = obtaincoordinates(coords[least_lat], ver, hor);\n    \n      myarr[i][0] = final.lat;\n      myarr[i][1] = final.lon;\n      if(max_lat<myarr[i][0]) max_lat = myarr[i][0];\n      if(max_long<myarr[i][1])max_long = myarr[i][1];\n      if(min_lat>myarr[i][0])min_lat = myarr[i][0];\n      if(min_long>myarr[i][1])min_long = myarr[i][1];\n     }\n\t  var mid_lat = (min_lat + max_lat)/2;\n\t  var mid_long = (min_long+max_long)/2;\n\n\t  var corner1 = L.latLng(min_lat+0.0001,min_long+0.0001);\n    var corner2 = L.latLng(max_lat+0.0001,max_long+0.0001);\n    var myBounds = L.latLngBounds(corner1,corner2);\n\t  var map = this.leafletMap.leafletElement;\n    \n     //console.log(myBounds.getNorthEast());\n    //console.log(min_lat);\n    //console.log(max_lat);\n    map.flyTo(new L.latLng(mid_lat,mid_long),21.6);\n    console.log(map.getZoom());\n\t  //map.flyToBounds(myBounds);\n    console.log(map.getZoom());\n    //map.flyTo(new L.LatLng(mid_lat+0.00002,mid_long+0.00001),22.5, {animation : true, duration :1});\n\t  //console.log(min_long);\n\t  //console.log(min_lat);\n    console.log(map.getZoom());\n\n        \n    //converting to geoJSON format\n    let geoJSON = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    // myarr.shift();\n    // myarr.pop();\n    // myarr.pop();\n\n    for (let i = 0; i < myarr.length; i++) {\n      var p = myarr[i];\n      geoJSON.features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [p[0], p[1]]\n        }\n      });\n    }\n\n    if(this.state.srcData.floor !== this.state.dstData.floor){\n      if(srcfloor === this.state.srcData.floor){\n        this.srcFloorSp = geoJSON\n      }else{\n        this.dstFloorSp = geoJSON\n      }\n    }else{\n      this.setState(\n        {\n          showpath: true,\n          // showMarker: false,\n          zoom: 19,\n          pathgeoJSON: geoJSON\n        },\n        () => {\n          // var southWest = L.latLng(src[1], src[0]),\n            // northEast = L.latLng(dst[1], dst[0]),\n            // bounds = L.latLngBounds(southWest, northEast);\n          // map.fitBounds(bounds);\n        }\n      );\n    }\n    \n\n    \n  };\n\n  defineCoords = (crd, coords) => {\n    coords[0] = {\n      lat: parseFloat(crd[0].globalRef.lat),\n      lon: parseFloat(crd[0].globalRef.lng),\n      localx: parseInt(crd[0].localRef.lat),\n      localy: parseInt(crd[0].localRef.lng)\n    };\n    coords[1] = {\n      lat: parseFloat(crd[3].globalRef.lat),\n      lon: parseFloat(crd[3].globalRef.lng),\n      localx: parseInt(crd[3].localRef.lng),\n      localy: parseInt(crd[3].localRef.lat)\n    };\n    coords[2] = {\n      lat: parseFloat(crd[2].globalRef.lat),\n      lon: parseFloat(crd[2].globalRef.lng),\n      localx: parseInt(crd[2].localRef.lng),\n      localy: parseInt(crd[2].localRef.lat)\n    };\n    coords[3] = {\n      lat: parseFloat(crd[1].globalRef.lat),\n      lon: parseFloat(crd[1].globalRef.lng),\n      localx: parseInt(crd[1].localRef.lng),\n      localy: parseInt(crd[1].localRef.lat)\n    };\n  };\n\n  handleVenueChange = e => {\n    this.setState(\n      {\n        buildingList: [],\n        flrList: [],\n        selectedBuilding: \"\",\n        floorSelect: false,\n        selectNavigation: false,\n        geoJSON: [],\n        geoJSONPoly: []\n      },\n      () => {\n        this.selectedVenue(e[0].venueName, e[0].coordinates);\n      }\n    );\n  };\n /**\n   * @id  N1.1.19\n   * @author Pankaj Singh\n   * @description Load coordinates on osm\n   */\n  findpath = ()=> {\n    let srcVal = \"\";\n    let dstVal = \"\";\n    let srcfloor = \"\";\n    let dstfloor = \"\";\n    let srcFloorL = \"\";\n    let srcFloorB = \"\";\n    let dstFloorL = \"\";\n    let dstFloorB = \"\";\n    let building = this.state.dstData.buildingName;\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\n    let polyData =  this.state.buildingPolyCluster.filter(r=>r.building === this.state.dstData.buildingName)[0].data;\n    let refPoint =  this.state.globalRefPointsList.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].refPoints;        \n    // let i = parseInt(gridY) * floorL + parseInt(gridX);\n    // let flrMarkData = []\n    //        flrData.forEach(r=>{\n    //         if(r.floor === this.state.dstData.floor){\n    //           flrMarkData.push(r)\n    //         } \n    //       })\n          let flrDataPoly = []\n          for(let k=0;k<polyData.length;k++){\n              if(polyData[k].floor === this.state.dstData.floor){\n                dstFloorL = polyData[k].properties.floorLength\n                dstFloorB = polyData[k].properties.floorBreadth\n              } \n              if(polyData[k].floor === this.state.srcData.floor){\n                srcFloorL = polyData[k].properties.floorLength\n                srcFloorB = polyData[k].properties.floorBreadth\n              }\n          }\n          let {srcData,dstData} = this.state\n          let srcNode = parseInt(srcData.coordinateY) * srcFloorL + parseInt(srcData.coordinateX);\n          let dstNode = parseInt(dstData.coordinateY) * dstFloorL + parseInt(dstData.coordinateX);          \n          for(let k=0;k<flrData.length;k++){\n            if(flrData[k].floor === this.state.dstData.floor){\n              dstVal = flrData[k].properties.node \n            } \n            if(flrData[k].floor === this.state.srcData.floor){\n              srcVal = flrData[k].properties.node \n            }\n        }\n    // let i = parseInt(gridY) * floorL + parseInt(gridX);\n    var srcvert = this.state.srcData.floor + \",\" + srcNode + \",\" + \"virtual\";\n    var dstvert = this.state.dstData.floor + \",\" + dstNode + \",\" + \"virtual\";\n    if (this.graph.hasvertex(srcvert)) {\n    } else {\n      this.graph.addVertex(srcvert);\n      this.flrconn = [];\n      this.flrind = [];\n      console.log(this.state.srcData.floor);\n      for(let k=0;k<flrData.length;k++){\n        if (\n          flrData[k].floor === this.state.srcData.floor &&\n          flrData[k].element.type === \"FloorConnection\"\n        ) {\n          // var vert = flrData[k].properties.node\n          var vert = flrData[k].floor + \",\" + flrData[k].properties.node ;\n          this.flrconn.push([flrData[k].coordinateX , flrData[k].coordinateY, vert]);\n          this.flrind.push([k,vert]);\n          console.log(this.flrconn);\n\n        }\n    }\n      this.callwhile(\n        this.state.srcData.floor,\n        srcNode,\n        srcFloorL,\n        srcFloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    if (this.graph.hasvertex(dstvert)) {\n    } else {\n      this.graph.addVertex(dstvert);\n      this.flrconn = [];\n      this.flrind = [];\n      for(let k=0;k<flrData.length;k++){\n        if(flrData[k].floor === this.state.dstData.floor &&\n          flrData[k].element.type === \"FloorConnection\"){\n            var vert = flrData[k].floor + \",\" + flrData[k].properties.node ;\n            this.flrind.push([k,vert]);\n          this.flrconn.push([flrData[k].coordinateX , flrData[k].coordinateY, vert]);\n        }\n    }\n    console.log(this.flrconn);\n    console.log(this.flrind);\n      this.callwhile(\n        this.state.dstData.floor,\n        dstNode,\n        dstFloorL,\n        dstFloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    this.specialcallwhile(\n      this.state.srcData.floor,\n      srcvert,\n      this.state.dstData.floor,\n      dstvert,refPoint\n    );\n  }\n\n  specialcallwhile(srcfloor,srcvert,dstfloor,dstvert,refPoint){\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\",srcfloor,srcvert,dstfloor,dstvert,refPoint)\n    var min = Number.MAX_VALUE;\n    var minleave=null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves =[];\n    let flrData =  this.state.buildingCluster.filter(r=>r.buildingName === this.state.dstData.buildingName)[0].data;\n    var get_keys = this.graph.AdjList.keys();\n    for(var i of get_keys){\n      minimumcost.set(i,min);\n      visited.set(i,false);\n    }\n    leaves.push(srcvert);\n    shortestpath.set(srcvert,[srcvert]);\n    minimumcost.set(srcvert,0);\n    // this.graph.printGraph()\n    while(leaves.length > 0){\n      // alert(\"stop \"+leaves.length);\n      min = Number.MAX_VALUE;\n      for(let i=0;i<leaves.length;i++){\n        if(min > minimumcost.get(leaves[i])){\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n      visited.set(minleave,true);\n        if(minleave == dstvert){\n          // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n          break;\n        }\n      leaves.splice(var_i, 1);\n          var get_values = this.graph.AdjList.get(minleave);\n          var get_dist = this.graph.Adjweights.get(minleave);\n          var flag =0;\n          for (var jj=0;jj<get_values.length;jj++) {\n            console.log(j);\n            var j = get_values[jj];\n            var l = j.split(\",\");\n            var neighbour = false;\n            if(l.length==2){\n              neighbour=true;\n            }\n            else if(l.length==3){\n              if(j==dstvert){\n                neighbour=true;\n              }\n            }\n            var dataind = 0;\n            for(var kk=0; kk<this.flrind.lenght;kk++){\n                if(this.flrind[kk][1]==j){\n                  dataind = this.flrind[kk][0];\n                }\n            }\n            console.log(j);\n            console.log(this.flrind[dataind]);\n            console.log(flrData[dataind].element.subType);\n            if(visited.get(j) == false && neighbour){\n              console.log(j);\n              //console.log(minleave);\n              if(minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj] ){\n               // console.log(j);\n                minimumcost.set(j,minimumcost.get(minleave) + get_dist[jj]);\n                var dum = [];\n                dum = shortestpath.get(minleave);\n                dum = dum.concat([j]);\n                shortestpath.set(j ,dum);\n                \n                notthere = 1;\n                for(var p=0;p<leaves.length;p++){\n                  if(leaves[p] == j){\n                    notthere = 0;\n                  }\n                }\n                if(notthere == 1){\n                  \n                  leaves.push(j);\n                  \n                }\n              }\n              \n            }\n            \n          }\n    }\n    this.createcanvas(shortestpath.get(dstvert),false,refPoint);\n  }\n\n  createcanvas( list, samefloor,refPoint) {\n    if (samefloor === false) {  \n      let ans = new Map();\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n      this.callimage(0, ans, cnt, clist, floorLlist,refPoint);\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist,refPoint) {\n    let floorList = [this.state.srcData.floor, this.state.dstData.floor];\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let me = this;\n          let get_val = ans.get(i);\n              var id = \"canvas\" + ii;\n              // me.loadMultiFloorNonwalkable(id)\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\",i, get_val[j], m, n, dest_x, dest_y, true, id)\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id,refPoint);\n              }\n              var node_count = 0;\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                     //me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                     //me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                     //me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                     //me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n                node_count++;\n              }\n\n        }\n      }\n    }\n    console.log(\"this.srcFloorSp,this.dstFloorSp\")\n    this.setState({\n      srcFloorSp:this.srcFloorSp,\n      dstFloorSp:this.dstFloorSp,\n      pathgeoJSON:this.srcFloorSp,\n      srcFlrInstructions:this.srcFlrInstructions,\n      dstFlrInstructions:this.dstFlrInstructions,\n      showpath:true\n    })\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n      cnt++;\n    }\n  }\n\n  render() {\n    let srtdFlr = []\n    special.forEach((r1, i) => {\n                this.state.floorList &&\n              this.state.floorList.forEach(r2=>{\n                  if( r1 === r2){\n                      srtdFlr.push(r1)\n                  } \n                })\n              })\n    return (\n      <React.Fragment>\n        {/*Instruction Component */}\n        <div hidden={!this.state.showInstructions}>\n          <Instructions\n            dstAddress={this.state.dstAddress}\n            globalTime={this.state.globalTime}\n            globalDistance={this.state.globalDistance}\n            currentLocation={this.state.currentLocation}\n            handleBuildingView={this.handleBuildingView}\n            instructionSet={this.state.instructions}\n            buildingView={this.state.buildingView}\n            sourceLocation={this.state.currentLocation}\n            dstLocation={this.state.dstAddress}\n            dstName={this.state.dstName}\n            srcName={this.state.srcName}\n            handleInstr={() => {\n              this.setState({\n                showInstructions: false\n              });\n            }}\n          />\n        </div>\n        <div className=\"landing-height\" hidden={this.state.showInstructions}>\n          {/** Search Bar */}\n          <div\n            className=\"src-dst fixed-top\"\n            id=\"src-bar\"\n            style={{\n              height: this.state.selectNavigation === true ? \"167px\" : \"57px\"\n            }}\n          >\n            <div className=\"row w-100  mx-auto\">\n              <div className=\"col-12 p-0\">\n                <Typeahead\n                  required\n                  placeholder={`${this.state.selectedVenue}`}\n                  filterBy={[\"venueName\"]}\n                  labelKey={option => {\n                    return `${option.venueName.split(/(?=[A-Z])/).join(\" \")}`;\n                  }}\n                  onChange={e => {\n                    if (e.length > 0) {\n                      this.handleVenueChange(e);\n                    }\n                  }}\n                  disabled={false}\n                  id=\"source\"\n                  value={this.state.selectedVenue}\n                  options={this.state.venueList}\n                  name=\"list\"\n                  className=\"mb-2 form-control-dashboard mt-1\"\n                />\n              </div>\n            </div>\n            <div className=\"mx-auto hr-line\" />\n            {this.state.selectNavigation === true ? (\n              <React.Fragment>\n                <div className=\"row w-100  mx-auto mt-3\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.props.navContent(\"SELECT DESTINATION\", () => {});\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                      />\n                      <Typeahead\n                        required\n                        placeholder={`Select Source`}\n                        filterBy={[\"name\"]}\n                        labelKey={option => {\n                          let resp = this.sourceLabel(option);\n                          return resp;\n                        }}\n                        renderMenuItemChildren={option => {\n                          return this.renderSourceMenu(option);\n                        }}\n                        onChange={e => {\n                          if (e.length > 0) {\n                            \n                            this.setState({\n                              srcName:e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\n                              srcData: e[0]\n                            });\n                          }\n                        }}\n                        disabled={false}\n                        id=\"source\"\n                        value={this.state.srcName}\n                        options={this.state.venueNavigation}\n                        name=\"list\"\n                        className=\"mb-2 form-control-dashboard mt-1\"\n                      />\n                    </button>\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100 mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.props.navContent(\"SELECT DESTINATION\", () => {});\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2 my-auto\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <Typeahead\n                        required\n                        placeholder={`Select Destination`}\n                        filterBy={[\"name\"]}\n                        labelKey={option => {\n                          let resp = this.sourceLabel(option);\n                          return resp;\n                        }}\n                        renderMenuItemChildren={option => {\n                          return this.renderSourceMenu(option);\n                        }}\n                        onChange={e => {\n                          if (e.length > 0) {\n                            this.setState(\n                              {\n                                dstName: e[0].name + \" \" + e[0].floor + \" \" + e[0].buildingName,\n                                dstData: e[0],\n                                navigationStrt:true,\n                                samefloor:e[0].floor !== this.state.srcData.floor?false:true\n                              },\n                              () => {\n                                // this.mapReferencePoint()\n                                // this.handleLocalGlobal();\n                                this.setNavigation();\n                              }\n                            );\n                          }\n                        }}\n                        disabled={false}\n                        id=\"source\"\n                        value={this.state.dstName}\n                        options={this.state.venueNavigation}\n                        name=\"list\"\n                        className=\"mb-2 form-control-dashboard mt-1\"\n                      />\n                    </button>\n                  </div>\n                </div>\n              </React.Fragment>\n            ) : null}\n          </div>\n\n          <div\n            class=\"btn-group-vertical glbl-btn mr-2\"\n            role=\"group\"\n            aria-label=\"First group\"\n          >\n            {srtdFlr &&\n              srtdFlr.map((r, i) => {\n                return (\n                  <button\n                    type=\"button\"\n                    // className={\"btn btn-secondary\"}                    \n                    className={this.state.currentFloor ===r?\"btn btn-secondary active active1\":\"btn btn-secondary\"}\n                    onClick={() => {\n                      this.setState({\n                        currentFloor:r\n                      },()=>{\n                        if(this.state.srcData.floor === this.state.currentFloor){\n                          this.setState({\n                            pathgeoJSON:this.srcFloorSp,\n                            geoJSON:this.state.srcFloorLandMark,\n                            instructions:this.state.srcFlrInstructions\n                          })\n                        }else{\n                          this.setState({\n                            pathgeoJSON:this.dstFloorSp,\n                            geoJSON:this.state.dstFloorLandMark,\n                            instructions:this.state.dstFlrInstructions\n                          })\n                          // srcFloorSp:,\n                          // dstFloorSp:,\n                          // pathgeoJSON:this.srcFloorSp,\n                        }\n                      })\n                    }}\n                  >\n                    L{i}\n                  </button>\n                );\n              })}\n          </div>\n\n          <div\n            class=\"btn-group-vertical glbl-hm-btn mr-2\"\n            role=\"group\"\n            aria-label=\"First group\"\n          >\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              onClick={() => {\n                this.props.history.push(\"/navigate\");\n              }}\n            >\n              <i className=\"fa fa-home\" />\n            </button>\n          </div>\n          <MapContainer\n            style={{ height: \"100vh\" }}\n            center={center}\n            zoom={this.state.zoom}\n            ref={m => {\n              this.leafletMap = m;\n            }}\n            onZoomEnd={e => {\n              // Zoom in & out control\n              if (e.target._zoom < 21.2) {\n                //remove all layers from map\n                this.setState({\n                  showpath: false\n                });\n              }\n              if (e.target._zoom < 20) {\n                //remove all layers from map\n                this.setState({\n                  showMarker: false,\n                  showpath: false\n                });\n              }\n              if (e.target._zoom < 20) {\n                //remove all layers from map\n                this.setState({\n                  showServices: false\n                });\n              } else {\n              }\n              //adding non-room layers beyond 20 zoom\n              if (e.target._zoom > 19 && !this.state.showpath) {\n                this.setState({\n                  showMarker: true\n                });\n              }\n\n              if (e.target._zoom > 21.2 && !this.state.showpath) {\n                this.setState({\n                  showpath: true\n                });\n              }\n\n              if (e.target._zoom > 20 && !this.state.showpath) {\n                this.setState({\n                  showServices: true\n                });\n              } else {\n              }\n            }}\n          >\n            <TileLayer\n              attribution=\"&copy; <a href='https://osm.org/copyright'>OpenStreetMap</a> contributors\"\n              url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              maxZoom={25}\n              maxNativeZoom={19}\n            />\n            {this.state.floorSelect ? null : (\n              <React.Fragment>\n                {this.state.buildingList &&\n                  this.state.buildingList.map(r => {\n                    return (\n                      <Marker\n                        position={{ lat: r.lat, lng: r.lng }}\n                        onClick={this.getData.bind(this, r.buildingName)}\n                      >\n                        <Popup position={{ lat: r.lat, lng: r.lng }}>\n                          Building Name:\n                          <pre>{r.buildingName}</pre>\n                        </Popup>\n                      </Marker>\n                    );\n                  })}\n              </React.Fragment>\n            )}\n            {this.state.showMarker ? (\n              <React.Fragment>\n                {this.state.geoJSON.features &&\n                  this.state.geoJSON.features.map((position, idx) => {\n                    switch (position.properties.floorElement) {\n                      case \"Rooms\":\n                        return (\n                          <Marker\n                            position={[\n                              position.geometry.coordinates[1],\n                              position.geometry.coordinates[0]\n                            ]}\n                          >\n                            <Popup>\n                              <span className=\"font-weight-bold\">\n                                {position.properties.name}\n                              </span>\n                              <div\n                                class=\"btn-group btn-block\"\n                                role=\"group\"\n                                aria-label=\"Basic example\"\n                              >\n                                <button\n                                  class=\"btn btn-primary\"\n                                  onClick={e => {\n                                    this.handleCall(e, position);\n                                  }}\n                                >\n                                  <i class=\"fa fa-phone\"></i>\n                                </button>\n                                <button\n                                  class=\"btn btn-primary\"\n                                  onClick={e => {\n                                    this.handleInternet(e, position);\n                                  }}\n                                >\n                                  <i class=\"fa fa-globe\"></i>\n                                </button>\n                                <button\n                                  class=\"btn btn-primary\"\n                                  onClick={e => {\n                                    this.handleWhatsapp(e, position);\n                                  }}\n                                >\n                                  <i class=\"fa fa-whatsapp\"></i>\n                                </button>\n                                <button\n                                  class=\"btn btn-primary\"\n                                  onClick={e => {\n                                    this.handleEmail(e, position);\n                                  }}\n                                >\n                                  <i class=\"fa fa-envelope\"></i>\n                                </button>\n                                <button\n                                  class=\"btn btn-primary\"\n                                  onClick={e => {\n                                    this.handleInfo(e, position);\n                                  }}\n                                >\n                                  <i class=\"fa fa-info\"></i>\n                                </button>\n                                <button class=\"btn btn-primary\">\n                                  <i class=\"fa fa-plus-square\"></i>\n                                </button>\n                              </div>\n                            </Popup>\n                          </Marker>\n                        );\n                      case \"Services\":\n                        if (this.state.showServices) {\n                          switch (position.properties.type) {\n                            case \"drinkingWater\":\n                              return (\n                                <Marker\n                                  position={[\n                                    position.geometry.coordinates[1],\n                                    position.geometry.coordinates[0]\n                                  ]}\n                                  icon={watericon}\n                                >\n                                  <Popup>\n                                    <span>{position.properties.name}</span>\n                                  </Popup>\n                                </Marker>\n                              );\n                            case \"restRoom\":\n                              switch (position.properties.washroomType) {\n                                case \"Male\":\n                                  return (\n                                    <Marker\n                                      position={[\n                                        position.geometry.coordinates[1],\n                                        position.geometry.coordinates[0]\n                                      ]}\n                                      icon={male_toileticon}\n                                    >\n                                      <Popup>\n                                        <span>{position.properties.name}</span>\n                                      </Popup>\n                                    </Marker>\n                                  );\n                                case \"Female\":\n                                  return (\n                                    <Marker\n                                      position={[\n                                        position.geometry.coordinates[1],\n                                        position.geometry.coordinates[0]\n                                      ]}\n                                      icon={female_toileticon}\n                                    >\n                                      <Popup>\n                                        <span>{position.properties.name}</span>\n                                      </Popup>\n                                    </Marker>\n                                  );\n                                default:\n                                  return (\n                                    <Marker\n                                      position={[\n                                        position.geometry.coordinates[1],\n                                        position.geometry.coordinates[0]\n                                      ]}\n                                    >\n                                      <Popup>\n                                        <span>{position.properties.name}</span>\n                                      </Popup>\n                                    </Marker>\n                                  );\n                              }\n                            default:\n                              return null;\n                          }\n                        }\n                        break;\n                      case \"FloorConnection\":\n                        switch (position.properties.type) {\n                          case \"stairs\":\n                            return (\n                              <Marker\n                                position={[\n                                  position.geometry.coordinates[1],\n                                  position.geometry.coordinates[0]\n                                ]}\n                                icon={stairicon}\n                              >\n                                <Popup>\n                                  <span>{position.properties.name}</span>\n                                </Popup>\n                              </Marker>\n                            );\n                          case \"lift\":\n                            return (\n                              <Marker\n                                position={[\n                                  position.geometry.coordinates[1],\n                                  position.geometry.coordinates[0]\n                                ]}\n                                icon={lifticon}\n                              >\n                                <Popup>\n                                  <span>{position.properties.name}</span>\n                                </Popup>\n                              </Marker>\n                            );\n                          default:\n                            return null;\n                        }\n                      default:\n                        return null;\n                    }\n                  })}\n              </React.Fragment>\n            ) : null}\n            \n            {/* <GeoJSON\n              key={hash(this.state.geoJSONPoly)}\n              data={this.state.geoJSONPoly}\n            /> */}\n\n            {this.state.samefloor && this.state.polygons && this.state.polygons.map(r=>{\n              return <GeoJSON\n              key={hash(r.geoJSONPoly)}\n              data={r.geoJSONPoly}\n            />\n            })}\n            {!this.state.samefloor?\n             <GeoJSON\n              key={hash(this.state.currentFloor === this.state.srcData.floor? this.state.srcFloorPoly:this.state.dstFloorPoly)}\n              data={this.state.currentFloor === this.state.srcData.floor? this.state.srcFloorPoly:this.state.dstFloorPoly}\n            />:\n            null\n            }\n            {/* {this.state.showpath ? (\n              <React.Fragment>\n                <Marker\n                  position={[\n                    this.state.srcData.geometry.coordinates[1],\n                    this.state.srcData.geometry.coordinates[0]\n                  ]}\n                  icon={source}\n                >\n                  <Popup>\n                    <span className=\"font-weight-bold\">\n                      {this.state.srcData.properties.name}\n                    </span>\n                    <div\n                      class=\"btn-group btn-block\"\n                      role=\"group\"\n                      aria-label=\"Basic example\"\n                    >\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleCall(e, [\n                            this.state.srcData.geometry.coordinates[1],\n                            this.state.srcData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-phone\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleInternet(e, [\n                            this.state.srcData.geometry.coordinates[1],\n                            this.state.srcData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-globe\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleWhatsapp(e, [\n                            this.state.srcData.geometry.coordinates[1],\n                            this.state.srcData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-whatsapp\"></i>\n                      </button>\n                      <button class=\"btn btn-primary\">\n                        <i class=\"fa fa-envelope\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleInfo(e, [\n                            this.state.srcData.geometry.coordinates[1],\n                            this.state.srcData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-info\"></i>\n                      </button>\n                      <button class=\"btn btn-primary\">\n                        <i class=\"fa fa-plus-square\"></i>\n                      </button>\n                    </div>\n                  </Popup>\n                </Marker>\n                <Marker\n                  position={[\n                    this.state.dstData.geometry.coordinates[1],\n                    this.state.dstData.geometry.coordinates[0]\n                  ]}\n                  icon={destination}\n                >\n                  <Popup>\n                    <span className=\"font-weight-bold\">\n                      {this.state.srcData.properties.name}\n                    </span>\n                    <div\n                      class=\"btn-group btn-block\"\n                      role=\"group\"\n                      aria-label=\"Basic example\"\n                    >\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleCall(e, [\n                            this.state.dstData.geometry.coordinates[1],\n                            this.state.dstData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-phone\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleInternet(e, [\n                            this.state.dstData.geometry.coordinates[1],\n                            this.state.dstData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-globe\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleWhatsapp(e, [\n                            this.state.dstData.geometry.coordinates[1],\n                            this.state.dstData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-whatsapp\"></i>\n                      </button>\n                      <button class=\"btn btn-primary\">\n                        <i class=\"fa fa-envelope\"></i>\n                      </button>\n                      <button\n                        class=\"btn btn-primary\"\n                        onClick={e => {\n                          this.handleInfo(e, [\n                            this.state.dstData.geometry.coordinates[1],\n                            this.state.dstData.geometry.coordinates[0]\n                          ]);\n                        }}\n                      >\n                        <i class=\"fa fa-info\"></i>\n                      </button>\n                      <button class=\"btn btn-primary\">\n                        <i class=\"fa fa-plus-square\"></i>\n                      </button>\n                    </div>\n                  </Popup>\n                </Marker>\n              </React.Fragment>\n            ) : null} */}\n\n            {this.state.showpath &&\n              this.state.pathgeoJSON.features &&\n              this.state.pathgeoJSON.features.map((position, idx) => {\n                return (\n                  <Marker\n                    position={[\n                      position.geometry.coordinates[0],\n                      position.geometry.coordinates[1]\n                    ]}\n                    icon={doticon}\n                  ></Marker>\n                );\n              })}\n          </MapContainer>\n          <BottomBar\n            srcName={this.state.srcName}\n            dstName={this.state.dstName}\n            dstData={this.state.dstData}\n            handleInstr={() => {\n              this.setState({\n                showInstructions: true\n              });\n            }}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile: state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.globalNavigation,\n    globalRoutes: state.osmRoutes,\n    pickupPoint: state.pickupPoints,\n    currentTab: state.navContent,\n    globalCoords: state.refPoint\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  globalNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent,\n  refPoint\n})(GlobalView);\n"]},"metadata":{},"sourceType":"module"}