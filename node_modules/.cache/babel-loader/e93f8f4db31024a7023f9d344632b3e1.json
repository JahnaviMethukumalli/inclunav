{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/home/navigation/src/components/dashboard/navigation/Navigation.js\";\nimport React from \"react\";\nimport { Map as MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport { floorList, imgDetails, getAllBuildingElements, venueList, buildingList, getGpsLocation, androidNavigation, getUserPortfolio, osmRoutes, pickupPoints, navContent } from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\nimport SelectSource from './SelectSource';\nimport SelectDestination from './SelectDestination';\nimport './location.css';\nimport Modal from 'react-modal';\nconst customStyles = {\n  content: {\n    top: '55%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    background: \"#27282D\",\n    width: \"98%\",\n    height: \"95%\"\n  },\n  overlay: {\n    zIndex: 9999\n  }\n};\nconst center = {\n  lat: 28.6139,\n  lng: 77.209\n};\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n\n}\n\nclass Navigation extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getUserDetails = () => {\n      let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({\n        id,\n        token\n      }, () => {\n        if (this.props.userProfile.success === false) {\n          localStorage.clear();\n          this.props.history.push('/');\n        } else {\n          let data = this.props.userProfile.properties;\n          this.setState({\n            language: data.language,\n            visionType: data.visionType,\n            height: data.height,\n            ageGroup: data.ageGroup,\n            walkingType: data.navigationMode\n          });\n        }\n      });\n    };\n\n    this.fetchLocation = (venueName, buildingName, point) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        let flrListData = this.props.flrList.data;\n        let prevData = this.state.center;\n        this.setState({\n          center: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          currentPos: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle: parseInt(flrListData[0].buildingOrientation)\n          }\n        }, () => {\n          this.props.getAllBuildingElements(data, () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(new L.LatLng(flrListData[0].lat, flrListData[0].lng), map.getZoom(), {\n              animate: true,\n              duration: 0.5\n            });\n            let nodes = this.props.navigationInfo;\n            let lists = [];\n\n            for (let i = 0; i < nodes.length; i++) {\n              var sel = nodes[i].properties;\n              lists.push(sel);\n            }\n\n            const uniqueLists = Array.from(new Set(lists.map(o => {\n              if (o.floorElement === \"Rooms\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"FloorConnection\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"Services\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"RestRooms\") {\n                return o.coordinates;\n              } else {// return o.coordinates\n              }\n            }))).map(id => {\n              return lists.find(a => a.coordinates === id);\n            });\n            let freeBeacon = uniqueLists.map(r => {\n              if (r.floorElement === \"Services\") {\n                if (r.type === \"Beacons\") {\n                  return null;\n                } else {\n                  return r;\n                }\n              } else {\n                return r;\n              }\n            });\n            let freeData = freeBeacon.filter(el => {\n              return el != null;\n            });\n            freeData.sort((a, b) => {\n              if (a.floorElement === \"Rooms\") {\n                if (a.roomName !== undefined) {\n                  return a.roomName < b.roomName ? -1 : a.roomName > b.roomName ? 1 : 0;\n                } else {\n                  return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n                }\n              } else {\n                return a.type < b.type ? -1 : a.type > b.type ? 1 : 0;\n              }\n            });\n\n            if (point === \"srcBuildingLocation\") {\n              this.setState({\n                srcFloorList: freeData\n              });\n            } else if (point === \"dstBuildingLocation\") {\n              let me = this;\n              let srcLat = this.state.srcBuildingLocation.lat;\n              let srcLng = this.state.srcBuildingLocation.lng;\n\n              if (!srcLat && !srcLng) {\n                srcLat = prevData.lat;\n                srcLng = prevData.lng;\n              } // L.Routing.control({\n              //   waypoints: [\n              //     L.latLng(srcLat, srcLng),\n              //     L.latLng(flrListData[0].lat, flrListData[0].lng)\n              //   ],\n              //   routeWhileDragging: false,\n              //   autoRoute: true,\n              //   useZoomParameter: false,\n              //   draggableWaypoints: false,\n              //   show: false,\n              //   addWaypoints: false,\n              //   createMarker: function(i, wp) {\n              //     return L.marker(wp.latLng)\n              //       .on(\"click\", function(e) {\n              //         if (\n              //           e.latlng.lat === me.state.srcBuildingLocation.lat &&\n              //           e.latlng.lng === me.state.srcBuildingLocation.lng\n              //         ) {\n              //           me.nvgtSrcBld();\n              //         } else {\n              //           me.nvgtDstBld();\n              //         }\n              //       })\n              //       .bindPopup(\n              //         i === 0 ? \"Source Building\" : \"Destination Building\"\n              //       );\n              //   }\n              // })\n              //   .addTo(map)\n              //   .on(\"routesfound\", function(e) {\n              //     let distance = e.routes[0].summary.totalDistance;\n              //     me.setState({\n              //       osmRoutes: e.routes[0].instructions,\n              //       globalDistance: e.routes[0].summary.totalDistance,\n              //       globalTime: e.routes[0].summary.totalTime\n              //     });\n              //   });\n\n\n              map.fitBounds(L.latLngBounds(L.latLng(srcLat, srcLng), L.latLng(flrListData[0].lat, flrListData[0].lng)));\n              this.setState({\n                dstFloorList: freeData,\n                zoomLevel: \"10\"\n              });\n            }\n          });\n        });\n      });\n    };\n\n    this.getVenueList = (coordinates = null) => {\n      this.props.venueList(() => {\n        console.log(\"vn lisrt\", this.props.vnList);\n        this.setState({\n          venueList: this.props.vnList.data\n        }, () => {\n          this.findNearVenue(coordinates);\n        });\n      });\n    };\n\n    this.findNearVenue = coordinates => {\n      let {\n        venueList\n      } = this.state;\n      let dl = venueList.map(async r => {\n        let resp = await this.getDistance(coordinates, r);\n        return resp;\n      });\n      Promise.all(dl).then(distList => {\n        let arr = [];\n        let list = this.state.venueList.map((r, i) => {\n          if (r.buildingList) {\n            let dt = r.buildingList.map(k => {\n              arr.push({\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              });\n              return {\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              };\n            });\n            return dt;\n          } else {\n            arr.push({\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            });\n            return {\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            };\n          }\n        });\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n\n          if (tmp > highest) highest = tmp;\n        }\n\n        let listArr = this.state.locationList.map(r => {\n          let k = distList.map(d => {\n            if (d.venueName === r.venueName) {\n              return {\n                r,\n                distance: d.distance\n              };\n            }\n          });\n        });\n        let sortedArr = this.quickSort(arr);\n\n        if (lowest < 1) {\n          this.setState({\n            currentVenue: nearLocation,\n            locationList: arr\n          }, () => {\n            this.getBuildingList(nearLocation.venueName, coordinates);\n          });\n        } else {\n          this.setState({\n            currentVenue: {\n              address: \"\",\n              coordinates: [],\n              dateCreated: \"\",\n              distance: 2,\n              id: 35,\n              liveStatus: true,\n              organization: \"\",\n              venueName: \"\"\n            },\n            selectedLocation: {\n              venueName: \"Venue\",\n              buildingName: \"Building\"\n            },\n            locationList: arr,\n            currentBuilding: {\n              address: \"\",\n              buildingName: \"\",\n              coordinates: [],\n              distance: 2,\n              lat: 0,\n              lng: 0\n            }\n          });\n        }\n      });\n    };\n\n    this.quickSort = arr => {\n      if (arr.length < 2) {\n        return arr;\n      }\n\n      let pivot = arr[0];\n      let lesserVal = [];\n      let greaterVal = [];\n\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[k].venueDistance < pivot.venueDistance) {\n          lesserVal.push(arr[k]);\n        } else {\n          greaterVal.push(arr[k]);\n        }\n      }\n    };\n\n    this.getBuildingList = (venueName, coordinates = null) => {\n      this.props.buildingList({\n        venueName: venueName\n      }, () => {\n        this.setState({\n          buildingList: this.props.bldList.data\n        }, () => {\n          if (this.state.buildingList.length > 0) {\n            if (coordinates !== null) {\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: {\n                venueName: venueName,\n                buildingName: \"\"\n              }\n            });\n          }\n        });\n      });\n    };\n\n    this.findNearBuilding = coordinates => {\n      let {\n        buildingList\n      } = this.state;\n      let distList = buildingList.map(r => {\n        let p = [r.lat, r.lng];\n        r.coordinates = p;\n        return this.getDistance(coordinates, r);\n      });\n      let dl = buildingList.map(async (r, i) => {\n        let p = [r.lat, r.lng];\n        r.coordinates = p;\n        let resp = await this.getDistance(coordinates, r);\n        return resp;\n      });\n      Promise.all(dl).then(distList => {\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n\n          if (tmp > highest) highest = tmp;\n        }\n\n        if (lowest < 50) {\n          if (nearLocation.pickupLat) {\n            let coordinate = nearLocation.pickupLat.map((r, i) => {\n              return {\n                lat: parseFloat(r),\n                lng: parseFloat(nearLocation.pickupLng[i])\n              };\n            });\n            let dist = coordinate.map(p => {\n              let dl = this.euclideanDistance(coordinates, [p.lat, p.lng]);\n              return dl;\n            });\n            let lower = this.nearLocation(dist);\n            this.setState({\n              currentBuilding: nearLocation,\n              selectedLocation: {\n                venueName: this.state.currentVenue.venueName,\n                buildingName: nearLocation.buildingName,\n                nearestPickupPoint: {\n                  lat: lower.nearLocation[0],\n                  lng: lower.nearLocation[1]\n                },\n                currentPos: {\n                  lat: lower.nearLocation[0],\n                  lng: lower.nearLocation[1]\n                }\n              }\n            }, () => {// this.setNavigation(this.state.selectedLocation);\n              // this.fetchLocation(\n              //   this.state.selectedLocation.venueName,\n              //   this.state.selectedLocation.buildingName\n              // );\n            });\n          }\n        }\n      });\n    };\n\n    this.nearLocation = distList => {\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n\n        if (tmp > highest) highest = tmp;\n      }\n\n      return {\n        lowest,\n        nearLocation\n      };\n    };\n\n    this.euclideanDistance = (p1, p2) => {\n      var R = 6378137; // Earth’s mean radius in meter\n\n      var dLat = this.rad(p2[0] - p1[0]);\n      var dLong = this.rad(p2[1] - p1[1]);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.rad(p1[0])) * Math.cos(this.rad(p2[0])) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      var d = R * c / 1000;\n      p2.distance = d;\n      return p2; // returns the distance in km\n    };\n\n    this.rad = function (x) {\n      return x * Math.PI / 180;\n    };\n\n    this.getDistance = (p1, p2) => {\n      let data = {\n        srcLat: p2.coordinates[0],\n        srcLng: p2.coordinates[1],\n        dstLat: p1[0],\n        dstLng: p1[1]\n      }; // this.props.osmRoutes(data,()=>{\n      // })\n\n      let me = this;\n      const map = me.leafletMap.leafletElement;\n      var routeControl = L.Routing.control({\n        waypoints: [L.latLng(p1[0], p1[1]), L.latLng(p2.coordinates[0], p2.coordinates[1])],\n        routeWhileDragging: true,\n        show: false,\n        showAlternatives: false,\n        routeLine: false,\n        createMarker: function (p1, p2) {}\n      }).addTo(map);\n      return new Promise((resolve, reject) => {\n        routeControl.on('routesfound', e => {\n          var routes = e.routes;\n          var summary = routes[0].summary;\n          p2.distance = summary.totalDistance / 1000;\n          this.distanceList.push(p2);\n          resolve(p2); // return {p2}\n        });\n      });\n    };\n\n    this.setNavigation = data => {\n      // this.props.androidNavigation(data, () => {\n      // })\n      this.props.getAllBuildingElements({\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.selectedBuilding\n      }, () => {\n        let nodes = this.props.navigationInfo;\n        this.grids_all = [];\n        let lists = [];\n        let num_vert = 0;\n        let fc = new Map();\n\n        for (let i = 0; i < nodes.length; i++) {\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            num_vert++;\n            var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n\n            if (fc.has(v) === false) {\n              fc.set(v, [val]);\n            } else {\n              fc.get(v).push(val);\n            }\n          }\n        }\n\n        this.graph = new Graph(num_vert + 2);\n\n        for (let i = 0; i < nodes.length; i++) {\n          var sel = nodes[i].properties;\n          lists.push(sel);\n\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n            this.graph.addVertex(val);\n          }\n\n          if (nodes[i].properties.floorElement === \"Floor\") {\n            if (nodes[i].properties.length == 8) {\n              var v = nodes[i].properties.frConn[0].split(\",\");\n              var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n              var len = v.length / 2;\n\n              if (v.length % 2 === 0) {\n                for (var j = 0; j < v.length; j = j + 2) {\n                  var val = parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) + parseInt(v[j]);\n                  var vert1 = nodes[i].properties.floor + \",\" + val;\n\n                  for (var k = j + 2; k < v.length; k = k + 2) {\n                    val = parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) + parseInt(v[k]);\n                    var vert2 = nodes[i].properties.floor + \",\" + val;\n                    this.graph.addEdge(vert1, vert2, flrmatrix[len * (j / 2) + k / 2], true);\n                  }\n                }\n              } else {}\n            }\n\n            this.grids_all.push(nodes[i]);\n          }\n        }\n\n        let getKeys = fc.keys();\n\n        for (let i of getKeys) {\n          var get_values = fc.get(i);\n          var cnt = 0;\n          var prev = null;\n\n          for (var j of get_values) {\n            if (cnt > 0) {\n              this.graph.addEdge(prev, j, 0, true);\n              prev = j;\n            }\n\n            if (cnt === 0) {\n              prev = j;\n            }\n\n            cnt++;\n          }\n        } // if(this.state.srcfloor === this.state.dstfloor){\n\n\n        console.log(\"graph\", this.graph);\n        this.setState({\n          // canvasWidth: cvWidth,\n          // canvasHeight: height_of_canvas,\n          list: lists\n        }); // }\n      });\n    };\n\n    this.toggle = (type, value) => event => {\n      this.setState(state => {\n        return {\n          [type]: value\n        };\n      });\n    };\n\n    this.findFloor = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (array[i].type) {\n            if (array[i].geomtery.type === \"Polygon\") {\n              if (array[i].properties.floor === key) {\n                return i;\n              }\n            }\n          }\n\n          if (array[i].floor === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n      let {\n        scale\n      } = this.state;\n\n      if (color === \"red\") {\n        let srcDiv = document.getElementById(\"srcImage\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n      } else if (color === \"yellow\") {\n        let lift = document.getElementById(\"lift\");\n        let stairs = document.getElementById(\"stairs\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        var rot = Math.PI / 2 * 3;\n        var x = pos_x;\n        var y = pos_y;\n        var step = Math.PI / 5;\n        let frConnType = \"\";\n        let data = this.props.navigationInfo.map(r => {\n          return r.properties;\n        });\n\n        for (let k = 0; k < data.length; k++) {\n          if (data[k].node === i) {\n            frConnType = data[k].type;\n          }\n        }\n\n        if (frConnType === \"Stairs\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n        } else if (frConnType === \"Lift\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n        }\n      } else if (color === \"green\") {\n        let dstDiv = document.getElementById(\"dstImage\");\n        let {\n          scale\n        } = this.state;\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n      }\n    };\n\n    this.color_canvas = (i, place, color) => {\n      let srcDiv = document.getElementById(\"srcImage\");\n      let dstDiv = document.getElementById(\"dstImage\");\n\n      if (place === \"srcmap\") {\n        let {\n          srcfloorL,\n          scale\n        } = this.state;\n        var canvas = document.getElementById(\"myCanvassrc\");\n        var context = canvas.getContext(\"2d\"); // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n        // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n        var wrh = this.state.srcfloorL / this.state.srcfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx = newWidth / this.state.srcfloorL;\n        let gpy = newHeight / this.state.srcfloorB;\n        var posX = gpx * (i % srcfloorL);\n        var posY = gpy * parseInt(i / srcfloorL);\n        var halfScale = scale / 2;\n        posX = posX + halfScale;\n        posY = posY + halfScale;\n\n        if (color === \"green\") {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n        } else if (color === \"#bdbdbd\") {\n          let {\n            dstfloorL,\n            scale\n          } = this.state;\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.fillStyle = color;\n          context.globalAlpha = 1;\n          context.fillRect(posX, posY, scale, scale);\n        } else {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(srcDiv, posX - 9, posY, 15, 15);\n        }\n      } else {\n        let {\n          dstfloorL,\n          scale\n        } = this.state;\n        let canvas = document.getElementById(\"myCanvasdst\");\n        let context = canvas.getContext(\"2d\");\n        let posX = scale * (i % dstfloorL);\n        let posY = scale * parseInt(i / dstfloorL);\n        context.fillStyle = color;\n        context.fillRect(posX, posY, scale, scale);\n      }\n    };\n\n    this.find = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.find_fl = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key && array[i].floor == \"floorconnection\") {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.handleSubmit = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal,\n        dstfloorL,\n        dstfloorB\n      } = this.state;\n\n      if (srcVal != null && dstVal != null) {\n        var divimg = document.getElementById(\"mydiv1\");\n        var divcan = document.getElementById(\"mydiv\");\n        var len = divimg.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divimg.childNodes[0].remove();\n        }\n\n        len = divcan.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divcan.childNodes[0].remove();\n        }\n\n        if (srcfloor === dstfloor) {\n          var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n          let ratio = cvWidth / dstfloorL;\n          let height_of_canvas = ratio * dstfloorB;\n          let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n          this.setState({\n            samefloor: true,\n            scale: factor\n          });\n          var img1 = new Image();\n          var img = document.getElementById(\"myImage\");\n          img1.src = img.src;\n          img1.hidden = true;\n          var color_canvas = this.color_canvas;\n          var me = this;\n          var dest_x = this.state.dstVal % this.state.dstfloorL;\n          var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n          let imgDiv = document.getElementById(\"myImage\");\n          this.imgDiv = imgDiv;\n          let angle = 0; // status of the pointer(s)\n\n          let pointerangle;\n          var canvas = window.d3.select(\"canvas\").call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", zoom)),\n              context = canvas.node().getContext(\"2d\"),\n              width = canvas.property(\"width\"),\n              height = canvas.property(\"height\");\n          var active = window.d3.select(null);\n          var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n          var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n\n          function zoom() {\n            me.setState({\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            }, () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            });\n          }\n\n          function draw() {\n            if (active.node() === this) return reset();\n            active.classed(\"active\", false);\n            active = window.d3.select(this).classed(\"active\", true);\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            context.rotate(angle);\n            context.globalAlpha = 0.5;\n            context.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight); // me.loadNonwalkable(\"myCanvassrc\")\n\n            me.callwhile(me.state.srcfloor, me.state.srcVal, me.state.srcfloorL, me.state.srcfloorB, dest_x, dest_y, true, \"myCanvassrc\");\n            color_canvas(srcVal, \"srcmap\", \"red\");\n            color_canvas(dstVal, \"srcmap\", \"green\");\n          }\n\n          function reset() {\n            active.classed(\"active\", false);\n            active = window.d3.select(null);\n            canvas.transition().duration(750).call(zoom1.transform, initialTransform);\n          }\n\n          function timer(ms) {\n            return new Promise(res => setTimeout(res, ms));\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY); // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n\n          img1.onload = function () {\n            draw();\n            zoomTo();\n          };\n        } else {\n          this.setState({\n            samefloor: false,\n            buildingView: true\n          });\n          this.findpath();\n        }\n      } else {}\n    };\n\n    this.loadNonwalkable = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData = navInfo.filter(r => {\n        return r.floor === srcfloor;\n      });\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpath(start, nodes[j]);\n          this.color_canvas(start, \"srcmap\", \"#bdbdbd\");\n          start = nodes[j];\n        }\n\n        this.color_canvas(nodes[0], \"srcmap\", \"#bdbdbd\");\n      }\n    };\n\n    this.loadMultiFloorNonwalkable = id => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData;\n\n      if (id === \" canvas0\") {\n        floorData = navInfo.filter(r => {\n          return r.floor === srcfloor;\n        });\n      } else {\n        floorData = navInfo.filter(r => {\n          return r.floor === dstfloor;\n        });\n      }\n\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpathMulti(start, nodes[j], id); // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n\n          start = nodes[j];\n        } // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n\n      }\n    };\n\n    this.oldpath = (x, y) => {\n      // x = coord_val  y=coord_val in normal\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else {\n        g = dstfloorL * e + f;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n        this.oldpath(g, x);\n        this.oldpath(g, y);\n      }\n    };\n\n    this.color = (i, color, canvasid) => {\n      let posX, posY, gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      } else {\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);\n    };\n\n    this.oldpathMulti = (x, y, id) => {\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color(g, \"#bdbdbd\", id);\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color(g, \"#bdbdbd\", id);\n      } else {\n        g = dstfloorL * e + f;\n        this.color(g, \"#bdbdbd\", id);\n        this.oldpathMulti(g, x, id);\n        this.oldpathMulti(g, y, id);\n      }\n    };\n\n    this.interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n      let resultpath = [];\n\n      if (turningPointsPath.length === 1) {\n        resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n        return resultpath;\n      }\n\n      for (let i = 0; i < turningPointsPath.length - 1; i++) {\n        let points = this.interpolatePoints(turningPointsPath[i], turningPointsPath[i + 1], seperationGap, gpx, gpy);\n\n        for (let k = 0; k < points.length; k++) {\n          resultpath.push(points[k]);\n        } // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n\n      }\n\n      return resultpath;\n    };\n\n    this.simplifyPath = (points, tolerance) => {\n      // helper classes\n      var Vector = function (x, y) {\n        this.x = x;\n        this.y = y;\n      };\n\n      var Line = function (p1, p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n\n        this.distanceToPoint = function (point) {\n          // slope\n          var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n              // y offset\n          b = this.p1.y - m * this.p1.x,\n              d = []; // distance to the linear equation\n\n          d.push(Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)); // distance to p1\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2))); // distance to p2\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2))); // return the smallest distance\n\n          return d.sort(function (a, b) {\n            return a - b; //causes an array to be sorted numerically and ascending\n          })[0];\n        };\n      };\n\n      var douglasPeucker = function (points, tolerance) {\n        if (points.length <= 2) {\n          return [points[0]];\n        }\n\n        var returnPoints = [],\n            // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n            // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n            maxDistanceIndex = 0,\n            p;\n\n        for (var i = 1; i <= points.length - 2; i++) {\n          var distance = line.distanceToPoint(points[i]);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxDistanceIndex = i;\n          }\n        } // check if the max distance is greater than our tollerance allows\n\n\n        if (maxDistance >= tolerance) {\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true); // include this point in the output\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)); // returnPoints.push( points[maxDistanceIndex] );\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(maxDistanceIndex, points.length), tolerance));\n        } else {\n          // ditching this point\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true);\n          returnPoints = [points[0]];\n        }\n\n        return returnPoints;\n      };\n\n      var arr = douglasPeucker(points, tolerance); // always have to push the very last point on so it doesn't get left off\n\n      arr.push(points[points.length - 1]);\n      return arr;\n    };\n\n    this.find_angle = (p0, p1, c) => {\n      var p0c = {\n        x: c.x - p0.x,\n        y: c.y - p0.y\n      }; // p0->c (b)\n\n      var cp1 = {\n        x: p1.x - c.x,\n        y: p1.y - c.y\n      }; // p1->c (a)\n      // {\n      // x: refinedPoints[currentRPoint].x,\n      // y: refinedPoints[currentRPoint].y + 1\n      // },\n      // refinedPoints[currentRPoint + 1],\n      // refinedPoints[currentRPoint]\n\n      return Math.atan2(cp1.y * p0c.x - cp1.x * p0c.y, p0c.x * cp1.x + p0c.y * cp1.y) * 180 / Math.PI;\n    };\n\n    this.findDirectionword = angle => {\n      if (angle >= 75 && angle <= 105) return \"Turn Right\";\n      if (angle <= -75 && angle >= -105) return \"Turn Left\";\n      if (angle >= 165 && angle <= 180 || angle <= -165 && angle >= -180) return \"Go Straight\";\n\n      if (angle < 0) {\n        if (Math.round((360 + angle) / 30) === 9) {\n          return \"Turn Left\";\n        } // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n        //   return (\"Go Straight\")\n        // }\n        // return (\"O' Clock\", {\n        //   angle: Math.abs(Math.round((360 + angle) / 30))\n        // });\n\n\n        return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n      }\n\n      if (Math.floor(angle / 30) === 3) return \"Turn Right\"; // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return this.props.t(\"Go Straight\")\n      // }\n      // return this.props.t(\"O' Clock\", {\n      //   angle: Math.abs(Math.round(angle / 30))\n      // });\n\n      return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n    };\n\n    this.findWord = angle => {\n      if (angle >= 75 && angle <= 105) return \"Turn Right\";\n      if (angle <= -75 && angle >= -105) return \"Turn Left\";\n      if (angle >= 165 && angle <= 180 || angle <= -165 && angle >= -180) return \"Go Straight\";\n\n      if (angle < 0) {\n        if (Math.round((360 + angle) / 30) === 9) {\n          return \"Turn Left\";\n        }\n\n        return \"Turn left\"; //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n      }\n\n      if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n      return \"Turn right\"; // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n    };\n\n    this.findErrorInAngle = angle => {\n      if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n      return angle - Math.round(angle / 30) * 30;\n    };\n\n    this.findDirectionAbbreviation = angle => {\n      if (angle > 0) return \"Right\";\n      return \"Left\";\n    };\n\n    this.findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n      //length of refined and non refined paths\n      var nRefined = refinedPoints.length;\n      var nNonRefined = nonRefinedPoints.length; //converting the mapElements to ordered map for ease of access\n\n      var ElementMap = new Map();\n      var includedSet = new Set();\n      var word; //for iteration purpose\n\n      var currentNRPoint = 0;\n      var currentRPoint = 0;\n      var flagList = [];\n      var i = 0;\n      var j = 0; //radius defines what range to cover in a path\n\n      var radius = 3;\n      let pathTuning = []; //adding the elements to map\n\n      for (i = 0; i < mapElements.length; i++) {\n        let props = mapElements[i].properties;\n\n        if (props.floorElement === \"Rooms\") {\n          if (props.floor === floor && props.roomName !== \"undefined\" && props.coordinates !== undefined) {\n            Object.keys(props).map(id => {\n              if (id === 'roomName') {\n                props[`name`] = [...props[id]].join('');\n                delete props[id];\n              }\n            });\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          }\n        } else if (props.floorElement === \"FloorConnection\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) {\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n          }\n        } else if (props.floorElement === \"Services\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else if (props.floorElement === \"RestRooms\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else {}\n      } //finding the indices of the\n\n\n      while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n        if (nonRefinedPoints[currentNRPoint][0] === refinedPoints[currentRPoint].x && nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y) {\n          flagList.push(currentNRPoint);\n          currentRPoint++;\n        }\n\n        currentNRPoint++;\n      } // Generating the direction and elaborated results\n\n\n      var DirectionResults = [];\n      var ElaboratedResults = []; //entry point insertion to the list\n\n      DirectionResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      ElaboratedResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n      includedSet.add(refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y); //iterate and /finding the desired results\n\n      var error = 0;\n\n      for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n        var angle = 0;\n        var coordinates; // this.actualAngle = 155\n\n        if (currentRPoint === 0) {\n          angle = this.find_angle({\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          }, refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n          let path_angle = angle;\n          let floorangle = this.state.floorAngle;\n          let diff = 360 - floorangle; // let CurrentDirection = 60;\n\n          let CurrentDirection = this.actualAngle; // rotateDirection\n\n          this.setState({\n            pathAngle: path_angle\n          });\n          let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n          angle = gn;\n        } else angle = this.find_angle(refinedPoints[currentRPoint - 1], refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n\n        angle = angle + error;\n        error = this.findErrorInAngle(angle);\n        let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint]);\n        let base = Math.cos(angle) * hypo;\n        let height = Math.sin(angle) * hypo;\n        this.forwardStep = parseInt(Math.abs(height));\n        this.lastStep = parseInt(Math.abs(base));\n        let steps = parseInt(this.forwardStep + hypo);\n\n        if (currentRPoint === nRefined - 2) {\n          word = this.findDirectionword(angle);\n          DirectionResults.push(word);\n          DirectionResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\");\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          break;\n        }\n\n        if (hypo <= 6) {\n          word = this.findWord(angle);\n\n          if (word.includes(\"Turn 0 O' Clock\")) {\n            word = \"Go straight\";\n          }\n\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n        } else {\n          word = this.findDirectionword(angle); // if(word.includes(\"Turn 0 O' Clock\") ){\n          //   word = \"Go straight\"\n          // }\n\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          let step = parseInt(Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])));\n          DirectionResults.push(word);\n          DirectionResults.push(\" Move \" + step + \" steps forward\");\n        } //this part of code handles the intermediate importatnt rooms\n\n\n        var begin = flagList[currentRPoint] + 1;\n        var end = flagList[currentRPoint + 1];\n\n        while (begin < end) {\n          var currpoint = nonRefinedPoints[begin];\n\n          for (i = Math.max(0, currpoint[0] - radius); i < currpoint[0] + radius; i++) {\n            for (j = Math.max(0, currpoint[1] - radius); j < currpoint[1] + radius; j++) {\n              if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n                var tempAngle = this.find_angle({\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                }, {\n                  x: i,\n                  y: j\n                }, {\n                  x: nonRefinedPoints[begin][0],\n                  y: nonRefinedPoints[begin][1]\n                });\n                ElaboratedResults.push(ElementMap.get(i + \"@\" + j).roomName + \" on your \" + this.findDirectionAbbreviation(tempAngle));\n                includedSet.add(i + \"@\" + j);\n              }\n            }\n          }\n\n          begin++;\n        }\n      }\n\n      let elem = ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y);\n\n      if (elem.type === \"Rest Rooms\") {\n        let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`;\n        DirectionResults.push(\"You will reach \" + name);\n      } else if (elem.type === \"Drinking Water | Non Drinking\") {\n        let name = `Drinking Water Point (${elem.floor} Floor)`;\n        DirectionResults.push(\"You will reach \" + name);\n      } else {\n        DirectionResults.push(\"You will reach \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name);\n      }\n\n      ElaboratedResults.push(\"You have reached \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name);\n      let resultMap = DirectionResults.map(r => {\n        return {\n          instruction: r,\n          floor: floor\n        };\n      });\n      this.pathTune = pathTuning;\n      resultMap.forEach(element => {\n        this.setState(prevState => ({\n          pathFloor: [...prevState.pathFloor, element]\n        }));\n      });\n      let step = DirectionResults[0];\n\n      if (this.state.srcfloor === this.state.dstfloor) {\n        if (this.state.zoom === false) {\n          this.setState(prevState => ({\n            pathArray: [...prevState.pathArray, DirectionResults],\n            srtdFlr: [...prevState.srtdFlr, floor],\n            instructionReady: true\n          }), () => {\n            let flrArry = [this.state.srcfloor, this.state.dstfloor];\n\n            if (this.state.pathArray.length === 2) {\n              for (let k = 0; k < flrArry.length; k++) {\n                if (this.state.srtdFlr[k] === flrArry[k]) {\n                  const merge3 = this.state.pathArray.flat(1);\n                  this.setState({\n                    pathCaption: merge3\n                  });\n                }\n              }\n            } else {\n              for (let k = 0; k < DirectionResults.length; k++) {\n                this.setState(prevState => ({\n                  pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n                }), () => {\n                  let instruction = this.filterInstruction();\n                  this.setState({\n                    pathCaption: instruction\n                  }); // console.log(\"instructions\",instruction,this.state.pathCaption)\n                });\n              }\n            }\n          });\n        }\n      } else {\n        if (this.state.srcfloor === floor) {\n          this.setState({\n            firstFlrInstruction: DirectionResults,\n            firstFlr: floor,\n            currentFloor: floor // instructionReady:true\n\n          });\n        } else {\n          this.setState({\n            secondFlrInstruction: DirectionResults,\n            secondFlr: floor,\n            instructionReady: true\n          });\n        }\n      }\n    };\n\n    this.calculatePath = (path_angle, diff, CurrentDirection) => {\n      let pathGN, rotateDirection, path_angleN;\n\n      if (path_angle >= 0 && path_angle < 106) {\n        pathGN = 360 - (diff - path_angle);\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle > 105 && path_angle <= 180) {\n        pathGN = path_angle - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle <= -1 && path_angle >= -180) {\n        path_angleN = 180 + path_angle;\n        pathGN = path_angleN + 180 - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      }\n\n      return rotateDirection;\n    };\n\n    this.drawerToggleClickHandler = () => {\n      this.setState(prevState => {\n        return {\n          sideDrawerOpen: !prevState.sideDrawerOpen\n        };\n      });\n    };\n\n    this.backdropClickHandler = () => {\n      this.setState({\n        sideDrawerOpen: false\n      });\n    };\n\n    this.incCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale < 30) {\n        this.setState({\n          scale: scale + 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.decCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale > 2) {\n        this.setState({\n          scale: scale - 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.handleDstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      if (e.length > 0) {\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            resp = `${e[0].roomName}(${e[0].floor})`;\n\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].name}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\n          } else {}\n        }\n\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState({\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.dstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type} Washroom (${e.floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.handleSrcChange = e => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName ? navInfo[i].properties.roomName : navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data); // var srcBar = document.getElementById(\"src-bar\");\n      // var navHeight = document.getElementById(\"nav-height\");\n      // var element = document.getElementById(\"myCanvassrc\");\n      // var topPos = element.getBoundingClientRect().top;\n      // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n      // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n      // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n      // // image is smaller than the canvas so no need to resize\n      // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n      // // return;\n      // // Figure out the ratio\n      // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n      // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n      // // use whichever multiplier is smaller\n      // let ratio = ratioX < ratioY ? ratioX : ratioY;\n      // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n      // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        }); // setTimeout(() => {\n\n        this.handleSubmit(); // }, \"2000\");\n      });\n    };\n\n    this.srcChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onDstSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        dstSuggestions: this.getDstSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onDstSuggestionsClearRequested = () => {\n      this.setState({\n        dstSuggestions: []\n      });\n    };\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getDstSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getSuggestionValue = suggestion => {\n      this.srcChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.getDstSuggestionValue = suggestion => {\n      this.dstChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.renderSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3144,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.renderDstSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3159,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSrcChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        dstValue: newValue\n      });\n    };\n\n    this.nvgtSrcBld = () => {\n      let {\n        tmpSrcLocation\n      } = this.state;\n      let e = [tmpSrcLocation];\n      this.fetchSrcBldLocation(e, tmpSrcLocation.venueName, tmpSrcLocation.buildingName, \"srcBuildingLocation\", k => {\n        this.handleDstChange(k);\n      });\n    };\n\n    this.nvgtDstBld = () => {\n      let {\n        tmpDstLocation\n      } = this.state;\n      let e = [tmpDstLocation];\n      this.fetchDstBldLocation(e, tmpDstLocation.venueName, tmpDstLocation.buildingName, \"dstBuildingLocation\", k => {\n        this.handleDstChange(e);\n      });\n    };\n\n    this.fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              this.srcBldDstPointChange(e, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              let props = [navInfo[i].properties];\n              this.srcBldDstPointChange(props, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.srcBldDstPointChange = (e, cb) => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        });\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      });\n      cb();\n    };\n\n    this.navigateNext = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[0].style.display = \"none\";\n      div[1].style.display = \"block\";\n      this.setState({\n        next: false,\n        currentFloor: this.state.dstfloor,\n        currentStep: 0\n      });\n    };\n\n    this.navigatePrevious = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[1].style.display = \"none\";\n      div[0].style.display = \"block\";\n      this.setState({\n        next: true,\n        currentFloor: this.state.srcfloor,\n        currentStep: 0\n      });\n    };\n\n    this.handleBuildingView = () => {\n      this.setState({\n        showInstructions: false\n      });\n    };\n\n    this.previousButton = () => {\n      let currentStep = this.state.currentStep;\n\n      if (this.state.srcfloor !== this.state.dstfloor) {\n        let instructionSet = this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction; // if (currentStep < instructionSet.length) {\n        //   this.multifloorNext(instructionSet);\n        // }\n\n        if (currentStep !== 0) {\n          if (currentStep < instructionSet.length) {\n            this.multifloorPrev(instructionSet);\n          }\n        }\n      } else {\n        if (currentStep !== 0) {\n          if (currentStep < this.state.pathCaption.length) {\n            this._prev();\n          }\n        }\n      }\n\n      return null;\n    };\n\n    this.nextButton = () => {\n      let currentStep = this.state.currentStep;\n\n      if (this.state.srcfloor !== this.state.dstfloor) {\n        let instructionSet = this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction;\n\n        if (currentStep < instructionSet.length) {\n          this.multifloorNext(instructionSet);\n        }\n      } else {\n        if (currentStep < this.state.pathCaption.length) {\n          this._next();\n        }\n      }\n\n      return null;\n    };\n\n    this._next = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= this.state.pathCaption.length - 1 ? this.state.pathCaption.length : currentStep + 1;\n\n      if (this.state.pathCaption[currentStep]) {\n        let step = this.state.pathCaption[currentStep];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n      } // if (\n      //   this.state.pathFloor[currentStep] !== undefined &&\n      //   this.state.pathFloor[currentStep].floor !==\n      //     this.state.pathFloor[currentStep - 1].floor\n      // ) {\n      //   this.navigateNext();\n      // }\n\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this.multifloorNext = instructionSet => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= instructionSet.length - 1 ? instructionSet.length : currentStep + 1;\n\n      if (instructionSet[currentStep]) {\n        let step = instructionSet[currentStep];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n      }\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this.multifloorPrev = instructionSet => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n      if (this.state.pathFloor[currentStep] !== undefined) {\n        let step = instructionSet[currentStep];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n      }\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this._prev = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n      if (this.state.pathFloor[currentStep] !== undefined) {\n        let step = this.state.pathCaption[currentStep];\n        console.log(\"step\", step);\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter); // if (\n        //   this.state.pathFloor[currentStep + 1].floor !==\n        //   this.state.pathFloor[currentStep].floor\n        // ) {\n        //   let step = this.state.pathCaption[currentStep-1];\n        //   var utter = new window.SpeechSynthesisUtterance(step);\n        //   window.speechSynthesis.cancel();\n        //   window.speechSynthesis.speak(utter);\n        //   // this.navigatePrevious();\n        // }\n      } else {}\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this.playInstruction = pause => {\n      var synth = window.speechSynthesis;\n      synth.cancel();\n\n      if (pause === true) {\n        synth.pause();\n      } else {\n        synth.resume();\n      } // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n      // synth.speak(utterance);\n      // synth.resume()\n\n\n      let instruction = this.filterInstruction();\n      instruction.forEach(r => {\n        var utterance1 = new SpeechSynthesisUtterance(r);\n        synth.speak(utterance1);\n      });\n    };\n\n    this.filterInstruction = () => {\n      var instructions = [];\n      var stepsCount = [];\n      let instruction;\n\n      if (this.state.srcfloor === this.state.dstfloor) {\n        instruction = this.state.pathCaption;\n      } else {\n        instruction = this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction;\n      }\n\n      instructions = instruction && instruction.map((r, i) => {\n        if (r.includes(\"right\") || r.includes(\"Right\")) {\n          return r;\n        } else if (r.includes(\"left\") || r.includes(\"Left\")) {\n          return r;\n        } else if (r.includes(\"forward\")) {\n          console.log(\"'r\", r);\n          let theNum = r.match(/\\d+/)[0];\n          stepsCount.push(parseInt(theNum));\n          return r;\n        } else if (r.includes(\"Turn 1 O' Clock\") || r.includes(\"Turn 2 O' Clock\") || r.includes(\"Turn 3 O' Clock\")) {\n          return 'Turn slight right';\n        } else if (r.includes(\"Turn 4 O' Clock\") || r.includes(\"Turn 5 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 7 O' Clock\") || r.includes(\"Turn 8 O' Clock\") || r.includes(\"Turn 9 O' Clock\")) {\n          return 'turn slight left';\n        } else if (r.includes(\"Turn 10 O' Clock\") || r.includes(\"Turn 11 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 6 O' Clock\")) {\n          return 'Turn back';\n        } else if (r.includes(\"You are at\")) {\n          return r;\n        } else if (r.includes(\"reached\")) {\n          return r;\n        } else if (r.includes(\"Turn 0 O' Clock\") || r.includes(\"Turn 12 O' Clock\")) {\n          return null;\n        } else {\n          return r;\n        }\n      });\n      console.log(\"instrcutsion\", instruction);\n      var distance;\n\n      if (instructions) {\n        const add = arr => arr.reduce((a, b) => a + b, 0);\n\n        distance = add(stepsCount);\n        instructions = instructions.filter(el => {\n          return el != null;\n        });\n      } // instructions.splice(instructions.length-2, 1);\n\n\n      return instructions;\n    };\n\n    this.handleSourceLocation = vals => {\n      this.setState({\n        selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n        selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n        buildingView: false\n      }, () => {\n        this.props.androidNavigation({\n          venueName: this.state.selectedVenue,\n          buildingName: this.state.selectedBuilding\n        }, () => {});\n        this.fetchLocation(this.state.selectedVenue, this.state.selectedBuilding, \"srcBuildingLocation\");\n        this.fetchLocation(this.state.selectedVenue, this.state.selectedBuilding, \"dstBuildingLocation\");\n\n        if (this.state.dstName !== \"Select Destination\") {\n          this.handleSubmit();\n        } else {\n          this.setNavigation(this.state.selectedDstLocation);\n        }\n      });\n    };\n\n    this.state = {\n      center: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      currentPos: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      nearestPickupPoint: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Search within building\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: {\n        buildingName: \"Search from\",\n        venueName: \"Indoor maps\"\n      },\n      selectedDstLocation: {\n        buildingName: \"Search from\",\n        venueName: \"Indoor maps\"\n      },\n      srcBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      dstBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle: 0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom: false,\n      language: 'en',\n      visionType: 'vision',\n      height: '<5ft',\n      ageGroup: 'adult',\n      walkingType: 'walk',\n      pause: false,\n      firstFlrInstruction: [],\n      secondFlrInstruction: [],\n      firstFlr: '',\n      secondFlr: '',\n      currentFloor: '',\n      instructionReady: false,\n      selectedVenue: 'Select Venue',\n      selectedDestinationVenue: 'Select destination venue',\n      selectedBuilding: 'Select building',\n      selectedDestinationBuilding: 'Select destination building',\n      destinationActive: false,\n      open: false,\n      showMenu: false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.distanceList = [];\n  }\n\n  componentDidMount() {\n    // if (window.navigator.geolocation) {\n    //   navigator.geolocation.getCurrentPosition(success => {\n    let success = {\n      coords: {\n        latitude: 28.6139,\n        longitude: 77.209\n      }\n    };\n    let coordinates = [success.coords.latitude, success.coords.longitude];\n    this.props.getGpsLocation({\n      lat: success.coords.latitude,\n      lng: success.coords.longitude\n    }, () => {\n      this.getUserDetails();\n      var cvWidth = Math.max(document.getElementById(\"myCanvassrc\").clientWidth, window.innerWidth || 0);\n      var cvHeight = Math.max(document.getElementById(\"myCanvassrc\").clientHeight, window.innerHeight || 0);\n      var srcBar = document.getElementById(\"src-bar\");\n      var navHeight = document.getElementById(\"nav-height\");\n      var element = document.getElementById(\"myCanvassrc\");\n      var topPos = element.getBoundingClientRect().top;\n      let realHeight = cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n      this.setState({\n        // currentLocation: this.props.gpsLocation.display_name,\n        currentLocation: \"IIT Delhi\",\n        selectedVenue: \"IIT Delhi\",\n        // selectedVenue: this.props.gpsLocation.display_name,\n        canvasWidth: cvWidth,\n        canvasHeight: realHeight,\n        center: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        },\n        currentPos: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        }\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        let lat = success.coords.latitude;\n        let lng = success.coords.longitude;\n        map.flyTo(new L.LatLng(success.coords.latitude, success.coords.longitude), map.getZoom(), {\n          animate: true,\n          duration: 0.5\n        });\n      });\n    });\n    this.getVenueList(coordinates); //   });\n    // } else {\n    //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n    // }\n  } // componentDidMount(){\n  //  if (window.navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(success => {\n  //       let coordinates = [success.coords.latitude, success.coords.longitude];\n  //       this.getVenueList(coordinates);\n  //       this.props.getGpsLocation(\n  //         { lat: success.coords.latitude, lng: success.coords.longitude },\n  //         () => {\n  //           this.getUserDetails()\n  //           var cvWidth = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientWidth,\n  //             window.innerWidth || 0\n  //           );\n  //           var cvHeight = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientHeight,\n  //             window.innerHeight || 0\n  //           );\n  //           var srcBar = document.getElementById(\"src-bar\");\n  //           var navHeight = document.getElementById(\"nav-height\");\n  //           var element = document.getElementById(\"myCanvassrc\");\n  //           var topPos = element.getBoundingClientRect().top;\n  //           let realHeight =\n  //             cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n  //           this.setState(\n  //             {\n  //               currentLocation: this.props.gpsLocation.display_name,\n  //               // currentLocation: \"IIT Delhi\",\n  //               // selectedVenue:\"IIT\",\n  //               selectedVenue: this.props.gpsLocation.display_name,\n  //               canvasWidth: cvWidth,\n  //               canvasHeight: realHeight,\n  //               center: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               },\n  //               currentPos: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               }\n  //             },\n  //             () => {\n  //               const map = this.leafletMap.leafletElement;\n  //               let lat = success.coords.latitude;\n  //               let lng = success.coords.longitude;\n  //               map.flyTo(\n  //                 new L.LatLng(\n  //                   success.coords.latitude,\n  //                   success.coords.longitude\n  //                 ),\n  //                 map.getZoom(),\n  //                 {\n  //                   animate: true,\n  //                   duration: 0.5\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //       // this.getVenueList(coordinates);\n  //     });\n  //   } else {\n  //     // x.innerHTML = \"Geolocation is not supported by this browser.\";\n  //   }\n  // }\n\n\n  findpath() {\n    var srcvert = this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert = this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n    console.log(\"dtsr\", srcvert, dstvert, this.graph);\n\n    if (this.graph.hasvertex(srcvert)) {} else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor == this.state.srcfloor && nodes[i].properties.floorElement === \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert1\", vert);\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.srcfloor, this.state.srcVal, this.state.srcfloorL, this.state.srcfloorB, null, null, false, null);\n    }\n\n    if (this.graph.hasvertex(dstvert)) {} else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor === this.state.dstfloor && nodes[i].properties.floorElement == \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert2\", vert);\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.dstfloor, this.state.dstVal, this.state.dstfloorL, this.state.dstfloorB, null, null, false, null);\n    }\n\n    this.specialcallwhile(this.state.srcfloor, srcvert, this.state.dstfloor, dstvert);\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\", srcfloor, srcvert, dstfloor, dstvert);\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n        break;\n      }\n\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n        var neighbour = false;\n\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      console.log(\"list\", list);\n      let ans = new Map();\n\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    console.log(\"cnt, ans, count, clist, floorLlist\", cnt, ans, count, clist, floorLlist);\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n\n          let canvas = window.d3.select(\"#mydiv\").append(\"canvas\").attr(\"id\", \"canvas\" + ii).attr(\"style\", `border:1px solid;display:${dsp};`).attr(\"width\", this.state.canvasWidth).attr(\"height\", this.state.canvasHeight).call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", multiCanvasZoom));\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n\n          img1.onload = function () {\n            multiCanvas();\n            zoomTo();\n          };\n\n          function multiCanvasZoom() {\n            me.setState({\n              zoom: true // pathCaption: []\n\n            }, () => {\n              var transform = window.d3.event.transform;\n              ctx.save();\n              ctx.clearRect(0, 0, width, height);\n              ctx.translate(transform.x, transform.y);\n              ctx.scale(transform.k, transform.k);\n              loaded = false;\n              multiCanvas();\n              ctx.restore();\n            });\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n\n              ctx.globalAlpha = 0.5;\n              ctx.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight);\n              var id = \"canvas\" + ii; // me.loadMultiFloorNonwalkable(id)\n\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\", i, get_val[j], m, n, dest_x, dest_y, true, id);\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n\n              var node_count = 0;\n\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n\n                node_count++;\n              }\n\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY); // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n\n    for (let i = 0; i < m; i++) {\n      var row = [],\n          row1 = [],\n          row3 = [],\n          row4 = [];\n\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n\n      this.visited[minleave[0]][minleave[1]] = 1;\n\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (this.visited[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])] == 1) {} else {\n            check = false;\n          }\n        }\n\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(vert, this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])], true);\n          }\n\n          this.reset_var();\n          break;\n        }\n      }\n\n      this.leaves.splice(var_i, 1);\n\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (this.minimumcost[j][k] > this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k))) {\n                this.minimumcost[j][k] = this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k));\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][minleave[1]].concat([[j, k]]);\n                notthere = 1;\n\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (single == true) {\n      let {\n        scale\n      } = this.state;\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n      } else {\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n\n      let sp = this.shortestpath[dest_x][dest_y];\n      console.log(\"sp\", sp);\n      let mypoints = sp.map(r => {\n        return {\n          x: r[0],\n          y: r[1]\n        };\n      });\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      } // if (\n      //   this.state.srcBuildingLocation.venueName ===\n      //     this.state.dstBuildingLocation.venueName &&\n      //   this.state.srcBuildingLocation.buildingName ===\n      //     this.state.dstBuildingLocation.buildingName\n      // ) {\n      // if (this.state.zoom === false) {\n\n\n      if (canvasid === \"canvas0\" || \"myCanvassrc\") {\n        this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n      } else {\n        this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n      } // }\n      // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // } else if (this.state.dstBuildingLocation) {\n      //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // }\n\n\n      var rowX = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          x: row[0],\n          index: i\n        };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          y: row[1],\n          index: i\n        };\n      });\n      let minRowX = rowX.reduce((prev, current) => prev.x < current.x ? prev : current);\n      let maxRowX = rowX.reduce((prev, current) => prev.x > current.x ? prev : current);\n      let minRowY = rowY.reduce((prev, current) => prev.y < current.y ? prev : current);\n      let maxRowY = rowY.reduce((prev, current) => prev.y > current.y ? prev : current);\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      }; // var max = Math.max.apply(null, maxRow);\n      // for (let i = 0; i < refinedpaths.length; i = i +1) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * refinedpaths[i].x;\n      //   var pos_y = gpy * refinedpaths[i].y;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n        context.globalAlpha = 1;\n        context.beginPath();\n        var half_scale = scale / 2;\n        var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n        var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n        context.fill();\n        context.fillStyle = \"#2d9cdb\";\n        context.strokeStyle = \"#2d9cdb\";\n        context.stroke();\n      }\n\n      this.reset_var();\n    }\n  }\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({\n      x: parseInt(p1.x),\n      y: parseInt(p1.y)\n    });\n    let counter = seperationGap;\n\n    while (counter < d) {\n      let x = p1.x + counter / d * (p2.x - p1.x);\n      let y = p1.y + counter / d * (p2.y - p1.y);\n      result.push({\n        x: parseInt(x),\n        y: parseInt(y)\n      });\n      counter += 1 * seperationGap;\n    }\n\n    return result;\n  }\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n  /* NAVIGATION DRAWER */\n\n\n  render() {\n    var combineInstructions = [];\n\n    if (this.state.srcfloor === this.state.dstfloor) {\n      combineInstructions = this.state.pathCaption;\n    } else {\n      if (this.state.firstFlr === this.state.currentFloor) {\n        combineInstructions = this.state.firstFlrInstruction;\n      } else {\n        combineInstructions = this.state.secondFlrInstruction;\n      } // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n\n    }\n\n    let {\n      center,\n      currentPos\n    } = this.state;\n    let {\n      srcBuildingLocation,\n      dstBuildingLocation\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: !this.state.showInstructions,\n        children: /*#__PURE__*/_jsxDEV(Instructions, {\n          dstAddress: this.state.dstAddress,\n          globalTime: this.state.globalTime,\n          globalDistance: this.state.globalDistance,\n          currentLocation: this.state.currentLocation,\n          handleBuildingView: this.handleBuildingView,\n          instructionSet: combineInstructions,\n          buildingView: this.state.buildingView,\n          sourceLocation: this.state.currentLocation,\n          dstLocation: this.state.dstAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3617,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: this.state.showInstructions,\n        children: [!this.state.buildingView && !this.state.showStrtMenu && !this.state.showDstMenu ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"src-dst fixed-top\",\n            id: \"src-bar\" // style={{ marginTop: \"50px\" }}\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100  mx-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 p-0\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-nvgtn text-white\",\n                  onClick: () => {\n                    localStorage.setItem('cuurent-link', 'SELECT STARTING POINT');\n                    this.setState({\n                      showStrtMenu: true,\n                      showDstMenu: false,\n                      srcReadOnly: false\n                    }, () => {\n                      this.props.navContent('SELECT STARTING POINT', () => {});\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"float-left mt-2 mr-2\",\n                    src: \"/inclunav/assets/images/profile.svg\",\n                    alt: \"user location\",\n                    alt: \"current location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3657,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"strt-txt text-justify \",\n                    children: this.state.currentLocation\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3663,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3642,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3641,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3640,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mx-auto hr-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3670,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100  mx-auto mt-3\" // style={{marginTop:\"50px\"}}\n              ,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 p-0\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-nvgtn text-white\",\n                  onClick: () => {\n                    this.setState({\n                      showDstMenu: true,\n                      showStrtMenu: false,\n                      dstReadOnly: false\n                    }, () => {\n                      this.props.navContent('SELECT DESTINATION', () => {});\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"float-left mt-2 mr-2 my-auto\",\n                    src: \"/inclunav/assets/images/navigation.svg\",\n                    alt: \"select destination\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3689,\n                    columnNumber: 24\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"strt-txt text-justify \",\n                    children: this.state.dstAddress\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3694,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3675,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3674,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3671,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3635,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3634,\n          columnNumber: 13\n        }, this) : null, this.state.showStrtMenu ? /*#__PURE__*/_jsxDEV(SelectSource, {\n          srcName: this.state.srcName,\n          currentLocation: this.state.currentLocation,\n          selectedSrcLocation: this.state.selectedSrcLocation,\n          locationList: this.state.locationList,\n          srcReadOnly: this.state.srcReadOnly,\n          handleBlurr: () => {\n            this.setState({\n              srcReadOnly: !this.state.srcReadOnly\n            });\n          },\n          handleDstAct: () => {\n            this.setState({\n              destinationActive: true\n            });\n          },\n          srcFloorList: this.state.srcFloorList,\n          dstAddress: this.state.dstAddress,\n          showStrtMenu: () => {\n            this.setState({\n              showStrtMenu: false\n            });\n          },\n          destinationActive: this.state.destinationActive,\n          venueChange: val => {\n            this.setState({\n              selectedVenue: val,\n              selectedDestinationVenue: val,\n              destinationActive: false,\n              showMenu: true\n            }, () => {\n              this.getBuildingList(val);\n            });\n          },\n          selectedVenue: this.state.selectedVenue,\n          buildingList: this.state.buildingList,\n          showMenu: this.state.showMenu,\n          selectedBuilding: this.state.selectedBuilding,\n          buildingChange: vals => {\n            this.setState({\n              selectedBuilding: vals,\n              selectedDestinationBuilding: vals\n            }, () => {\n              this.handleSourceLocation();\n            });\n          },\n          venueList: this.state.venueList,\n          handleSelectSource: e => {\n            if (e.length > 0) {\n              this.setState({\n                tmpSrcLocation: e[0]\n              }, () => {\n                this.handleSrcChange(e);\n              });\n            }\n          },\n          handleSourceLocation: e => {\n            console.log(\"ee\", e);\n\n            if (e.length > 0) {\n              this.setState({\n                selectedSrcLocation: e[0],\n                selectedDstLocation: e[0],\n                buildingView: false,\n                selectedVenue: e[0].venueName,\n                selectedBuilding: e[0].buildingName\n              }, () => {\n                this.props.androidNavigation({\n                  venueName: e[0].venueName,\n                  buildingName: e[0].buildingName\n                }, () => {});\n                this.fetchLocation(e[0].venueName, e[0].buildingName, \"srcBuildingLocation\");\n                this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\");\n\n                if (this.state.dstName !== \"Select Destination\") {\n                  this.handleSubmit();\n                } else {\n                  this.setNavigation(this.state.selectedDstLocation);\n                }\n              });\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3706,\n          columnNumber: 17\n        }, this) : null, this.state.showDstMenu ? /*#__PURE__*/_jsxDEV(SelectDestination, {\n          dstName: this.state.dstName,\n          currentLocation: this.state.currentLocation,\n          selectedDstLocation: this.state.selectedDstLocation,\n          selectedDestination: this.state.selectedDestination,\n          locationList: this.state.locationList,\n          dstReadOnly: this.state.dstReadOnly,\n          handleBlurr: () => {\n            this.setState({\n              dstReadOnly: !this.state.dstReadOnly\n            });\n          },\n          dstFloorList: this.state.dstFloorList,\n          showDstMenu: () => {\n            this.setState({\n              showDstMenu: false\n            });\n          },\n          destinationActive: this.state.destinationActive,\n          venueChange: val => {\n            this.setState({\n              selectedDestinationVenue: val,\n              destinationActive: true,\n              showMenu: true\n            }, () => {\n              this.getBuildingList(val);\n            });\n          },\n          handleDstAct: () => {\n            this.setState({\n              destinationActive: true\n            });\n          },\n          selectedVenue: this.state.selectedDestinationVenue,\n          buildingList: this.state.buildingList,\n          selectedBuilding: this.state.selectedDestinationBuilding,\n          selBuild: this.state.selectedDestinationBuilding,\n          buildingChange: vals => {\n            this.setState({\n              selectedDestinationBuilding: vals\n            }, () => {\n              this.handleSourceLocation();\n            });\n          },\n          venueList: this.state.venueList,\n          handleSelectDestination: e => {\n            let resp = \"\";\n\n            if (e[0].floorElement === \"Rooms\") {\n              resp = `${e[0].roomName}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"FloorConnection\") {\n              resp = `${e[0].name}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"Services\") {\n              resp = `${e[0].type}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"RestRooms\") {\n              resp = `${e[0].type} Washroom (${e[0].floor})`;\n            } else {\n              resp = \"\";\n            }\n\n            this.setState({\n              tmpDstLocation: e[0],\n              dstName: e[0],\n              dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n              showDstMenu: false,\n              dstReadOnly: true,\n              destinationActive: false,\n              showMenu: false\n            }, () => {\n              if (srcBuildingLocation.venueName === dstBuildingLocation.venueName && srcBuildingLocation.buildingName === dstBuildingLocation.buildingName) {\n                this.handleDstChange(e);\n              }\n            });\n          },\n          handleSourceLocation: e => {\n            if (e.length > 0) {\n              let venueName = e[0].venueName;\n              let buildingName = e[0].buildingName;\n              let venue = this.state.srcBuildingLocation.venueName;\n              let building = this.state.srcBuildingLocation.buildingName;\n\n              if (!venue && !building) {\n                let data = {\n                  venueName,\n                  buildingName\n                };\n                let props;\n                this.props.androidNavigation({\n                  venueName: e[0].venueName,\n                  buildingName: e[0].buildingName\n                }, () => {});\n                this.setNavigation(data);\n                this.props.floorList(data, () => {\n                  this.props.getAllBuildingElements(data, () => {\n                    let navInfo = this.props.navigationInfo;\n\n                    for (let i = 0; i < navInfo.length; i++) {\n                      if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n                        props = navInfo[i].properties;\n                        var ind = this.findFloor(\"ground\", this.props.flrList.data);\n                        this.setState({\n                          srcName: props.roomName,\n                          srcfloor: \"ground\",\n                          srcVal: parseInt(props.node),\n                          srcfloorL: this.props.flrList.data[ind].floorL,\n                          srcfloorB: this.props.flrList.data[ind].floorB,\n                          imgName: this.props.flrList.data[ind].fileName,\n                          pathCaption: []\n                        }, () => {\n                          this.handleSubmit();\n                        });\n                      }\n                    }\n                  });\n                });\n              }\n\n              this.setState({\n                selectedDstLocation: e[0],\n                buildingView: false\n              }, () => {\n                this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\"); // if (\n                //   this.state.selectedSrcLocation.venueName ===\n                //     this.state.selectedDstLocation.venueName &&\n                //   this.state.selectedSrcLocation.buildingName ===\n                //     this.state.selectedDstLocation.buildingName\n                // ) {\n                //   this.setNavigation(this.state.selectedDstLocation);\n                // }\n\n                if (this.state.selectedVenue === this.state.selectedDestinationVenue && this.state.selectedBuilding === this.state.selectedDestinationBuilding) {\n                  this.setNavigation(this.state.selectedDstLocation);\n                }\n              });\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3802,\n          columnNumber: 17\n        }, this) : null, this.state.buildingView ? /*#__PURE__*/_jsxDEV(InstructionTab, {\n          pathCaption: combineInstructions,\n          currentStep: this.state.currentStep,\n          nextButton: () => this.nextButton(),\n          imgDiv: this.imgDiv\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3965,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          hidden: this.state.buildingView,\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            style: {\n              height: \"100vh\"\n            },\n            center: center,\n            zoom: this.state.zoomLevel,\n            ref: m => {\n              this.leafletMap = m;\n            },\n            onClick: this.handleClick,\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3982,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: this.state.currentPos,\n              draggable: true,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                position: this.state.currentPos,\n                children: [\"Current location:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n                  children: JSON.stringify(this.state.currentPos, null, 2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3988,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3986,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3985,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3973,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3972,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          hidden: !this.state.buildingView,\n          className: \"mt-1\",\n          style: {\n            height: \"100%\",\n            width: \"100%\",\n            overflow: \"scroll\"\n          },\n          children: [!this.state.samefloor ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group-vertical btn-info rounded  shadow mt-5\",\n            role: \"group\",\n            \"aria-label\": \"First group\",\n            style: {\n              position: \"fixed\",\n              zIndex: \"5\",\n              background: \"#56c9ad\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark text-white text-capitalize\",\n              onClick: this.navigatePrevious,\n              children: this.props.flrList.data.map((r, i) => {\n                if (this.state.srcfloor === r.floor) {\n                  return `L${i}`;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4005,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark text-white\",\n              onClick: this.navigateNext,\n              children: this.props.flrList.data.map((r, i) => {\n                if (this.state.dstfloor === r.floor) {\n                  return `L${i}`;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4016,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3999,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: \"100%\",\n              top: \"50px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"myImage\",\n              src: `${config.imgUrl}/${this.state.imgName}`,\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4030,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"srcImage\",\n              src: \"/inclunav/assets/images/source.svg\",\n              style: {\n                WebkitTransform: `rotate(20deg)`\n              },\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4036,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"dstImage\",\n              src: \"/inclunav/assets/images/destination.svg\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4043,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"stairs\",\n              src: \"/inclunav/assets/images/stair.png\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4049,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"lift\",\n              src: \"/inclunav/assets/images/lift.png\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4055,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"mydiv1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4061,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"canvaDiv\",\n              ref: \"canv\",\n              onScroll: this.handleScroll,\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                id: \"myCanvassrc\",\n                width: this.state.canvasWidth,\n                height: this.state.canvasHeight,\n                style: {\n                  position: \"absolute\"\n                },\n                hidden: !this.state.samefloor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4063,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4062,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"mydiv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4071,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4029,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3993,\n          columnNumber: 11\n        }, this), !this.state.instructionReady ? /*#__PURE__*/_jsxDEV(GlobalDetails, {\n          toggle: this.state.toggle,\n          dstName: this.state.dstName,\n          dstAddress: this.state.dstAddress,\n          globalDistance: this.state.globalDistance,\n          currentLocation: this.state.currentLocation,\n          dstBuildingLocation: this.state.dstBuildingLocation,\n          tmpDstLocation: this.state.tmpDstLocation,\n          destinationVenue: this.state.selectedDestinationVenue,\n          destinationBuilding: this.state.selectedDestinationBuilding,\n          dstfloor: this.state.dstfloor,\n          dstVal: this.state.dstVal,\n          stateToggle: () => {\n            this.setState({\n              toggle: !this.state.toggle\n            });\n          },\n          openModal: this.onOpenModal,\n          closeBuilding: () => {\n            this.setState({\n              buildingView: false\n            });\n          } // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n          ,\n          instructionSet: combineInstructions,\n          handleShowInstructions: () => {\n            this.setState({\n              showInstructions: true\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4075,\n          columnNumber: 13\n        }, this) // null\n        :\n        /*#__PURE__*/\n        _jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(NavigationDetails, {\n            toggle: this.state.toggle,\n            dstName: this.state.dstName,\n            dstAddress: this.state.dstAddress,\n            globalDistance: this.state.globalDistance,\n            currentLocation: this.state.currentLocation,\n            dstBuildingLocation: this.state.dstBuildingLocation,\n            stateToggle: () => {\n              this.setState({\n                toggle: !this.state.toggle\n              });\n            },\n            currentStep: this.state.currentStep,\n            nextButton: this.nextButton,\n            previousButton: this.previousButton,\n            instructionSet: this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction,\n            playInstruction: pause => {\n              this.playInstruction(pause);\n            },\n            closeBuilding: () => {\n              this.setState({\n                buildingView: false,\n                instructionReady: false,\n                zoom: false\n              });\n            },\n            handleShowInstructions: () => {\n              this.setState({\n                showInstructions: true\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3632,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3615,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile: state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation,\n    globalRoutes: state.osmRoutes,\n    pickupPoint: state.pickupPoints,\n    currentTab: state.navContent\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent\n})(Navigation);","map":{"version":3,"sources":["/home/home/navigation/src/components/dashboard/navigation/Navigation.js"],"names":["React","Map","MapContainer","Marker","Popup","TileLayer","L","config","connect","floorList","imgDetails","getAllBuildingElements","venueList","buildingList","getGpsLocation","androidNavigation","getUserPortfolio","osmRoutes","pickupPoints","navContent","Typeahead","Instructions","NavigationDetails","GlobalDetails","InstructionTab","SourceMenu","DestinationMenu","Menu","SelectSource","SelectDestination","Modal","customStyles","content","top","left","right","bottom","marginRight","transform","background","width","height","overlay","zIndex","center","lat","lng","Graph","constructor","noOfVertices","AdjList","Adjweights","addVertex","v","set","hasvertex","has","edges","get","addEdge","w","wt","undir","push","printGraph","get_keys","keys","i","get_values","val","conc","conc2","j","Navigation","Component","props","getUserDetails","id","localStorage","getItem","token","userProfile","success","clear","history","data","properties","setState","language","visionType","ageGroup","walkingType","navigationMode","fetchLocation","venueName","buildingName","point","flrListData","flrList","prevData","state","currentPos","floorAngle","parseInt","buildingOrientation","map","leafletMap","leafletElement","flyTo","LatLng","getZoom","animate","duration","nodes","navigationInfo","lists","length","sel","uniqueLists","Array","from","Set","o","floorElement","coordinates","find","a","freeBeacon","r","type","freeData","filter","el","sort","b","roomName","undefined","name","srcFloorList","me","srcLat","srcBuildingLocation","srcLng","fitBounds","latLngBounds","latLng","dstFloorList","zoomLevel","getVenueList","console","log","vnList","findNearVenue","dl","resp","getDistance","Promise","all","then","distList","arr","list","dt","k","venueDistance","distance","lowest","Number","POSITIVE_INFINITY","highest","NEGATIVE_INFINITY","tmp","nearLocation","listArr","locationList","d","sortedArr","quickSort","currentVenue","getBuildingList","address","dateCreated","liveStatus","organization","selectedLocation","currentBuilding","pivot","lesserVal","greaterVal","bldList","findNearBuilding","p","pickupLat","coordinate","parseFloat","pickupLng","dist","euclideanDistance","lower","nearestPickupPoint","p1","p2","R","dLat","rad","dLong","Math","sin","cos","c","atan2","sqrt","x","PI","dstLat","dstLng","routeControl","Routing","control","waypoints","routeWhileDragging","show","showAlternatives","routeLine","createMarker","addTo","resolve","reject","on","e","routes","summary","totalDistance","distanceList","setNavigation","selectedVenue","selectedBuilding","grids_all","num_vert","fc","floor","node","graph","frConn","split","flrmatrix","flr_dist_matrix","len","vert1","vert2","getKeys","cnt","prev","toggle","value","event","findFloor","key","array","geomtery","color_canvas_spl","canvasid","color","srcfloorL","scale","srcDiv","document","getElementById","canvas","context","getContext","wrh","dstfloorL","dstfloorB","newWidth","canvasWidth","newHeight","canvasHeight","gpx","gpy","srcfloorB","pos_x","pos_y","fillStyle","drawImage","lift","stairs","rot","y","step","frConnType","half_scale","dstDiv","color_canvas","place","posX","posY","halfScale","globalAlpha","fillRect","find_fl","handleSubmit","srcVal","srcfloor","dstfloor","dstVal","divimg","divcan","childNodes","elem","remove","cvWidth","clientWidth","ratio","height_of_canvas","factor","ceil","samefloor","img1","Image","img","src","hidden","dest_x","dest_y","imgDiv","angle","pointerangle","window","d3","select","call","zoom","scaleExtent","property","active","zoom1","initialTransform","zoomIdentity","translate","animation","pathFloor","pathArray","currentStep","save","clearRect","draw","restore","reset","classed","rotate","callwhile","transition","timer","ms","res","setTimeout","zoomTo","X","croppedRegion","maxX","minX","Y","maxY","minY","min","distX","distY","onload","buildingView","findpath","loadNonwalkable","navInfo","androidNav","floorData","polygons","clickedPoints","start","oldpath","loadMultiFloorNonwalkable","oldpathMulti","f","g","canvas1","context1","interpolatePath","turningPointsPath","seperationGap","resultpath","points","interpolatePoints","simplifyPath","tolerance","Vector","Line","distanceToPoint","m","abs","pow","douglasPeucker","returnPoints","line","maxDistance","maxDistanceIndex","concat","slice","find_angle","p0","p0c","cp1","findDirectionword","round","findWord","findErrorInAngle","findDirectionAbbreviation","findInstructions","nonRefinedPoints","refinedPoints","mapElements","nRefined","nNonRefined","ElementMap","includedSet","word","currentNRPoint","currentRPoint","flagList","radius","pathTuning","Object","join","replace","DirectionResults","ElaboratedResults","add","error","path_angle","floorangle","diff","CurrentDirection","actualAngle","pathAngle","gn","calculatePath","hypo","base","forwardStep","lastStep","steps","includes","begin","end","currpoint","max","tempAngle","washroomType","resultMap","instruction","pathTune","forEach","element","prevState","srtdFlr","instructionReady","flrArry","merge3","flat","pathCaption","filterInstruction","firstFlrInstruction","firstFlr","currentFloor","secondFlrInstruction","secondFlr","pathGN","rotateDirection","path_angleN","drawerToggleClickHandler","sideDrawerOpen","backdropClickHandler","incCanvas","decCanvas","handleDstChange","ind","dstName","floorL","floorB","imgName","fileName","showDstMenu","dstReadOnly","dstBuildingLocation","selectedDestinationVenue","selectedDestinationBuilding","dstChange","handleSrcChange","srcName","showStrtMenu","srcReadOnly","currentLocation","srcChange","onSuggestionsFetchRequested","suggestions","getSuggestions","onDstSuggestionsFetchRequested","dstSuggestions","getDstSuggestions","onSuggestionsClearRequested","onDstSuggestionsClearRequested","inputValue","trim","toLowerCase","inputLength","lang","getSuggestionValue","suggestion","getDstSuggestionValue","renderSuggestion","renderDstSuggestion","onChange","newValue","onSrcChange","dstValue","nvgtSrcBld","tmpSrcLocation","fetchSrcBldLocation","nvgtDstBld","tmpDstLocation","fetchDstBldLocation","cb","doorGroup","srcBldDstPointChange","selectedSrcLocation","navigateNext","div","children","style","display","next","navigatePrevious","handleBuildingView","showInstructions","previousButton","instructionSet","multifloorPrev","_prev","nextButton","multifloorNext","_next","utter","SpeechSynthesisUtterance","speechSynthesis","cancel","speak","playInstruction","pause","synth","resume","utterance1","instructions","stepsCount","theNum","match","reduce","handleSourceLocation","vals","selectedDstLocation","gpsLocation","buildingAddress","canvaslist","isLoading","sidebarLeft","selectedDestination","dstAddress","showDirections","srtdInstruction","globalDistance","globalTime","destinationActive","open","showMenu","shortestPathVar","grids","visited","shortestpath","minimumcost","leaves","flrconn","num_floors","animateRef","componentDidMount","coords","latitude","longitude","innerWidth","cvHeight","clientHeight","innerHeight","srcBar","navHeight","topPos","getBoundingClientRect","realHeight","srcvert","dstvert","coord","vert","specialcallwhile","MAX_VALUE","minleave","var_i","notthere","splice","get_dist","jj","l","neighbour","dum","createcanvas","ans","clist","floorLlist","ind1","breadth","callimage","callmark","get_val","count","ii","fList","dsp","append","attr","multiCanvasZoom","ctx","imgUrl","appendChild","loaded","multiCanvas","index","n","node_count","single","row","row1","row3","row4","row5","grid_1","src_x","src_y","check","ch","reset_var","sp","mypoints","refinedpaths","allElements","allNodes","rowX","rowY","minRowX","current","maxRowX","minRowY","maxRowY","beginPath","arc","fill","strokeStyle","stroke","result","counter","render","combineInstructions","setItem","venue","building","handleClick","JSON","stringify","overflow","position","WebkitTransform","handleScroll","onOpenModal","mapStateToProps","getImage","getAllElem","userPortfolio","globalRoutes","pickupPoint","currentTab"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Map as MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent,\n} from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\nimport SelectSource from './SelectSource';\nimport SelectDestination from './SelectDestination';\nimport './location.css';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n    content : {\n      top                   : '55%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)',\n      background            :  \"#27282D\",\n      width                 : \"98%\",\n      height                : \"95%\"\n    },\n    overlay: {zIndex: 9999}\n  };\n\nconst center = { lat: 28.6139, lng: 77.209 };\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n}\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: { lat: 28.6139, lng: 77.209 },\n      currentPos: { lat: 28.6139, lng: 77.209 },\n      nearestPickupPoint:{lat: 28.6139, lng: 77.209},\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Search within building\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\n      selectedDstLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\n      srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle:0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom:false,\n      language:'en',\n      visionType:'vision',\n      height:'<5ft',\n      ageGroup:'adult',\n      walkingType:'walk',\n      pause:false,\n      firstFlrInstruction:[],\n      secondFlrInstruction:[],\n      firstFlr:'',\n      secondFlr:'',\n      currentFloor:'',\n      instructionReady:false,\n      selectedVenue:'Select Venue',\n      selectedDestinationVenue:'Select destination venue',\n      selectedBuilding:'Select building',\n      selectedDestinationBuilding:'Select destination building',\n      destinationActive:false,\n      open:false,\n      showMenu:false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.distanceList = [];\n  }\n\n  componentDidMount() {\n    // if (window.navigator.geolocation) {\n    //   navigator.geolocation.getCurrentPosition(success => {\n      let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n        let coordinates = [success.coords.latitude, success.coords.longitude];\n        this.props.getGpsLocation(\n          { lat: success.coords.latitude, lng: success.coords.longitude },\n          () => {\n            this.getUserDetails()\n            var cvWidth = Math.max(\n              document.getElementById(\"myCanvassrc\").clientWidth,\n              window.innerWidth || 0\n            );\n            var cvHeight = Math.max(\n              document.getElementById(\"myCanvassrc\").clientHeight,\n              window.innerHeight || 0\n            );\n\n            var srcBar = document.getElementById(\"src-bar\");\n            var navHeight = document.getElementById(\"nav-height\");\n            var element = document.getElementById(\"myCanvassrc\");\n            var topPos = element.getBoundingClientRect().top;\n            let realHeight =\n              cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n\n            this.setState(\n              {\n                // currentLocation: this.props.gpsLocation.display_name,\n                currentLocation: \"IIT Delhi\",\n                selectedVenue:\"IIT Delhi\",\n                // selectedVenue: this.props.gpsLocation.display_name,\n                canvasWidth: cvWidth,\n                canvasHeight: realHeight,\n                center: {\n                  lat: success.coords.latitude,\n                  lng: success.coords.longitude\n                },\n                currentPos: {\n                  lat: success.coords.latitude,\n                  lng: success.coords.longitude\n                }\n              },\n              () => {\n                const map = this.leafletMap.leafletElement;\n                let lat = success.coords.latitude;\n                let lng = success.coords.longitude;\n                map.flyTo(\n                  new L.LatLng(\n                    success.coords.latitude,\n                    success.coords.longitude\n                  ),\n                  map.getZoom(),\n                  {\n                    animate: true,\n                    duration: 0.5\n                  }\n                );\n              }\n            );\n          }\n        );\n        this.getVenueList(coordinates);\n    //   });\n    // } else {\n    //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n    // }\n  }\n\n  // componentDidMount(){\n  //  if (window.navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(success => {\n  //       let coordinates = [success.coords.latitude, success.coords.longitude];\n  //       this.getVenueList(coordinates);\n  //       this.props.getGpsLocation(\n  //         { lat: success.coords.latitude, lng: success.coords.longitude },\n  //         () => {\n  //           this.getUserDetails()\n  //           var cvWidth = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientWidth,\n  //             window.innerWidth || 0\n  //           );\n  //           var cvHeight = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientHeight,\n  //             window.innerHeight || 0\n  //           );\n  //           var srcBar = document.getElementById(\"src-bar\");\n  //           var navHeight = document.getElementById(\"nav-height\");\n  //           var element = document.getElementById(\"myCanvassrc\");\n  //           var topPos = element.getBoundingClientRect().top;\n  //           let realHeight =\n  //             cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n  //           this.setState(\n  //             {\n  //               currentLocation: this.props.gpsLocation.display_name,\n  //               // currentLocation: \"IIT Delhi\",\n  //               // selectedVenue:\"IIT\",\n  //               selectedVenue: this.props.gpsLocation.display_name,\n  //               canvasWidth: cvWidth,\n  //               canvasHeight: realHeight,\n  //               center: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               },\n  //               currentPos: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               }\n  //             },\n  //             () => {\n  //               const map = this.leafletMap.leafletElement;\n  //               let lat = success.coords.latitude;\n  //               let lng = success.coords.longitude;\n  //               map.flyTo(\n  //                 new L.LatLng(\n  //                   success.coords.latitude,\n  //                   success.coords.longitude\n  //                 ),\n  //                 map.getZoom(),\n  //                 {\n  //                   animate: true,\n  //                   duration: 0.5\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //       // this.getVenueList(coordinates);\n  //     });\n  //   } else {\n  //     // x.innerHTML = \"Geolocation is not supported by this browser.\";\n  //   }\n  // }\n\n  getUserDetails = ()=>{\n    let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({id,token},()=>{\n        if(this.props.userProfile.success === false){\n          localStorage.clear();\n          this.props.history.push('/')\n        }else{\n          let data = this.props.userProfile.properties\n          this.setState({\n            language:data.language,\n            visionType:data.visionType,\n            height:data.height,\n            ageGroup:data.ageGroup,\n            walkingType:data.navigationMode\n          })          \n        }\n      })\n  }\n\n  fetchLocation = (venueName, buildingName, point) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n\n      let flrListData = this.props.flrList.data;\n      let prevData = this.state.center;\n      this.setState(\n        {\n          center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle:parseInt(flrListData[0].buildingOrientation)\n          }\n        },\n        () => {\n\n          this.props.getAllBuildingElements(data, () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 0.5\n              }\n            );\n\n\n            let nodes = this.props.navigationInfo;\n            let lists = [];\n            for (let i = 0; i < nodes.length; i++) {\n              var sel = nodes[i].properties;\n              lists.push(sel);\n            }\n\n            const uniqueLists = Array.from(\n              new Set(\n                lists.map(o => {\n                  if (o.floorElement === \"Rooms\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"FloorConnection\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"Services\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"RestRooms\") {\n                    return o.coordinates;\n                  } else {\n                    // return o.coordinates\n                  }\n                })\n              )\n            ).map(id => {\n              return lists.find(a => a.coordinates === id);\n            });\n            let freeBeacon = uniqueLists.map(r=>{\n              if(r.floorElement === \"Services\"){\n                if(r.type === \"Beacons\" ){\n                  return null\n                }else{\n                  return r\n                }\n              }else{\n                return r\n              } \n            })\n\n            let freeData = freeBeacon.filter( (el)=> {\n              return el != null;\n            });\n            freeData.sort((a, b)=> {\n              if(a.floorElement === \"Rooms\"){\n                if(a.roomName !== undefined){\n                  return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n                }else{\n                  return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n                }\n              }else{\n                return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n              }\n            });\n            if (point === \"srcBuildingLocation\") {\n              this.setState({\n                srcFloorList: freeData\n              });\n            } else if (point === \"dstBuildingLocation\") {\n              let me = this;\n              let srcLat = this.state.srcBuildingLocation.lat;\n              let srcLng = this.state.srcBuildingLocation.lng;\n              if (!srcLat && !srcLng){\n                srcLat = prevData.lat;\n                srcLng = prevData.lng;\n              }\n\n              // L.Routing.control({\n              //   waypoints: [\n              //     L.latLng(srcLat, srcLng),\n              //     L.latLng(flrListData[0].lat, flrListData[0].lng)\n              //   ],\n              //   routeWhileDragging: false,\n              //   autoRoute: true,\n              //   useZoomParameter: false,\n              //   draggableWaypoints: false,\n              //   show: false,\n              //   addWaypoints: false,\n              //   createMarker: function(i, wp) {\n              //     return L.marker(wp.latLng)\n              //       .on(\"click\", function(e) {\n              //         if (\n              //           e.latlng.lat === me.state.srcBuildingLocation.lat &&\n              //           e.latlng.lng === me.state.srcBuildingLocation.lng\n              //         ) {\n              //           me.nvgtSrcBld();\n              //         } else {\n              //           me.nvgtDstBld();\n              //         }\n              //       })\n              //       .bindPopup(\n              //         i === 0 ? \"Source Building\" : \"Destination Building\"\n              //       );\n              //   }\n              // })\n              //   .addTo(map)\n              //   .on(\"routesfound\", function(e) {\n              //     let distance = e.routes[0].summary.totalDistance;\n              //     me.setState({\n              //       osmRoutes: e.routes[0].instructions,\n              //       globalDistance: e.routes[0].summary.totalDistance,\n              //       globalTime: e.routes[0].summary.totalTime\n              //     });\n              //   });\n\n              map.fitBounds(\n                L.latLngBounds(\n                  L.latLng(srcLat, srcLng),\n                  L.latLng(flrListData[0].lat, flrListData[0].lng)\n                )\n              );\n              this.setState({\n                dstFloorList: freeData,\n                zoomLevel: \"10\"\n              });\n            }\n          });\n        }\n      );\n    });\n  };\n\n  getVenueList = (coordinates = null) => {\n    this.props.venueList(() => {\n      console.log(\"vn lisrt\",this.props.vnList)\n      this.setState(\n        {\n          venueList: this.props.vnList.data\n        },\n        () => {\n          this.findNearVenue(coordinates);\n        }\n      );\n    });\n  };\n\n  findNearVenue = coordinates => {\n    let { venueList } = this.state;\n    let dl = venueList.map(async r => {\n     let resp = await this.getDistance(coordinates, r)\n     return resp\n    });\n    Promise.all(dl).then(distList=>{\n    let arr = [];\n    let list = this.state.venueList.map((r, i) => {\n      if (r.buildingList) {\n        let dt = r.buildingList.map(k => {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          };\n        });\n        return dt;\n      } else {\n        arr.push({\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        });\n        return {\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        };\n      }\n    });\n\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    let listArr = this.state.locationList.map(r => {\n      let k = distList.map(d => {\n        if (d.venueName === r.venueName) {\n          return { r, distance: d.distance };\n        }\n      });\n    });\n    let sortedArr = this.quickSort(arr);\n\n    if (lowest < 1) {\n\n      this.setState(\n        {\n          currentVenue: nearLocation,\n          locationList: arr\n        },\n        () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        }\n      );\n    } else {\n      this.setState({\n        currentVenue: {\n          address: \"\",\n          coordinates: [],\n          dateCreated: \"\",\n          distance: 2,\n          id: 35,\n          liveStatus: true,\n          organization: \"\",\n          venueName: \"\"\n        },\n        selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n        locationList: arr,\n        currentBuilding: {\n          address: \"\",\n          buildingName: \"\",\n          coordinates: [],\n          distance: 2,\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n    })\n\n  };\n\n  quickSort = arr => {\n    if (arr.length < 2) {\n      return arr;\n    }\n    let pivot = arr[0];\n    let lesserVal = [];\n    let greaterVal = [];\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k].venueDistance < pivot.venueDistance) {\n        lesserVal.push(arr[k]);\n      } else {\n        greaterVal.push(arr[k]);\n      }\n    }\n  };\n\n  getBuildingList = (venueName, coordinates = null) => {\n    this.props.buildingList({ venueName: venueName }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data\n        },\n        () => {\n          \n          if (this.state.buildingList.length > 0) {\n\n            if(coordinates !== null){\n\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: { venueName: venueName, buildingName: \"\" }\n            });\n          }\n        }\n      );\n    });\n  };\n\n  findNearBuilding = coordinates => {\n    let { buildingList } = this.state;\n    let distList = buildingList.map(r => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      return this.getDistance(coordinates, r);\n    });\n\n    let dl = buildingList.map(async (r,i) => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      let resp = await this.getDistance(coordinates, r)\n      return resp\n     });\n     \n    Promise.all(dl).then(distList=>{\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n        if (tmp > highest) highest = tmp;\n    }\n  \n      if (lowest < 50) {\n        if(nearLocation.pickupLat){\n          let coordinate =  nearLocation.pickupLat.map((r,i)=>{\n            return {lat:parseFloat(r),lng:parseFloat(nearLocation.pickupLng[i])}\n          })\n  \n            let dist = coordinate.map(p=>{\n             let dl =  this.euclideanDistance(coordinates,[p.lat,p.lng])\n              return dl;\n            })\n  \n            let lower = this.nearLocation(dist);\n            this.setState(\n            {\n              currentBuilding: nearLocation,\n              selectedLocation: {\n                venueName: this.state.currentVenue.venueName,\n                buildingName: nearLocation.buildingName,\n                nearestPickupPoint: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]},\n                currentPos: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]}\n              }\n            },\n            () => {\n              // this.setNavigation(this.state.selectedLocation);\n              // this.fetchLocation(\n              //   this.state.selectedLocation.venueName,\n              //   this.state.selectedLocation.buildingName\n              // );\n            }\n          );\n\n        }\n\n      }\n    })\n  };\n\n  nearLocation = (distList)=>{\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n  }\n  return {lowest,nearLocation};\n  }\n\n  euclideanDistance = (p1, p2)=>{\n    var R = 6378137; // Earth’s mean radius in meter\n    var dLat = this.rad(p2[0] - p1[0]);\n    var dLong = this.rad(p2[1] - p1[1]);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(this.rad(p1[0])) *\n        Math.cos(this.rad(p2[0])) *\n        Math.sin(dLong / 2) *\n        Math.sin(dLong / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = (R * c) / 1000;\n    p2.distance = d;\n    return p2; // returns the distance in km\n  }\n\n  rad = function(x) {\n    return (x * Math.PI) / 180;\n  };\n\n  getDistance = (p1, p2)=> {\n    let data = { srcLat:p2.coordinates[0],srcLng:p2.coordinates[1],dstLat:p1[0],dstLng:p1[1]}\n    // this.props.osmRoutes(data,()=>{\n    // })\n\n    let me = this\n      const map = me.leafletMap.leafletElement;\n      var routeControl = L.Routing.control({\n        waypoints: [\n          L.latLng(p1[0], p1[1]),\n          L.latLng(p2.coordinates[0], p2.coordinates[1])\n        ], \n        routeWhileDragging: true,\n        show: false,\n        showAlternatives:false,\n        routeLine:false,\n        createMarker: function(p1,p2) {}\n      }).addTo(map)\n      return new Promise((resolve, reject) => {\n        routeControl.on('routesfound', (e)=> {\n          var routes = e.routes;\n          var summary = routes[0].summary;\n          p2.distance = summary.totalDistance / 1000;\n          this.distanceList.push(p2)\n          resolve(p2)\n          // return {p2}\n        });\n      })\n      \n \n  \n  \n  };\n\n  setNavigation = data => {\n                                    // this.props.androidNavigation(data, () => {\n                                // })\n    this.props.getAllBuildingElements({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding} , () => {\n    let nodes = this.props.navigationInfo;\n    this.grids_all = [];\n\n      let lists = [];\n      let num_vert = 0;\n      let fc = new Map();\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          num_vert++;\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          if (fc.has(v) === false) {\n            fc.set(v, [val]);\n          } else {\n            fc.get(v).push(val);\n          }\n        }\n      }\n      this.graph = new Graph(num_vert + 2);\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.graph.addVertex(val);\n        }\n\n        if (nodes[i].properties.floorElement === \"Floor\") {\n          if (nodes[i].properties.length == 8) {\n            var v = nodes[i].properties.frConn[0].split(\",\");\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n            var len = v.length / 2;\n            if (v.length % 2 === 0) {\n              for (var j = 0; j < v.length; j = j + 2) {\n                var val =\n                  parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                  parseInt(v[j]);\n                var vert1 = nodes[i].properties.floor + \",\" + val;\n                for (var k = j + 2; k < v.length; k = k + 2) {\n                  val =\n                    parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                    parseInt(v[k]);\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\n                  this.graph.addEdge(\n                    vert1,\n                    vert2,\n                    flrmatrix[len * (j / 2) + k / 2],\n                    true\n                  );\n                }\n              }\n            } else {\n            }\n          }\n\n          this.grids_all.push(nodes[i]);\n\n        }\n      }\n\n      let getKeys = fc.keys();\n\n      for (let i of getKeys) {\n        var get_values = fc.get(i);\n        var cnt = 0;\n        var prev = null;\n        for (var j of get_values) {\n          if (cnt > 0) {\n            this.graph.addEdge(prev, j, 0, true);\n            prev = j;\n          }\n          if (cnt === 0) {\n            prev = j;\n          }\n          cnt++;\n        }\n      }\n      // if(this.state.srcfloor === this.state.dstfloor){\n      console.log(\"graph\",this.graph)\n      this.setState({\n        // canvasWidth: cvWidth,\n        // canvasHeight: height_of_canvas,\n        list: lists\n      });\n      // }\n    });\n  };\n\n  toggle = (type, value) => event => {\n    this.setState(state => {\n      return {\n        [type]: value\n      };\n    });\n  };\n\n  findFloor = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].type) {\n          if (array[i].geomtery.type === \"Polygon\") {\n            if (array[i].properties.floor === key) {\n              return i;\n            }\n          }\n        }\n        if (array[i].floor === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n\n    let { scale } = this.state;\n\n    if(color === \"red\"){\n      let srcDiv = document.getElementById(\"srcImage\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n    }else if(color === \"yellow\"){\n      let lift = document.getElementById(\"lift\");\n      let stairs = document.getElementById(\"stairs\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      \n      let gpx,gpy;\n\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n\n      var rot = (Math.PI / 2) * 3;\n      var x = pos_x;\n      var y = pos_y;\n      var step = Math.PI / 5;\n      let frConnType = \"\";\n      let data = this.props.navigationInfo.map(r => {\n        return r.properties;\n      });\n      for (let k = 0; k < data.length; k++) {\n        if (data[k].node === i) {\n          frConnType = data[k].type;\n        }\n      }\n      if (frConnType === \"Stairs\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      } else if (frConnType === \"Lift\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      }\n       \n    }else if(color === \"green\"){\n      let dstDiv = document.getElementById(\"dstImage\");\n      let { scale } = this.state;\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n    }\n  };\n\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n  //   let { scale } = this.state;\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n\n  //   let lift = document.getElementById(\"lift\");\n  //   let stairs = document.getElementById(\"stairs\");\n\n  //   var canvas = document.getElementById(canvasid);\n  //   var context = canvas.getContext(\"2d\");\n  //   let gpx, gpy,pos_x,pos_y;\n  //   if (canvasid === \"canvas0\") {\n  //     let wrh = this.state.srcfloorL / this.state.srcfloorB;\n  //     let newWidth = this.state.canvasWidth;\n  //     let newHeight = newWidth / wrh;\n  //     if (newHeight > this.state.canvasHeight) {\n  //       newHeight = this.state.canvasHeight;\n  //       newWidth = newHeight * wrh;\n  //     }\n  //     gpx = newWidth / this.state.srcfloorL;\n  //     gpy = newHeight / this.state.srcfloorB;\n\n  //     pos_x = gpx * (i % this.state.srcfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\n  //   } else {\n  //     let wrh = this.state.dstfloorL / this.state.dstfloorB;\n  //     let newWidth = this.state.canvasWidth;\n  //     let newHeight = newWidth / wrh;\n  //     if (newHeight > this.state.canvasHeight) {\n  //       newHeight = this.state.canvasHeight;\n  //       newWidth = newHeight * wrh;\n  //     }\n  //     gpx = newWidth / this.state.dstfloorL;\n  //     gpy = newHeight / this.state.dstfloorB;\n\n  //     pos_x = gpx * (i % this.state.dstfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\n  \n  //   }\n\n  //   var halfScale = scale / 2;\n\n  //   if (color === \"yellow\") {\n      // var rot = (Math.PI / 2) * 3;\n      // var x = pos_x;\n      // var y = pos_y;\n      // var step = Math.PI / 5;\n      // let frConnType = \"\";\n      // let data = this.props.navigationInfo.map(r => {\n      //   return r.properties;\n      // });\n      // for (let k = 0; k < data.length; k++) {\n      //   if (data[k].node === i) {\n      //     frConnType = data[k].type;\n      //   }\n      // }\n      // if (frConnType === \"Stairs\") {\n      //   var half_scale = scale / 2;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      // } else if (frConnType === \"Lift\") {\n      //   var half_scale = scale / 2;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      // }\n  //   } else if (color === \"green\") {\n  //     let half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(dstDiv, pos_x, pos_y, 25, 25);\n  //   } else {\n\n  //     let half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n  //   }\n  // };\n\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n  //   let { scale } = this.state;\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n\n  //   let lift = document.getElementById(\"lift\");\n  //   let stairs = document.getElementById(\"stairs\");\n\n  //   var canvas = document.getElementById(canvasid);\n  //   var context = canvas.getContext(\"2d\");\n  //   let gpx, gpy,pos_x,pos_y;\n  //   if (canvasid === \"canvas0\") {\n  //     gpx = this.state.canvasWidth / this.state.srcfloorL;\n  //     gpy = this.state.canvasHeight / this.state.srcfloorB;\n      \n  //     pos_x = gpx * (i % this.state.srcfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\n  //   } else {\n  //     gpx = this.state.canvasWidth / this.state.dstfloorL;\n  //     gpy = this.state.canvasHeight / this.state.dstfloorB;\n    \n  //     pos_x = gpx * (i % this.state.dstfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\n  //   }\n    \n  //   var halfScale = scale / 2;\n\n  //   if (color === \"yellow\") {\n  //     var rot = (Math.PI / 2) * 3;\n  //     var x = pos_x;\n  //     var y = pos_y;\n  //     var step = Math.PI / 5;\n  //     let frConnType = \"\";\n  //     let data = this.props.navigationInfo.map(r => {\n  //       return r.properties;\n  //     });\n\n  //     for (let k = 0; k < data.length; k++) {\n  //       if (data[k].node === i) {\n  //         frConnType = data[k].type;\n  //       }\n  //     }\n\n  //     if (frConnType === \"Stairs\") {\n  //       var half_scale = scale / 2;\n  //       pos_x = pos_x + half_scale;\n  //       pos_y = pos_y + half_scale;\n  //       context.drawImage(stairs, pos_x-12.5, pos_y-6.25, 25, 25);\n  //     } else if (frConnType === \"Lift\") {\n  //       var half_scale = scale / 2;\n  //       pos_x = pos_x + half_scale;\n  //       pos_y = pos_y + half_scale;\n  //       context.drawImage(lift,pos_x-12,pos_y+6.25, 25, 25);\n  //     }\n  //   } else if (color === \"green\") {\n  //     var half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(dstDiv, pos_x - 15, pos_y - 25, 25, 25);\n  //   } else {\n  //     // var half_scale = scale / 2;\n  //     // pos_x = pos_x + half_scale;\n  //     // pos_y = pos_y + half_scale;\n  //     let { scale } = this.state;\n  //     let canvas = document.getElementById(canvasid);\n  //     let context = canvas.getContext(\"2d\");\n  //     context.fillStyle = color;\n  //     context.fillRect(pos_x, pos_y, scale, scale);\n  //     // context.drawImage(srcDiv, pos_x, pos_y,scale,scale);\n      \n  //   }\n  // };\n\n  // color_canvas = (i, place, color) => {\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n  //   if (place === \"srcmap\") {\n  //     let { srcfloorL, scale } = this.state;\n  //     var canvas = document.getElementById(\"myCanvassrc\");\n  //     var context = canvas.getContext(\"2d\");\n  //     let gpx = this.state.canvasWidth / this.state.srcfloorL;\n  //     let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n  //     var posX = gpx * (i % srcfloorL);\n  //     var posY = gpy * parseInt(i / srcfloorL);\n  //     var halfScale = scale / 2;\n  //     posX = posX + halfScale;\n  //     posY = posY + halfScale;\n  //     context.beginPath();\n  //     var half_scale = scale / 2;\n  //     context.arc(posX, posY, 5, 0, 2 * Math.PI);\n  //     context.fillStyle = color;\n  //     context.fill();\n  //     context.stroke();\n  //   } else {\n  //     let { dstfloorL, scale } = this.state;\n  //     let canvas = document.getElementById(\"myCanvasdst\");\n  //     let context = canvas.getContext(\"2d\");\n  //     let posX = scale * (i % dstfloorL);\n  //     let posY = scale * parseInt(i / dstfloorL);\n  //     context.fillStyle = color;\n  //     context.fillRect(posX, posY, scale, scale);\n  //   }\n  // };\n\n  color_canvas = (i, place, color) => {\n    let srcDiv = document.getElementById(\"srcImage\");\n    let dstDiv = document.getElementById(\"dstImage\");\n    if (place === \"srcmap\") {\n      let { srcfloorL, scale } = this.state;\n      var canvas = document.getElementById(\"myCanvassrc\");\n      var context = canvas.getContext(\"2d\");\n      // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n      // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n      var wrh = this.state.srcfloorL / this.state.srcfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx = newWidth / this.state.srcfloorL;\n      let gpy = newHeight / this.state.srcfloorB;\n\n      var posX = gpx * (i % srcfloorL);\n      var posY = gpy * parseInt(i / srcfloorL);\n      var halfScale = scale / 2;\n      posX = posX + halfScale;\n      posY = posY + halfScale;\n      if (color === \"green\") {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n      }else if(color === \"#bdbdbd\"){\n        let { dstfloorL, scale } = this.state;\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.fillStyle = color;\n        context.globalAlpha = 1;\n        context.fillRect(posX, posY, scale, scale);  \n      } else {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(srcDiv, posX-9,posY, 15, 15);\n      }\n    } else {\n      let { dstfloorL, scale } = this.state;\n      let canvas = document.getElementById(\"myCanvasdst\");\n      let context = canvas.getContext(\"2d\");\n      let posX = scale * (i % dstfloorL);\n      let posY = scale * parseInt(i / dstfloorL);\n      context.fillStyle = color;\n      context.fillRect(posX, posY, scale, scale);\n    }\n  };\n\n  find = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (parseInt(array[i].node) === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  find_fl = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (\n          parseInt(array[i].node) === key &&\n          array[i].floor == \"floorconnection\"\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  handleSubmit = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n    if (srcVal != null && dstVal != null) {\n      var divimg = document.getElementById(\"mydiv1\");\n      var divcan = document.getElementById(\"mydiv\");\n      var len = divimg.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divimg.childNodes[0].remove();\n      }\n\n      len = divcan.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divcan.childNodes[0].remove();\n      }\n\n      if (srcfloor === dstfloor) {\n        var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n        let ratio = cvWidth / dstfloorL;\n        let height_of_canvas = ratio * dstfloorB;\n        let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n\n        this.setState({\n          samefloor: true,\n          scale:factor\n        });\n        \n        var img1 = new Image();\n        var img = document.getElementById(\"myImage\");\n        img1.src = img.src;\n        img1.hidden = true;\n        var color_canvas = this.color_canvas;\n        var me = this;\n        var dest_x = this.state.dstVal % this.state.dstfloorL;\n        var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n        let imgDiv = document.getElementById(\"myImage\");\n        this.imgDiv = imgDiv;\n        let angle = 0;\n\n  // status of the pointer(s)\n  let pointerangle;\n\n        var canvas = window.d3.select(\"canvas\").call(\n            window.d3\n              .zoom()\n              .scaleExtent([1, 8])\n              .on(\"zoom\", zoom)\n          ),\n          context = canvas.node().getContext(\"2d\"),\n          width = canvas.property(\"width\"),\n          height = canvas.property(\"height\");\n        var active = window.d3.select(null);\n        var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n        var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n        function zoom() {\n          me.setState(\n            {\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            },\n            () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            }\n          );\n        }\n        function draw() {\n          if (active.node() === this) return reset();\n          active.classed(\"active\", false);\n          active = window.d3.select(this).classed(\"active\", true);\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          context.rotate(angle);\n          context.globalAlpha = 0.5;\n          context.drawImage(\n            img1,\n            0,\n            0,\n            img1.width,\n            img1.height,\n            0,\n            0,\n            newWidth,\n            newHeight\n          );\n          // me.loadNonwalkable(\"myCanvassrc\")\n          me.callwhile(\n            me.state.srcfloor,\n            me.state.srcVal,\n            me.state.srcfloorL,\n            me.state.srcfloorB,\n            dest_x,\n            dest_y,\n            true,\n            \"myCanvassrc\"\n          );\n          color_canvas(srcVal, \"srcmap\", \"red\");\n          color_canvas(dstVal, \"srcmap\", \"green\");\n        }\n\n        function reset() {\n          active.classed(\"active\", false);\n          active = window.d3.select(null);\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, initialTransform);\n        }\n        function timer(ms) {\n          return new Promise(res => setTimeout(res, ms));\n        }\n\n        function zoomTo() {\n          let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n          let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          let gpx = newWidth / me.state.srcfloorL;\n          let gpy = newHeight / me.state.srcfloorB;\n          let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n          //Zoomed\n          let distX =\n            width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n          let distY =\n            height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n          var transform = window.d3.zoomIdentity.translate(distX, distY);\n          // .scale(1.2)\n          // .translate(-4*X,-4*Y)\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, transform);\n        }\n        img1.onload = function() {\n          draw();\n          zoomTo();\n        };\n      } else {\n        this.setState({\n          samefloor: false,\n          buildingView:true\n        });\n        this.findpath();\n      }\n    } else {\n    }\n  };\n\n  loadNonwalkable = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData = navInfo.filter(r=>{\n      return r.floor === srcfloor\n    })\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpath(start, nodes[j]);\n        this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n        start = nodes[j];\n      }\n      this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n    }\n  }\n\n  loadMultiFloorNonwalkable = (id) => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData\n\n    if(id ===\" canvas0\"){\n      floorData = navInfo.filter(r=>{\n        return r.floor === srcfloor\n      })\n    }else{\n      floorData = navInfo.filter(r=>{\n        return r.floor === dstfloor\n      })\n    }\n\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpathMulti(start, nodes[j],id);\n        // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n        start = nodes[j];\n      }\n      // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n    }\n  }\n\n  oldpath = (x, y) => {\n    // x = coord_val  y=coord_val in normal\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else {\n      g = dstfloorL * e + f;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n      this.oldpath(g, x);\n      this.oldpath(g, y);\n    }\n  };\n\n  color = (i,color,canvasid)=>{\n      let posX,posY,gpx,gpy\n      if(canvasid === \"canvas0\"){\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }else{\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);  \n  }\n\n  oldpathMulti = (x, y,id) => {\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color(g,\"#bdbdbd\",id);\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color(g,\"#bdbdbd\",id);\n    } else {\n      g = dstfloorL * e + f;\n      this.color(g,\"#bdbdbd\",id);\n      this.oldpathMulti(g, x,id);\n      this.oldpathMulti(g, y,id);\n    }\n  };\n\n  findpath() {\n    var srcvert =\n      this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert =\n      this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n      console.log(\"dtsr\",srcvert,dstvert,this.graph)\n    if (this.graph.hasvertex(srcvert)) {\n    } else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor == this.state.srcfloor &&\n          nodes[i].properties.floorElement === \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert1\",vert)\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.srcfloor,\n        this.state.srcVal,\n        this.state.srcfloorL,\n        this.state.srcfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n\n    if (this.graph.hasvertex(dstvert)) {\n    } else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor === this.state.dstfloor &&\n          nodes[i].properties.floorElement == \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert2\",vert)\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.dstfloor,\n        this.state.dstVal,\n        this.state.dstfloorL,\n        this.state.dstfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    this.specialcallwhile(\n      this.state.srcfloor,\n      srcvert,\n      this.state.dstfloor,\n      dstvert\n    );\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\",srcfloor,srcvert,dstfloor,dstvert)\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n        break;\n      }\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n\n        var neighbour = false;\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      console.log(\"list\",list)\n      let ans = new Map();\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    console.log(\"cnt, ans, count, clist, floorLlist\",cnt, ans, count, clist, floorLlist)\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n          let canvas = window.d3\n            .select(\"#mydiv\")\n            .append(\"canvas\")\n            .attr(\"id\", \"canvas\" + ii)\n            .attr(\"style\", `border:1px solid;display:${dsp};`)\n            .attr(\"width\", this.state.canvasWidth)\n            .attr(\"height\", this.state.canvasHeight)\n            .call(\n              window.d3\n                .zoom()\n                .scaleExtent([1, 8])\n                .on(\"zoom\", multiCanvasZoom)\n            );\n\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity\n            .translate(0, 0)\n            .scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n          img1.onload = function() {\n            multiCanvas();\n            zoomTo()\n          };\n\n          function multiCanvasZoom() {\n            me.setState(\n              {\n                zoom: true,\n                // pathCaption: []\n              },\n              () => {\n                var transform = window.d3.event.transform;\n                ctx.save();\n                ctx.clearRect(0, 0, width, height);\n                ctx.translate(transform.x, transform.y);\n                ctx.scale(transform.k, transform.k);\n                loaded = false;\n                multiCanvas();\n                ctx.restore();\n              }\n            );\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              ctx.globalAlpha = 0.5;\n\n              ctx.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              var id = \"canvas\" + ii;\n              // me.loadMultiFloorNonwalkable(id)\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\",i, get_val[j], m, n, dest_x, dest_y, true, id)\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n              var node_count = 0;\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n                node_count++;\n              }\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n            //Zoomed\n            let distX =\n              width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n            let distY =\n              height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\n            // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n            canvas\n              .transition()\n              .duration(750)\n              .call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n    for (let i = 0; i < m; i++) {\n      var row = [],\n        row1 = [],\n        row3 = [],\n        row4 = [];\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n      this.visited[minleave[0]][minleave[1]] = 1;\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (\n            this.visited[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])\n            ] == 1\n          ) {\n          } else {\n            check = false;\n          }\n        }\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(\n              vert,\n              this.flrconn[ch][2],\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\n                parseInt(this.flrconn[ch][1])\n              ],\n              true\n            );\n          }\n          this.reset_var();\n          break;\n        }\n      }\n      this.leaves.splice(var_i, 1);\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (\n                this.minimumcost[j][k] >\n                this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  )\n              ) {\n                this.minimumcost[j][k] =\n                  this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  );\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                  minleave[1]\n                ].concat([[j, k]]);\n                notthere = 1;\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (single == true) {\n      let { scale } = this.state;\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n\n      let sp = this.shortestpath[dest_x][dest_y];\n      console.log(\"sp\",sp)\n      let mypoints = sp.map(r => {\n        return { x: r[0], y: r[1] };\n      });\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      }\n      // if (\n      //   this.state.srcBuildingLocation.venueName ===\n      //     this.state.dstBuildingLocation.venueName &&\n      //   this.state.srcBuildingLocation.buildingName ===\n      //     this.state.dstBuildingLocation.buildingName\n      // ) {\n\n        // if (this.state.zoom === false) {\n          if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n            this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n          }else{\n            this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n          }\n        // }\n        // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // } else if (this.state.dstBuildingLocation) {\n      //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // }\n      \n      var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { x: row[0], index: i };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { y: row[1], index: i };\n      });\n      let minRowX = rowX.reduce((prev, current) =>\n        prev.x < current.x ? prev : current\n      );\n      let maxRowX = rowX.reduce((prev, current) =>\n        prev.x > current.x ? prev : current\n      );\n      let minRowY = rowY.reduce((prev, current) =>\n        prev.y < current.y ? prev : current\n      );\n      let maxRowY = rowY.reduce((prev, current) =>\n        prev.y > current.y ? prev : current\n      );\n\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      };\n      // var max = Math.max.apply(null, maxRow);\n      // for (let i = 0; i < refinedpaths.length; i = i +1) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * refinedpaths[i].x;\n      //   var pos_y = gpy * refinedpaths[i].y;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n        context.globalAlpha = 1;\n        context.beginPath();\n        var half_scale = scale / 2;\n        var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n        var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n        context.fill();\n        context.fillStyle = \"#2d9cdb\";\n        context.strokeStyle = \"#2d9cdb\";\n        context.stroke();\n      }\n      this.reset_var();\n    }\n  }\n\n  interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n    let resultpath = [];\n    if (turningPointsPath.length === 1) {\n      resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n      return resultpath;\n    }\n    for (let i = 0; i < turningPointsPath.length - 1; i++) {\n      let points = this.interpolatePoints(\n        turningPointsPath[i],\n        turningPointsPath[i + 1],\n        seperationGap,\n        gpx,\n        gpy\n      );\n      for (let k = 0; k < points.length; k++) {\n        resultpath.push(points[k]);\n      }\n      // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n    }\n    return resultpath;\n  };\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n    let counter = seperationGap;\n    while (counter < d) {\n      let x = p1.x + (counter / d) * (p2.x - p1.x);\n      let y = p1.y + (counter / d) * (p2.y - p1.y);\n      result.push({ x: parseInt(x), y: parseInt(y) });\n      counter += 1 * seperationGap;\n    }\n    return result;\n  }\n\n  simplifyPath = (points, tolerance) => {\n    // helper classes\n    var Vector = function(x, y) {\n      this.x = x;\n      this.y = y;\n    };\n    var Line = function(p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n      this.distanceToPoint = function(point) {\n        // slope\n        var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n          // y offset\n          b = this.p1.y - m * this.p1.x,\n          d = [];\n        // distance to the linear equation\n        d.push(\n          Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n        );\n        // distance to p1\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n          )\n        );\n        // distance to p2\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n          )\n        );\n        // return the smallest distance\n        return d.sort(function(a, b) {\n          return a - b; //causes an array to be sorted numerically and ascending\n        })[0];\n      };\n    };\n\n    var douglasPeucker = function(points, tolerance) {\n      if (points.length <= 2) {\n        return [points[0]];\n      }\n      var returnPoints = [],\n        // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n        // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n        maxDistanceIndex = 0,\n        p;\n      for (var i = 1; i <= points.length - 2; i++) {\n        var distance = line.distanceToPoint(points[i]);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          maxDistanceIndex = i;\n        }\n      }\n      // check if the max distance is greater than our tollerance allows\n      if (maxDistance >= tolerance) {\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        // include this point in the output\n        returnPoints = returnPoints.concat(\n          douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n        );\n        // returnPoints.push( points[maxDistanceIndex] );\n        returnPoints = returnPoints.concat(\n          douglasPeucker(\n            points.slice(maxDistanceIndex, points.length),\n            tolerance\n          )\n        );\n      } else {\n        // ditching this point\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        returnPoints = [points[0]];\n      }\n      return returnPoints;\n    };\n    var arr = douglasPeucker(points, tolerance);\n    // always have to push the very last point on so it doesn't get left off\n    arr.push(points[points.length - 1]);\n    return arr;\n  };\n\n  find_angle = (p0, p1, c) => {\n    var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n    var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n\n    // {\n    // x: refinedPoints[currentRPoint].x,\n    // y: refinedPoints[currentRPoint].y + 1\n    // },\n    // refinedPoints[currentRPoint + 1],\n    // refinedPoints[currentRPoint]\n    return (\n      (Math.atan2(\n        cp1.y * p0c.x - cp1.x * p0c.y,\n        p0c.x * cp1.x + p0c.y * cp1.y\n      ) *\n        180) /\n      Math.PI\n    );\n  };\n\n  //Module for finding the direction's equivalent commands\n\n  findDirectionword = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return (\"Go Straight\")\n      // }\n      // return (\"O' Clock\", {\n      //   angle: Math.abs(Math.round((360 + angle) / 30))\n      // });\n      return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n    //   return this.props.t(\"Go Straight\")\n    // }\n    // return this.props.t(\"O' Clock\", {\n    //   angle: Math.abs(Math.round(angle / 30))\n    // });\n    return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  findWord = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      return \"Turn left\";\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    return \"Turn right\";\n\n    // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  // find the error component in the iteration and leaves it for the next iteration\n  findErrorInAngle = angle => {\n    if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n    return angle - Math.round(angle / 30) * 30;\n  };\n  //same as above but in abbreviated form\n\n  findDirectionAbbreviation = angle => {\n    if (angle > 0) return \"Right\";\n\n    return \"Left\";\n  };\n\n  findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n    //length of refined and non refined paths\n    var nRefined = refinedPoints.length;\n    var nNonRefined = nonRefinedPoints.length;\n    //converting the mapElements to ordered map for ease of access\n    var ElementMap = new Map();\n    var includedSet = new Set();\n    var word;\n    //for iteration purpose\n    var currentNRPoint = 0;\n    var currentRPoint = 0;\n    var flagList = [];\n    var i = 0;\n    var j = 0;\n    //radius defines what range to cover in a path\n    var radius = 3;\n    let pathTuning = []\n    //adding the elements to map\n    for (i = 0; i < mapElements.length; i++) {\n      let props = mapElements[i].properties;\n      if (props.floorElement === \"Rooms\") {\n        if (\n          props.floor === floor &&\n          props.roomName !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          Object.keys(props).map(id => {\n            if(id === 'roomName'){\n              props[`name`] = [...props[id]].join('');\n              delete props[id];  \n            }\n          });\n\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        }\n      } else if (props.floorElement === \"FloorConnection\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n        }\n      } else if (props.floorElement === \"Services\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else if (props.floorElement === \"RestRooms\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else {\n      }\n    }\n    //finding the indices of the\n    while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n      if (\n        nonRefinedPoints[currentNRPoint][0] ===\n          refinedPoints[currentRPoint].x &&\n        nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n      ) {\n        flagList.push(currentNRPoint);\n        currentRPoint++;\n      }\n      currentNRPoint++;\n    }\n    // Generating the direction and elaborated results\n    var DirectionResults = [];\n    var ElaboratedResults = [];\n    //entry point insertion to the list\n    DirectionResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    ElaboratedResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n    includedSet.add(\n      refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n    );\n    //iterate and /finding the desired results\n    var error = 0;\n    for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n      var angle = 0;\n      var coordinates;\n      // this.actualAngle = 155\n      if (currentRPoint === 0) {\n        angle = this.find_angle(\n          {\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          },\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n        let path_angle = angle;\n        let floorangle = this.state.floorAngle;\n        let diff = 360 - floorangle;\n        // let CurrentDirection = 60;\n        let CurrentDirection = this.actualAngle;\n        // rotateDirection\n        this.setState({\n          pathAngle:path_angle\n        })\n\n        let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n        angle = gn;\n      } else\n        angle = this.find_angle(\n          refinedPoints[currentRPoint - 1],\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n      angle = angle + error;\n      error = this.findErrorInAngle(angle);\n\n      let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n      let base = Math.cos(angle)*hypo;  \n      let height = Math.sin(angle)*hypo;\n      this.forwardStep = parseInt(Math.abs(height));   \n      this.lastStep = parseInt(Math.abs(base));\n      let steps = parseInt(this.forwardStep + hypo);\n\n      if (currentRPoint === nRefined - 2) {\n        word = this.findDirectionword(angle);\n        DirectionResults.push(word);\n        DirectionResults.push(\n          \"Move \" +\n            Math.round(\n              0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n            ) +\n            \" steps forward\"\n        );\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        break;\n      }\n     \n      if(hypo <= 6){\n        word = this.findWord(angle);\n        if(word.includes(\"Turn 0 O' Clock\") ){\n\n          word = \"Go straight\"\n        }\n\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n    }else{\n        word = this.findDirectionword(angle);\n        // if(word.includes(\"Turn 0 O' Clock\") ){\n        //   word = \"Go straight\"\n        // }\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        let step = parseInt(Math.round(\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n          ))\n        DirectionResults.push(word);\n        DirectionResults.push(\" Move \" +\n        step +\n        \" steps forward\");\n    }\n\n      //this part of code handles the intermediate importatnt rooms\n      var begin = flagList[currentRPoint] + 1;\n      var end = flagList[currentRPoint + 1];\n\n      while (begin < end) {\n        var currpoint = nonRefinedPoints[begin];\n        for (\n          i = Math.max(0, currpoint[0] - radius);\n          i < currpoint[0] + radius;\n          i++\n        ) {\n          for (\n            j = Math.max(0, currpoint[1] - radius);\n            j < currpoint[1] + radius;\n            j++\n          ) {\n            if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n              var tempAngle = this.find_angle(\n                {\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                },\n                { x: i, y: j },\n                { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n              );\n              ElaboratedResults.push(\n                ElementMap.get(i + \"@\" + j).roomName +\n                  \" on your \" +\n                  this.findDirectionAbbreviation(tempAngle)\n              );\n              includedSet.add(i + \"@\" + j);\n            }\n          }\n        }\n        begin++;\n      }\n    }\n    let elem = ElementMap.get(\n      \"\" +\n        refinedPoints[nRefined - 1].x +\n        \"@\" +\n        refinedPoints[nRefined - 1].y\n    );\n\n    if(elem.type === \"Rest Rooms\"){\n      let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else if(elem.type === \"Drinking Water | Non Drinking\"){\n      let name = `Drinking Water Point (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else{\n      DirectionResults.push(\n        \"You will reach \" +\n          ElementMap.get(\n            \"\" +\n              refinedPoints[nRefined - 1].x +\n              \"@\" +\n              refinedPoints[nRefined - 1].y\n          ).name\n      );\n    }\n    ElaboratedResults.push(\n      \"You have reached \" +\n        ElementMap.get(\n          \"\" +\n            refinedPoints[nRefined - 1].x +\n            \"@\" +\n            refinedPoints[nRefined - 1].y\n        ).name\n    );\n    let resultMap = DirectionResults.map(r => {\n      return { instruction: r, floor: floor };\n    });\n    this.pathTune = pathTuning\n    resultMap.forEach(element => {\n      this.setState(prevState => ({\n        pathFloor: [...prevState.pathFloor, element]\n      }));\n    });\n    let step = DirectionResults[0];\n    if(this.state.srcfloor === this.state.dstfloor){\n      if(this.state.zoom === false){\n      this.setState(\n        prevState => ({\n          pathArray: [...prevState.pathArray, DirectionResults],\n          srtdFlr: [...prevState.srtdFlr, floor],\n          instructionReady:true\n\n        }),\n        () => {\n          let flrArry = [this.state.srcfloor, this.state.dstfloor];\n          if (this.state.pathArray.length === 2) {\n            for (let k = 0; k < flrArry.length; k++) {\n              if (this.state.srtdFlr[k] === flrArry[k]) {\n                const merge3 = this.state.pathArray.flat(1);\n                this.setState({\n                  pathCaption: merge3\n                });\n              }\n            }\n          } else {\n            for (let k = 0; k < DirectionResults.length; k++) {\n              this.setState(prevState => ({\n                pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n              }),()=>{\n                let instruction = this.filterInstruction();\n                this.setState({\n                  pathCaption:instruction\n                })\n                // console.log(\"instructions\",instruction,this.state.pathCaption)\n              });\n            }\n          }\n        }\n      );\n    }\n    }else{\n        if(this.state.srcfloor === floor){\n          this.setState({\n            firstFlrInstruction:DirectionResults,\n            firstFlr:floor,\n            currentFloor:floor,\n            // instructionReady:true\n          })\n        }else{\n          this.setState({\n            secondFlrInstruction:DirectionResults,\n            secondFlr:floor,\n            instructionReady:true\n          })\n        }\n    }\n  };\n\n  calculatePath = (path_angle, diff, CurrentDirection) => {\n    let pathGN, rotateDirection, path_angleN;\n    if (path_angle >= 0 && path_angle < 106) {\n      pathGN = 360 - (diff - path_angle);\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle > 105 && path_angle <= 180) {\n      pathGN = path_angle - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle <= -1 && path_angle >= -180) {\n      path_angleN = 180 + path_angle;\n      pathGN = path_angleN + 180 - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    }\n    return rotateDirection;\n  };\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n\n  /* NAVIGATION DRAWER */\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n  incCanvas = () => {\n    let { scale } = this.state;\n    if (scale < 30) {\n      this.setState(\n        {\n          scale: scale + 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n  decCanvas = () => {\n    let { scale } = this.state;\n    if (scale > 2) {\n      this.setState(\n        {\n          scale: scale - 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  handleDstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    if (e.length > 0) {\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {\n        }\n      }\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState(\n        {\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  dstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type} Washroom (${e.floor})`;\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  handleSrcChange = e => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        resp = `${e[0].roomName}(${e[0].floor})`;\n        if (e[0].node === navInfo[i].properties.node) {\n\n          name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].name}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type} Washroom (${e[0].floor})`;\n      } else {\n      }\n    }\n\n    var ind = this.findFloor(floor, this.props.flrList.data);\n\n    // var srcBar = document.getElementById(\"src-bar\");\n    // var navHeight = document.getElementById(\"nav-height\");\n    // var element = document.getElementById(\"myCanvassrc\");\n    // var topPos = element.getBoundingClientRect().top;\n    // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n\n    // // image is smaller than the canvas so no need to resize\n    // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n    // // return;\n\n    // // Figure out the ratio\n    // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n    // // use whichever multiplier is smaller\n    // let ratio = ratioX < ratioY ? ratioX : ratioY;\n    // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n    // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        // setTimeout(() => {\n          this.handleSubmit();\n        // }, \"2000\");\n      }\n    );\n  };\n\n  srcChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onDstSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      dstSuggestions: this.getDstSuggestions(value)\n    });\n  };\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onDstSuggestionsClearRequested = () => {\n    this.setState({\n      dstSuggestions: []\n    });\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getDstSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getSuggestionValue = suggestion => {\n    this.srcChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  getDstSuggestionValue = suggestion => {\n    this.dstChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  renderSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  renderDstSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSrcChange = (event, { newValue }) => {\n    this.setState({\n      dstValue: newValue\n    });\n  };\n\n  nvgtSrcBld = () => {\n    let { tmpSrcLocation } = this.state;\n    let e = [tmpSrcLocation];\n    this.fetchSrcBldLocation(\n      e,\n      tmpSrcLocation.venueName,\n      tmpSrcLocation.buildingName,\n      \"srcBuildingLocation\",\n      k => {\n        this.handleDstChange(k);\n      }\n    );\n  };\n\n  nvgtDstBld = () => {\n    let { tmpDstLocation } = this.state;\n    let e = [tmpDstLocation];\n    this.fetchDstBldLocation(\n      e,\n      tmpDstLocation.venueName,\n      tmpDstLocation.buildingName,\n      \"dstBuildingLocation\",\n      k => {\n        this.handleDstChange(e);\n      }\n    );\n  };\n\n  fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            this.srcBldDstPointChange(e, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            let props = [navInfo[i].properties];\n            this.srcBldDstPointChange(props, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  srcBldDstPointChange = (e, cb) => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      }\n    );\n    cb();\n  };\n\n  navigateNext = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[0].style.display = \"none\";\n    div[1].style.display = \"block\";\n    this.setState({\n      next: false,\n      currentFloor: this.state.dstfloor,\n      currentStep:0\n    });\n  };\n\n  navigatePrevious = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[1].style.display = \"none\";\n    div[0].style.display = \"block\";\n    this.setState({\n      next: true,\n      currentFloor: this.state.srcfloor,\n      currentStep:0\n    });\n  };\n\n  handleBuildingView = () => {\n    this.setState({\n      showInstructions: false,\n    });\n  };\n\n  previousButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if(this.state.srcfloor !== this.state.dstfloor){\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    // if (currentStep < instructionSet.length) {\n    //   this.multifloorNext(instructionSet);\n    // }\n      if (currentStep !== 0) {\n        if (currentStep < instructionSet.length) {\n          this.multifloorPrev(instructionSet);\n        }\n      }\n    }else{\n      if (currentStep !== 0) {\n        if (currentStep < this.state.pathCaption.length) {\n          this._prev();\n        }\n      }\n    }\n\n  \n    return null;\n  }\n\n  nextButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if(this.state.srcfloor !== this.state.dstfloor){\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    if (currentStep < instructionSet.length) {\n      this.multifloorNext(instructionSet);\n    }\n    }else{\n      if (currentStep < this.state.pathCaption.length) {\n        this._next();\n      }\n    }\n    return null;\n  }\n\n  _next = () => {\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= this.state.pathCaption.length - 1\n        ? this.state.pathCaption.length\n        : currentStep + 1;\n\n    if (this.state.pathCaption[currentStep]) {\n      let step = this.state.pathCaption[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    // if (\n    //   this.state.pathFloor[currentStep] !== undefined &&\n    //   this.state.pathFloor[currentStep].floor !==\n    //     this.state.pathFloor[currentStep - 1].floor\n    // ) {\n    //   this.navigateNext();\n    // }\n\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  multifloorNext = (instructionSet)=>{\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= instructionSet.length - 1\n        ? instructionSet.length\n        : currentStep + 1;\n    if (instructionSet[currentStep]) {\n      let step = instructionSet[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  multifloorPrev = (instructionSet)=>{\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n    if (this.state.pathFloor[currentStep] !== undefined) {\n      let step = instructionSet[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  _prev = () => {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n    if (this.state.pathFloor[currentStep] !== undefined) {\n      let step = this.state.pathCaption[currentStep];\n      console.log(\"step\",step)\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n\n      // if (\n      //   this.state.pathFloor[currentStep + 1].floor !==\n      //   this.state.pathFloor[currentStep].floor\n      // ) {\n      //   let step = this.state.pathCaption[currentStep-1];\n      //   var utter = new window.SpeechSynthesisUtterance(step);\n      //   window.speechSynthesis.cancel();\n      //   window.speechSynthesis.speak(utter);\n      //   // this.navigatePrevious();\n      // }\n    }else{\n      \n   \n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  playInstruction = (pause)=>{\n    var synth = window.speechSynthesis;\n    synth.cancel();\n    if(pause === true){\n      synth.pause();\n    }else{\n      synth.resume();\n    }\n    // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n    // synth.speak(utterance);\n    // synth.resume()\n    let instruction = this.filterInstruction()\n\n    instruction.forEach(r=>{\n      var utterance1 = new SpeechSynthesisUtterance(r);\n      synth.speak(utterance1);\n    })\n  }\n\n  filterInstruction = ()=>{\n    var instructions = [];\n    var stepsCount = [];\n    let instruction;\n    if(this.state.srcfloor === this.state.dstfloor){\n      instruction = this.state.pathCaption\n    }else{\n      instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    }\n    instructions = instruction &&  instruction.map((r, i) => {\n                        if (\n                          r.includes(\"right\") ||\n                          r.includes(\"Right\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"left\") ||\n                          r.includes(\"Left\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"forward\")\n                        ) {\n                          console.log(\"'r\",r)\n\n                          let theNum  = r.match(/\\d+/)[0]\n                          stepsCount.push(parseInt(theNum))\n                          return r \n                        } else if (\n                          r.includes(\"Turn 1 O' Clock\") ||\n                          r.includes(\"Turn 2 O' Clock\") ||\n                          r.includes(\"Turn 3 O' Clock\") \n                        ) {\n                          return'Turn slight right' \n                        }else if(  \n                          r.includes(\"Turn 4 O' Clock\") ||\n                          r.includes(\"Turn 5 O' Clock\")){\n                            return 'Turn back and then turn slight left' \n                        } else if (\n                          r.includes(\"Turn 7 O' Clock\") ||\n                          r.includes(\"Turn 8 O' Clock\") ||\n                          r.includes(\"Turn 9 O' Clock\") \n                        ) {\n                          return 'turn slight left'\n                        }else if(                        \n                          r.includes(\"Turn 10 O' Clock\") ||\n                          r.includes(\"Turn 11 O' Clock\")){\n                            return 'Turn back and then turn slight left'\n                        } else if (\n                          r.includes(\"Turn 6 O' Clock\")\n                        ) {\n                          return 'Turn back'\n                        } else if (r.includes(\"You are at\")) {\n                          return r\n                        } else if (r.includes(\"reached\")) {\n                          return r\n                        } else if (\n                          r.includes(\"Turn 0 O' Clock\") ||\n                          r.includes(\"Turn 12 O' Clock\")\n                        ) {\n                          return null \n                        }else{\n                          return r\n                        }\n    })\n    console.log(\"instrcutsion\",instruction)\n    var distance\n\n    if(instructions){\n      const add = arr => arr.reduce((a, b) => a + b, 0);\n      distance = add(stepsCount);\n      instructions = instructions.filter( (el)=> {\n        return el != null;\n      });\n    }\n    // instructions.splice(instructions.length-2, 1);\n    return instructions;\n  }\n\n  handleSourceLocation = (vals)=>{\n      this.setState(\n        {\n          selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          buildingView: false\n        },\n        () => {\n          this.props.androidNavigation({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding},()=>{\n          })\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"srcBuildingLocation\"\n          );\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"dstBuildingLocation\"\n          );\n          if(this.state.dstName !== \"Select Destination\"){\n            this.handleSubmit()\n          }else{\n            this.setNavigation(this.state.selectedDstLocation);\n          }\n        }\n      );\n  }\n\n\n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n      <React.Fragment>\n        <div hidden={!this.state.showInstructions}>\n          <Instructions\n            dstAddress={this.state.dstAddress}\n            globalTime={this.state.globalTime}\n            globalDistance={this.state.globalDistance}\n            currentLocation={this.state.currentLocation}\n            handleBuildingView={this.handleBuildingView}\n            instructionSet={\n               combineInstructions\n            }\n            buildingView={this.state.buildingView}\n            sourceLocation={this.state.currentLocation}\n            dstLocation={this.state.dstAddress}\n          />\n        </div>\n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView && ! this.state.showStrtMenu && !this.state.showDstMenu ? (\n            <React.Fragment>\n                  <div\n                className=\"src-dst fixed-top\"\n                id=\"src-bar\"\n                // style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        localStorage.setItem('cuurent-link','SELECT STARTING POINT')\n                        this.setState({\n                          showStrtMenu: true,\n                          showDstMenu:false,\n                          srcReadOnly: false\n                        },()=>{\n                          this.props.navContent('SELECT STARTING POINT',()=>{\n\n                          })\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button>\n               \n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto mt-3\" \n                // style={{marginTop:\"50px\"}}\n                >\n                <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          showStrtMenu:false,\n                          dstReadOnly: false\n                        },()=>{\n                          this.props.navContent('SELECT DESTINATION',()=>{\n\n                          })\n                        });\n                      }}\n                    >\n                       <img\n                        className=\"float-left mt-2 mr-2 my-auto\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          ) : null}       \n        {this.state.showStrtMenu\n                ? \n               \n                <SelectSource\n                srcName = {this.state.srcName}\n                currentLocation = {this.state.currentLocation}\n                selectedSrcLocation = {this.state.selectedSrcLocation}\n                locationList = {this.state.locationList}\n                srcReadOnly = {this.state.srcReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    srcReadOnly:!this.state.srcReadOnly\n                  })\n                }}\n                handleDstAct = {()=>{\n                  this.setState({\n                    destinationActive:true\n                  })\n                }}\n                srcFloorList = {this.state.srcFloorList}\n                dstAddress = {this.state.dstAddress}\n                showStrtMenu = {() => {\n                  this.setState({ showStrtMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                    this.setState({\n                      selectedVenue:val,\n                      selectedDestinationVenue:val,\n                      destinationActive:false,\n                      showMenu:true\n                    },()=>{\n                      this.getBuildingList(val)\n                    })\n                }}\n                selectedVenue = {this.state.selectedVenue}\n                buildingList = {this.state.buildingList}\n                showMenu = {this.state.showMenu}\n                selectedBuilding = {this.state.selectedBuilding}\n                buildingChange = {( vals )=>{\n\n                    this.setState({\n                      selectedBuilding:vals,\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n                handleSelectSource = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        tmpSrcLocation: e[0],\n                      },\n                      () => {\n                        this.handleSrcChange(e);\n                      }\n                    );\n                  }\n                }}\n                handleSourceLocation = {(e)=>{\n                  console.log(\"ee\",e)\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        selectedSrcLocation: e[0],\n                        selectedDstLocation: e[0],\n                        buildingView: false,\n                        selectedVenue:e[0].venueName,\n                        selectedBuilding:e[0].buildingName\n                      },\n                      () => {\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                        })\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"srcBuildingLocation\"\n                        );\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"dstBuildingLocation\"\n                        );\n                        if(this.state.dstName !== \"Select Destination\"){\n                          this.handleSubmit()\n                        }else{\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      }\n                    );\n                  }\n                }}\n                />\n                :null}\n                \n              {this.state.showDstMenu\n                ? \n                <SelectDestination\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    dstReadOnly:!this.state.dstReadOnly\n                  })\n                }}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                  this.setState({\n                    selectedDestinationVenue:val,\n                    destinationActive:true,\n                    showMenu:true\n                  },()=>{\n                    this.getBuildingList(val)\n                  })\n                }}\n                handleDstAct = {()=>{\n                  this.setState({\n                    destinationActive:true\n                  })\n                }}\n                selectedVenue = {this.state.selectedDestinationVenue}\n                buildingList = {this.state.buildingList}\n                selectedBuilding = {this.state.selectedDestinationBuilding}\n                selBuild={this.state.selectedDestinationBuilding}\n                buildingChange = {( vals )=>{\n                    this.setState({\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true,\n                      destinationActive:false,\n                      showMenu:false\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      // if (\n                      //   this.state.selectedSrcLocation.venueName ===\n                      //     this.state.selectedDstLocation.venueName &&\n                      //   this.state.selectedSrcLocation.buildingName ===\n                      //     this.state.selectedDstLocation.buildingName\n                      // ) {\n                      //   this.setNavigation(this.state.selectedDstLocation);\n                      // }\n                      if (\n                        this.state.selectedVenue ===\n                          this.state.selectedDestinationVenue &&\n                        this.state.selectedBuilding ===\n                          this.state.selectedDestinationBuilding\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                :null}\n\n          {this.state.buildingView ? (\n            <InstructionTab\n              pathCaption={combineInstructions}\n              currentStep={this.state.currentStep}\n              nextButton={()=>this.nextButton()}\n              imgDiv={this.imgDiv}\n            />\n          ) : null}\n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={!this.state.samefloor}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n          { !this.state.instructionReady ? (\n            <GlobalDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation = {this.state.dstBuildingLocation}\n              tmpDstLocation = {this.state.tmpDstLocation}\n              destinationVenue = {this.state.selectedDestinationVenue}\n              destinationBuilding = {this.state.selectedDestinationBuilding}\n              dstfloor = {this.state.dstfloor}\n              dstVal = {this.state.dstVal}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              openModal = {this.onOpenModal}\n              closeBuilding = {()=>{\n                this.setState({\n                  buildingView: false\n                });\n              }}\n              // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              instructionSet={\n                combineInstructions\n              }\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            // null\n          ) : (\n            <React.Fragment>\n            <NavigationDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation={this.state.dstBuildingLocation}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              currentStep = {this.state.currentStep}\n              nextButton = {this.nextButton}\n              previousButton = {this.previousButton}\n              instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              playInstruction={(pause)=>{\n                this.playInstruction(pause)\n              }\n              }\n              closeBuilding = {() => {\n                this.setState({\n                  buildingView: false,\n                  instructionReady: false,\n                  zoom: false\n                });\n              }}\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            </React.Fragment>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile:state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation,\n    globalRoutes:state.osmRoutes,\n    pickupPoint:state.pickupPoints,\n    currentTab:state.navContent\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent\n})(Navigation);\n"]},"metadata":{},"sourceType":"module"}