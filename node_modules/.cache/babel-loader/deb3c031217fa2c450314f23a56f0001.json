{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jahnavi/navigation/src/components/dashboard/navigation/Konva.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { Map as MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport { floorList, imgDetails, getAllBuildingElements, venueList, buildingList, getGpsLocation, androidNavigation, getUserPortfolio } from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport { Stage, Layer, Star, Rect, Text } from 'react-konva';\nimport Konva from 'konva';\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n\n}\n\nclass ColoredRect extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getUserDetails = () => {\n      let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({\n        id,\n        token\n      }, () => {\n        // console.log(\"user profile\",this.props.userProfile)\n        if (this.props.userProfile.success === false) {\n          localStorage.clear();\n          this.props.history.push('/');\n        } else {\n          let data = this.props.userProfile.properties;\n          this.setState({\n            language: data.language,\n            visionType: data.visionType,\n            height: data.height,\n            ageGroup: data.ageGroup,\n            walkingType: data.navigationMode\n          });\n        }\n      });\n    };\n\n    this.fetchLocation = (venueName, buildingName, point) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        let flrListData = this.props.flrList.data;\n        let prevData = this.state.center;\n        this.setState({\n          center: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          currentPos: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle: parseInt(flrListData[0].buildingOrientation)\n          }\n        }, () => {\n          this.props.getAllBuildingElements(data, () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(new L.LatLng(flrListData[0].lat, flrListData[0].lng), map.getZoom(), {\n              animate: true,\n              duration: 0.5\n            });\n            let nodes = this.props.navigationInfo;\n            let lists = [];\n\n            for (let i = 0; i < nodes.length; i++) {\n              var sel = nodes[i].properties;\n              lists.push(sel);\n            }\n\n            const uniqueLists = Array.from(new Set(lists.map(o => {\n              if (o.floorElement === \"Rooms\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"FloorConnection\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"Services\") {\n                return o.coordinates;\n              } else if (o.floorElement === \"RestRooms\") {\n                return o.coordinates;\n              } else {// return o.coordinates\n              }\n            }))).map(id => {\n              return lists.find(a => a.coordinates === id);\n            });\n            let freeBeacon = uniqueLists.map(r => {\n              if (r.floorElement === \"Services\") {\n                if (r.type === \"Beacons\") {\n                  return null;\n                } else {\n                  return r;\n                }\n              } else {\n                return r;\n              }\n            });\n            let freeData = freeBeacon.filter(el => {\n              return el != null;\n            });\n            freeData.sort((a, b) => {\n              if (a.floorElement === \"Rooms\") {\n                if (a.roomName !== undefined) {\n                  return a.roomName < b.roomName ? -1 : a.roomName > b.roomName ? 1 : 0;\n                } else {\n                  return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n                }\n              } else {\n                return a.type < b.type ? -1 : a.type > b.type ? 1 : 0;\n              }\n            });\n\n            if (point === \"srcBuildingLocation\") {\n              this.setState({\n                srcFloorList: freeData\n              });\n            } else if (point === \"dstBuildingLocation\") {\n              let me = this;\n              let srcLat = this.state.srcBuildingLocation.lat;\n              let srcLng = this.state.srcBuildingLocation.lng;\n\n              if (!srcLat && !srcLng) {\n                srcLat = prevData.lat;\n                srcLng = prevData.lng;\n              }\n\n              map.fitBounds(L.latLngBounds(L.latLng(srcLat, srcLng), L.latLng(flrListData[0].lat, flrListData[0].lng)));\n              this.setState({\n                dstFloorList: freeData,\n                zoomLevel: \"10\"\n              });\n            }\n          });\n        });\n      });\n    };\n\n    this.getVenueList = (coordinates = null) => {\n      this.props.venueList(() => {\n        this.setState({\n          venueList: this.props.vnList.data\n        }, () => {\n          this.findNearVenue(coordinates);\n        });\n      });\n    };\n\n    this.findNearVenue = coordinates => {\n      let {\n        venueList\n      } = this.state;\n      let distList = venueList.map(r => {\n        return this.getDistance(coordinates, r);\n      });\n      let arr = [];\n      let list = this.state.venueList.map((r, i) => {\n        if (r.buildingList) {\n          let dt = r.buildingList.map(k => {\n            arr.push({\n              venueName: r.venueName,\n              buildingName: k,\n              venueDistance: distList[i].distance\n            });\n            return {\n              venueName: r.venueName,\n              buildingName: k,\n              venueDistance: distList[i].distance\n            };\n          });\n          return dt;\n        } else {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: \"\",\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: \"\",\n            venueDistance: distList[i].distance\n          };\n        }\n      });\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n\n        if (tmp > highest) highest = tmp;\n      }\n\n      let listArr = this.state.locationList.map(r => {\n        let k = distList.map(d => {\n          if (d.venueName === r.venueName) {\n            return {\n              r,\n              distance: d.distance\n            };\n          }\n        });\n      });\n      let sortedArr = this.quickSort(arr);\n\n      if (lowest < 1) {\n        this.setState({\n          currentVenue: nearLocation,\n          locationList: arr\n        }, () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        });\n      } else {\n        this.setState({\n          currentVenue: {\n            address: \"\",\n            coordinates: [],\n            dateCreated: \"\",\n            distance: 2,\n            id: 35,\n            liveStatus: true,\n            organization: \"\",\n            venueName: \"\"\n          },\n          selectedLocation: {\n            venueName: \"Venue\",\n            buildingName: \"Building\"\n          },\n          locationList: arr,\n          currentBuilding: {\n            address: \"\",\n            buildingName: \"\",\n            coordinates: [],\n            distance: 2,\n            lat: 0,\n            lng: 0\n          }\n        });\n      }\n    };\n\n    this.quickSort = arr => {\n      if (arr.length < 2) {\n        return arr;\n      }\n\n      let pivot = arr[0];\n      let lesserVal = [];\n      let greaterVal = [];\n\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[k].venueDistance < pivot.venueDistance) {\n          lesserVal.push(arr[k]);\n        } else {\n          greaterVal.push(arr[k]);\n        }\n      }\n    };\n\n    this.getBuildingList = (venueName, coordinates) => {\n      this.props.buildingList({\n        venueName: venueName\n      }, () => {\n        this.setState({\n          buildingList: this.props.bldList.data\n        }, () => {\n          if (this.state.buildingList.length > 0) {\n            this.findNearBuilding(coordinates);\n          } else {\n            this.setState({\n              selectedLocation: {\n                venueName: venueName,\n                buildingName: \"\"\n              }\n            });\n          }\n        });\n      });\n    };\n\n    this.findNearBuilding = coordinates => {\n      let {\n        buildingList\n      } = this.state;\n      let distList = buildingList.map(r => {\n        let p = [r.lat, r.lng];\n        r.coordinates = p;\n        return this.getDistance(coordinates, r);\n      });\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n\n        if (tmp > highest) highest = tmp;\n      }\n\n      if (lowest < 50) {\n        this.setState({\n          currentBuilding: nearLocation,\n          selectedLocation: {\n            venueName: this.state.currentVenue.venueName,\n            buildingName: nearLocation.buildingName\n          }\n        }, () => {\n          this.setNavigation(this.state.selectedLocation);\n          this.fetchLocation(this.state.selectedLocation.venueName, this.state.selectedLocation.buildingName);\n        });\n      }\n    };\n\n    this.rad = function (x) {\n      return x * Math.PI / 180;\n    };\n\n    this.getDistance = function (p1, p2) {\n      var R = 6378137; // Earth’s mean radius in meter\n\n      var dLat = this.rad(p2.coordinates[0] - p1[0]);\n      var dLong = this.rad(p2.coordinates[1] - p1[1]);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.rad(p1[0])) * Math.cos(this.rad(p2.coordinates[0])) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      var d = R * c / 1000;\n      p2.distance = d;\n      return p2; // returns the distance in km\n    };\n\n    this.setNavigation = data => {\n      // this.props.androidNavigation(data, () => {\n      // })\n      this.grids_all = [];\n      this.props.getAllBuildingElements(data, () => {\n        let nodes = this.props.navigationInfo;\n        let lists = [];\n        let num_vert = 0;\n        let fc = new Map();\n\n        for (let i = 0; i < nodes.length; i++) {\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            num_vert++;\n            var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n\n            if (fc.has(v) === false) {\n              fc.set(v, [val]);\n            } else {\n              fc.get(v).push(val);\n            }\n          }\n        }\n\n        this.graph = new Graph(num_vert + 2);\n\n        for (let i = 0; i < nodes.length; i++) {\n          var sel = nodes[i].properties;\n          lists.push(sel);\n\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n            this.graph.addVertex(val);\n          }\n\n          if (nodes[i].properties.floorElement === \"Floor\") {\n            if (nodes[i].properties.length == 8) {\n              var v = nodes[i].properties.frConn[0].split(\",\");\n              var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n              var len = v.length / 2;\n\n              if (v.length % 2 === 0) {\n                for (var j = 0; j < v.length; j = j + 2) {\n                  var val = parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) + parseInt(v[j]);\n                  var vert1 = nodes[i].properties.floor + \",\" + val;\n\n                  for (var k = j + 2; k < v.length; k = k + 2) {\n                    val = parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) + parseInt(v[k]);\n                    var vert2 = nodes[i].properties.floor + \",\" + val;\n                    this.graph.addEdge(vert1, vert2, flrmatrix[len * (j / 2) + k / 2], true);\n                  }\n                }\n              } else {}\n            }\n\n            this.grids_all.push(nodes[i]);\n          }\n        }\n\n        let getKeys = fc.keys();\n\n        for (let i of getKeys) {\n          var get_values = fc.get(i);\n          var cnt = 0;\n          var prev = null;\n\n          for (var j of get_values) {\n            if (cnt > 0) {\n              this.graph.addEdge(prev, j, 0, true);\n              prev = j;\n            }\n\n            if (cnt === 0) {\n              prev = j;\n            }\n\n            cnt++;\n          }\n        } // if(this.state.srcfloor === this.state.dstfloor){\n\n\n        this.setState({\n          // canvasWidth: cvWidth,\n          // canvasHeight: height_of_canvas,\n          list: lists\n        }); // }\n      });\n    };\n\n    this.toggle = (type, value) => event => {\n      this.setState(state => {\n        return {\n          [type]: value\n        };\n      });\n    };\n\n    this.findFloor = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (array[i].type) {\n            if (array[i].geomtery.type === \"Polygon\") {\n              if (array[i].properties.floor === key) {\n                return i;\n              }\n            }\n          }\n\n          if (array[i].floor === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n      let {\n        scale\n      } = this.state;\n\n      if (color === \"red\") {\n        let srcDiv = document.getElementById(\"srcImage\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n      } else if (color === \"yellow\") {\n        let lift = document.getElementById(\"lift\");\n        let stairs = document.getElementById(\"stairs\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        var rot = Math.PI / 2 * 3;\n        var x = pos_x;\n        var y = pos_y;\n        var step = Math.PI / 5;\n        let frConnType = \"\";\n        let data = this.props.navigationInfo.map(r => {\n          return r.properties;\n        });\n\n        for (let k = 0; k < data.length; k++) {\n          if (data[k].node === i) {\n            frConnType = data[k].type;\n          }\n        }\n\n        if (frConnType === \"Stairs\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n        } else if (frConnType === \"Lift\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n        }\n      } else if (color === \"green\") {\n        let dstDiv = document.getElementById(\"dstImage\");\n        let {\n          scale\n        } = this.state;\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n      }\n    };\n\n    this.color_canvas = (i, place, color) => {\n      let srcDiv = document.getElementById(\"srcImage\");\n      let dstDiv = document.getElementById(\"dstImage\");\n\n      if (place === \"srcmap\") {\n        let {\n          srcfloorL,\n          scale\n        } = this.state;\n        var canvas = document.getElementById(\"myCanvassrc\");\n        var context = canvas.getContext(\"2d\"); // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n        // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n        var wrh = this.state.srcfloorL / this.state.srcfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx = newWidth / this.state.srcfloorL;\n        let gpy = newHeight / this.state.srcfloorB;\n        var posX = gpx * (i % srcfloorL);\n        var posY = gpy * parseInt(i / srcfloorL);\n        var halfScale = scale / 2;\n        posX = posX + halfScale;\n        posY = posY + halfScale;\n\n        if (color === \"green\") {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n        } else if (color === \"#bdbdbd\") {\n          let {\n            dstfloorL,\n            scale\n          } = this.state;\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.fillStyle = color;\n          context.globalAlpha = 1;\n          context.fillRect(posX, posY, scale, scale);\n        } else {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(srcDiv, posX - 9, posY, 15, 15);\n        }\n      } else {\n        let {\n          dstfloorL,\n          scale\n        } = this.state;\n        let canvas = document.getElementById(\"myCanvasdst\");\n        let context = canvas.getContext(\"2d\");\n        let posX = scale * (i % dstfloorL);\n        let posY = scale * parseInt(i / dstfloorL);\n        context.fillStyle = color;\n        context.fillRect(posX, posY, scale, scale);\n      }\n    };\n\n    this.find = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.find_fl = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key && array[i].floor == \"floorconnection\") {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.handleSubmit = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal,\n        dstfloorL,\n        dstfloorB\n      } = this.state;\n\n      if (srcVal != null && dstVal != null) {\n        var divimg = document.getElementById(\"mydiv1\");\n        var divcan = document.getElementById(\"mydiv\");\n        var len = divimg.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divimg.childNodes[0].remove();\n        }\n\n        len = divcan.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divcan.childNodes[0].remove();\n        }\n\n        if (srcfloor === dstfloor) {\n          var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n          let ratio = cvWidth / dstfloorL;\n          let height_of_canvas = ratio * dstfloorB;\n          let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n          this.setState({\n            samefloor: true,\n            scale: factor\n          });\n          var img1 = new Image();\n          var img = document.getElementById(\"myImage\");\n          img1.src = img.src;\n          img1.hidden = true;\n          var color_canvas = this.color_canvas;\n          var me = this;\n          var dest_x = this.state.dstVal % this.state.dstfloorL;\n          var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n          let imgDiv = document.getElementById(\"myImage\");\n          this.imgDiv = imgDiv;\n          let angle = 0; // status of the pointer(s)\n\n          let pointerangle;\n          var canvas = window.d3.select(\"canvas\").call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", zoom)),\n              context = canvas.node().getContext(\"2d\"),\n              width = canvas.property(\"width\"),\n              height = canvas.property(\"height\");\n          var active = window.d3.select(null);\n          var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n          var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n\n          function zoom() {\n            me.setState({\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            }, () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            });\n          }\n\n          function draw() {\n            if (active.node() === this) return reset();\n            active.classed(\"active\", false);\n            active = window.d3.select(this).classed(\"active\", true);\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            context.rotate(angle);\n            context.globalAlpha = 0.2;\n            context.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight); // me.loadNonwalkable(\"myCanvassrc\")\n\n            me.callwhile(me.state.srcfloor, me.state.srcVal, me.state.srcfloorL, me.state.srcfloorB, dest_x, dest_y, true, \"myCanvassrc\");\n            color_canvas(srcVal, \"srcmap\", \"red\");\n            color_canvas(dstVal, \"srcmap\", \"green\");\n          }\n\n          function reset() {\n            active.classed(\"active\", false);\n            active = window.d3.select(null);\n            canvas.transition().duration(750).call(zoom1.transform, initialTransform);\n          }\n\n          function timer(ms) {\n            return new Promise(res => setTimeout(res, ms));\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY); // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n\n          img1.onload = function () {\n            draw();\n            zoomTo();\n          };\n        } else {\n          this.setState({\n            samefloor: false,\n            buildingView: true\n          });\n          this.findpath();\n        }\n      } else {}\n    };\n\n    this.loadNonwalkable = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData = navInfo.filter(r => {\n        return r.floor === srcfloor;\n      });\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpath(start, nodes[j]);\n          this.color_canvas(start, \"srcmap\", \"#bdbdbd\");\n          start = nodes[j];\n        }\n\n        this.color_canvas(nodes[0], \"srcmap\", \"#bdbdbd\");\n      }\n    };\n\n    this.loadMultiFloorNonwalkable = id => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData;\n\n      if (id === \" canvas0\") {\n        floorData = navInfo.filter(r => {\n          return r.floor === srcfloor;\n        });\n      } else {\n        floorData = navInfo.filter(r => {\n          return r.floor === dstfloor;\n        });\n      }\n\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpathMulti(start, nodes[j], id); // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n\n          start = nodes[j];\n        } // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n\n      }\n    };\n\n    this.oldpath = (x, y) => {\n      // x = coord_val  y=coord_val in normal\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else {\n        g = dstfloorL * e + f;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n        this.oldpath(g, x);\n        this.oldpath(g, y);\n      }\n    };\n\n    this.color = (i, color, canvasid) => {\n      let posX, posY, gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      } else {\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);\n    };\n\n    this.oldpathMulti = (x, y, id) => {\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color(g, \"#bdbdbd\", id);\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color(g, \"#bdbdbd\", id);\n      } else {\n        g = dstfloorL * e + f;\n        this.color(g, \"#bdbdbd\", id);\n        this.oldpathMulti(g, x, id);\n        this.oldpathMulti(g, y, id);\n      }\n    };\n\n    this.interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n      let resultpath = [];\n\n      if (turningPointsPath.length === 1) {\n        resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n        return resultpath;\n      }\n\n      for (let i = 0; i < turningPointsPath.length - 1; i++) {\n        let points = this.interpolatePoints(turningPointsPath[i], turningPointsPath[i + 1], seperationGap, gpx, gpy);\n\n        for (let k = 0; k < points.length; k++) {\n          resultpath.push(points[k]);\n        } // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n\n      }\n\n      return resultpath;\n    };\n\n    this.simplifyPath = (points, tolerance) => {\n      // helper classes\n      var Vector = function (x, y) {\n        this.x = x;\n        this.y = y;\n      };\n\n      var Line = function (p1, p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n\n        this.distanceToPoint = function (point) {\n          // slope\n          var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n              // y offset\n          b = this.p1.y - m * this.p1.x,\n              d = []; // distance to the linear equation\n\n          d.push(Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)); // distance to p1\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2))); // distance to p2\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2))); // return the smallest distance\n\n          return d.sort(function (a, b) {\n            return a - b; //causes an array to be sorted numerically and ascending\n          })[0];\n        };\n      };\n\n      var douglasPeucker = function (points, tolerance) {\n        if (points.length <= 2) {\n          return [points[0]];\n        }\n\n        var returnPoints = [],\n            // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n            // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n            maxDistanceIndex = 0,\n            p;\n\n        for (var i = 1; i <= points.length - 2; i++) {\n          var distance = line.distanceToPoint(points[i]);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxDistanceIndex = i;\n          }\n        } // check if the max distance is greater than our tollerance allows\n\n\n        if (maxDistance >= tolerance) {\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true); // include this point in the output\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)); // returnPoints.push( points[maxDistanceIndex] );\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(maxDistanceIndex, points.length), tolerance));\n        } else {\n          // ditching this point\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true);\n          returnPoints = [points[0]];\n        }\n\n        return returnPoints;\n      };\n\n      var arr = douglasPeucker(points, tolerance); // always have to push the very last point on so it doesn't get left off\n\n      arr.push(points[points.length - 1]);\n      return arr;\n    };\n\n    this.find_angle = (p0, p1, c) => {\n      var p0c = {\n        x: c.x - p0.x,\n        y: c.y - p0.y\n      }; // p0->c (b)\n\n      var cp1 = {\n        x: p1.x - c.x,\n        y: p1.y - c.y\n      }; // p1->c (a)\n\n      return Math.atan2(cp1.y * p0c.x - cp1.x * p0c.y, p0c.x * cp1.x + p0c.y * cp1.y) * 180 / Math.PI;\n    };\n\n    this.findDirectionword = angle => {\n      if (angle >= 75 && angle <= 105) return \"Turn Right\";\n      if (angle <= -75 && angle >= -105) return \"Turn Left\";\n      if (angle >= 165 && angle <= 180 || angle <= -165 && angle >= -180) return \"Go Straight\";\n\n      if (angle < 0) {\n        if (Math.round((360 + angle) / 30) === 9) {\n          return \"Turn Left\";\n        }\n\n        return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n      }\n\n      if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n      return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n    };\n\n    this.findErrorInAngle = angle => {\n      if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n      return angle - Math.round(angle / 30) * 30;\n    };\n\n    this.findDirectionAbbreviation = angle => {\n      if (angle > 0) return \"Right\";\n      return \"Left\";\n    };\n\n    this.findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n      //length of refined and non refined paths\n      var nRefined = refinedPoints.length;\n      var nNonRefined = nonRefinedPoints.length; //converting the mapElements to ordered map for ease of access\n\n      var ElementMap = new Map();\n      var includedSet = new Set();\n      var word; //for iteration purpose\n\n      var currentNRPoint = 0;\n      var currentRPoint = 0;\n      var flagList = [];\n      var i = 0;\n      var j = 0; //radius defines what range to cover in a path\n\n      var radius = 3; //adding the elements to map\n\n      for (i = 0; i < mapElements.length; i++) {\n        let props = mapElements[i].properties;\n\n        if (props.floorElement === \"Rooms\") {\n          if (props.floor === floor && props.roomName !== \"undefined\" && props.coordinates !== undefined) {\n            Object.keys(props).map(id => {\n              if (id === 'roomName') {\n                props[`name`] = [...props[id]].join('');\n                delete props[id];\n              }\n            });\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          }\n        } else if (props.floorElement === \"FloorConnection\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) {\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n          }\n        } else if (props.floorElement === \"Services\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else if (props.floorElement === \"RestRooms\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else {}\n      } //finding the indices of the\n\n\n      while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n        if (nonRefinedPoints[currentNRPoint][0] === refinedPoints[currentRPoint].x && nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y) {\n          flagList.push(currentNRPoint);\n          currentRPoint++;\n        }\n\n        currentNRPoint++;\n      } // Generating the direction and elaborated results\n\n\n      var DirectionResults = [];\n      var ElaboratedResults = []; //entry point insertion to the list\n\n      DirectionResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      ElaboratedResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n      includedSet.add(refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y); //iterate and /finding the desired results\n\n      var error = 0;\n\n      for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n        var angle = 0;\n        var coordinates; // this.actualAngle = 155\n\n        if (currentRPoint === 0) {\n          angle = this.find_angle({\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          }, refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n          let path_angle = angle;\n          let floorangle = this.state.floorAngle;\n          let diff = 360 - floorangle; // let CurrentDirection = 60;\n\n          let CurrentDirection = this.actualAngle; // rotateDirection\n\n          this.setState({\n            pathAngle: path_angle\n          });\n          let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n          angle = gn;\n        } else angle = this.find_angle(refinedPoints[currentRPoint - 1], refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n\n        angle = angle + error;\n        error = this.findErrorInAngle(angle);\n\n        if (currentRPoint == nRefined - 2) {\n          word = this.findDirectionword(angle);\n          DirectionResults.push(word);\n          DirectionResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\");\n          ElaboratedResults.push(word);\n          ElaboratedResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\");\n          DirectionResults.push(\"You are about to reach:\" + ElementMap.get(refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name + \" on your \" + this.findDirectionAbbreviation(angle));\n          ElaboratedResults.push(\"You are about to reach:\" + ElementMap.get(refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name + \" on your \" + this.findDirectionAbbreviation(angle));\n          break;\n        }\n\n        word = this.findDirectionword(angle);\n        DirectionResults.push(word);\n        DirectionResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\");\n        ElaboratedResults.push(word);\n        ElaboratedResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\"); //this part of code handles the intermediate importatnt rooms\n\n        var begin = flagList[currentRPoint] + 1;\n        var end = flagList[currentRPoint + 1];\n\n        while (begin < end) {\n          var currpoint = nonRefinedPoints[begin];\n\n          for (i = Math.max(0, currpoint[0] - radius); i < currpoint[0] + radius; i++) {\n            for (j = Math.max(0, currpoint[1] - radius); j < currpoint[1] + radius; j++) {\n              if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n                var tempAngle = this.find_angle({\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                }, {\n                  x: i,\n                  y: j\n                }, {\n                  x: nonRefinedPoints[begin][0],\n                  y: nonRefinedPoints[begin][1]\n                });\n                ElaboratedResults.push(ElementMap.get(i + \"@\" + j).roomName + \" on your \" + this.findDirectionAbbreviation(tempAngle));\n                includedSet.add(i + \"@\" + j);\n              }\n            }\n          }\n\n          begin++;\n        }\n      }\n\n      DirectionResults.push(\"You will reach \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name); // \"You have reached \" +\n      //   ElementMap.get(\n      //     \"\" +\n      //       refinedPoints[nRefined - 1].x +\n      //       \"@\" +\n      //       refinedPoints[nRefined - 1].y\n      //   ).roomName\n\n      ElaboratedResults.push(\"You have reached \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name);\n      let resultMap = DirectionResults.map(r => {\n        return {\n          instruction: r,\n          floor: floor\n        };\n      });\n      resultMap.forEach(element => {\n        this.setState(prevState => ({\n          pathFloor: [...prevState.pathFloor, element]\n        }));\n      });\n      let step = DirectionResults[0];\n\n      if (this.state.srcfloor === this.state.dstfloor) {\n        if (this.state.zoom === false) {\n          this.setState(prevState => ({\n            pathArray: [...prevState.pathArray, DirectionResults],\n            srtdFlr: [...prevState.srtdFlr, floor],\n            instructionReady: true\n          }), () => {\n            let flrArry = [this.state.srcfloor, this.state.dstfloor];\n\n            if (this.state.pathArray.length === 2) {\n              for (let k = 0; k < flrArry.length; k++) {\n                if (this.state.srtdFlr[k] === flrArry[k]) {\n                  const merge3 = this.state.pathArray.flat(1);\n                  this.setState({\n                    pathCaption: merge3\n                  });\n                }\n              }\n            } else {\n              for (let k = 0; k < DirectionResults.length; k++) {\n                this.setState(prevState => ({\n                  pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n                }));\n              }\n            }\n          });\n        }\n      } else {\n        if (this.state.srcfloor === floor) {\n          this.setState({\n            firstFlrInstruction: DirectionResults,\n            firstFlr: floor,\n            currentFloor: floor // instructionReady:true\n\n          });\n        } else {\n          this.setState({\n            secondFlrInstruction: DirectionResults,\n            secondFlr: floor,\n            instructionReady: true\n          });\n        }\n      }\n    };\n\n    this.calculatePath = (path_angle, diff, CurrentDirection) => {\n      let pathGN, rotateDirection, path_angleN;\n\n      if (path_angle >= 0 && path_angle < 106) {\n        pathGN = 360 - (diff - path_angle);\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle > 105 && path_angle <= 180) {\n        pathGN = path_angle - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle <= -1 && path_angle >= -180) {\n        path_angleN = 180 + path_angle;\n        pathGN = path_angleN + 180 - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      }\n\n      return rotateDirection;\n    };\n\n    this.drawerToggleClickHandler = () => {\n      this.setState(prevState => {\n        return {\n          sideDrawerOpen: !prevState.sideDrawerOpen\n        };\n      });\n    };\n\n    this.backdropClickHandler = () => {\n      this.setState({\n        sideDrawerOpen: false\n      });\n    };\n\n    this.incCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale < 30) {\n        this.setState({\n          scale: scale + 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.decCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale > 2) {\n        this.setState({\n          scale: scale - 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.handleDstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      if (e.length > 0) {\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            resp = `${e[0].roomName}(${e[0].floor})`;\n\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].name}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\n          } else {}\n        }\n\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState({\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.dstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type} Washroom (${e.floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.handleSrcChange = e => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName ? navInfo[i].properties.roomName : navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        });\n        console.log(\"called\"); // setTimeout(() => {\n\n        this.handleSubmit(); // }, \"2000\");\n      });\n    };\n\n    this.srcChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onDstSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        dstSuggestions: this.getDstSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onDstSuggestionsClearRequested = () => {\n      this.setState({\n        dstSuggestions: []\n      });\n    };\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getDstSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getSuggestionValue = suggestion => {\n      this.srcChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.getDstSuggestionValue = suggestion => {\n      this.dstChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.renderSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2653,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.renderDstSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2668,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSrcChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        dstValue: newValue\n      });\n    };\n\n    this.nvgtSrcBld = () => {\n      let {\n        tmpSrcLocation\n      } = this.state;\n      let e = [tmpSrcLocation];\n      this.fetchSrcBldLocation(e, tmpSrcLocation.venueName, tmpSrcLocation.buildingName, \"srcBuildingLocation\", k => {\n        this.handleDstChange(k);\n      });\n    };\n\n    this.nvgtDstBld = () => {\n      let {\n        tmpDstLocation\n      } = this.state;\n      let e = [tmpDstLocation];\n      this.fetchDstBldLocation(e, tmpDstLocation.venueName, tmpDstLocation.buildingName, \"dstBuildingLocation\", k => {\n        this.handleDstChange(e);\n      });\n    };\n\n    this.fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              this.srcBldDstPointChange(e, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              let props = [navInfo[i].properties];\n              this.srcBldDstPointChange(props, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.srcBldDstPointChange = (e, cb) => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        });\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      });\n      cb();\n    };\n\n    this.navigateNext = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[0].style.display = \"none\";\n      div[1].style.display = \"block\";\n      this.setState({\n        next: false,\n        currentFloor: this.state.dstfloor\n      });\n    };\n\n    this.navigatePrevious = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[1].style.display = \"none\";\n      div[0].style.display = \"block\";\n      this.setState({\n        next: true,\n        currentFloor: this.state.srcfloor\n      });\n    };\n\n    this.handleBuildingView = () => {\n      this.setState({\n        showInstructions: false\n      });\n    };\n\n    this._next = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= this.state.pathCaption.length - 1 ? this.state.pathCaption.length : currentStep + 1;\n\n      if (this.state.pathCaption[currentStep]) {\n        let step = this.state.pathCaption[currentStep];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        let lang = localStorage.getItem(\"Language\");\n\n        if (lang === \"Hindi\") {\n          utter.lang = \"hi-IN\";\n        } else {\n          utter.lang = \"en-US\";\n        }\n\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n      }\n\n      if (this.state.pathFloor[currentStep] !== undefined && this.state.pathFloor[currentStep].floor !== this.state.pathFloor[currentStep - 1].floor) {\n        this.navigateNext();\n      }\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this._prev = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n      if (this.state.pathFloor[currentStep + 1] !== undefined) {\n        if (this.state.pathFloor[currentStep + 1].floor !== this.state.pathFloor[currentStep].floor) {\n          this.navigatePrevious();\n        }\n      }\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this.playInstruction = pause => {\n      var synth = window.speechSynthesis;\n      synth.cancel();\n\n      if (pause === true) {\n        synth.pause();\n      } else {\n        synth.resume();\n      } // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n      // synth.speak(utterance);\n      // synth.resume()\n\n\n      let instruction = this.filterInstruction();\n      instruction.forEach(r => {\n        var utterance1 = new SpeechSynthesisUtterance(r);\n        synth.speak(utterance1);\n      });\n    };\n\n    this.filterInstruction = () => {\n      var instructions = [];\n      var stepsCount = [];\n      let instruction = this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction;\n      instructions = instruction && instruction.map((r, i) => {\n        if (r.includes(\"right\") || r.includes(\"Right\")) {\n          return r;\n        } else if (r.includes(\"left\") || r.includes(\"Left\")) {\n          return r;\n        } else if (r.includes(\"forward\")) {\n          let theNum = r.match(/\\d+/)[0];\n          stepsCount.push(parseInt(theNum));\n          return r;\n        } else if (r.includes(\"Turn 1 O' Clock\") || r.includes(\"Turn 2 O' Clock\") || r.includes(\"Turn 3 O' Clock\")) {\n          return 'Turn slight right';\n        } else if (r.includes(\"Turn 4 O' Clock\") || r.includes(\"Turn 5 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 7 O' Clock\") || r.includes(\"Turn 8 O' Clock\") || r.includes(\"Turn 9 O' Clock\")) {\n          return 'turn slight left';\n        } else if (r.includes(\"Turn 10 O' Clock\") || r.includes(\"Turn 11 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 6 O' Clock\")) {\n          return 'Turn back';\n        } else if (r.includes(\"You are at\")) {\n          return r;\n        } else if (r.includes(\"reached\")) {\n          return r;\n        } else if (r.includes(\"Turn 0 O' Clock\") || r.includes(\"Turn 12 O' Clock\")) {\n          return null;\n        } else {\n          return r;\n        }\n      });\n      var distance;\n\n      if (instructions) {\n        const add = arr => arr.reduce((a, b) => a + b, 0);\n\n        distance = add(stepsCount);\n        instructions = instructions.filter(el => {\n          return el != null;\n        });\n      }\n\n      instructions.splice(instructions.length - 2, 1);\n      return instructions;\n    };\n\n    this.state = {};\n\n    this.handleClick = () => {\n      this.setState({\n        color: Konva.Util.getRandomColor()\n      });\n    };\n\n    this.state = {\n      center: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      currentPos: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Select Source\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: {\n        buildingName: \"Building\",\n        venueName: \"Venue\"\n      },\n      selectedDstLocation: {\n        buildingName: \"Building\",\n        venueName: \"Venue\"\n      },\n      srcBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      dstBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle: 0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom: false,\n      language: 'en',\n      visionType: 'vision',\n      height: '<5ft',\n      ageGroup: 'adult',\n      walkingType: 'walk',\n      pause: false,\n      firstFlrInstruction: [],\n      secondFlrInstruction: [],\n      firstFlr: '',\n      secondFlr: '',\n      currentFloor: '',\n      instructionReady: false,\n      color: 'green',\n      pathPoints: []\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n  }\n\n  componentDidMount() {\n    // if (window.navigator.geolocation) {\n    //   navigator.geolocation.getCurrentPosition(success => {\n    let success = {\n      coords: {\n        latitude: 28.6139,\n        longitude: 77.209\n      }\n    };\n    let coordinates = [success.coords.latitude, success.coords.longitude];\n    this.props.getGpsLocation({\n      lat: success.coords.latitude,\n      lng: success.coords.longitude\n    }, () => {\n      this.getUserDetails();\n      var cvWidth = Math.max(document.getElementById(\"myCanvassrc\").clientWidth, window.innerWidth || 0);\n      var cvHeight = Math.max(document.getElementById(\"myCanvassrc\").clientHeight, window.innerHeight || 0);\n      var srcBar = document.getElementById(\"src-bar\");\n      var navHeight = document.getElementById(\"nav-height\");\n      var element = document.getElementById(\"myCanvassrc\");\n      var topPos = element.getBoundingClientRect().top;\n      let realHeight = cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n      this.setState({\n        // currentLocation: this.props.gpsLocation.display_name,\n        currentLocation: \"IIT Delhi\",\n        canvasWidth: cvWidth,\n        canvasHeight: realHeight,\n        center: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        },\n        currentPos: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        }\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        let lat = success.coords.latitude;\n        let lng = success.coords.longitude;\n        map.flyTo(new L.LatLng(success.coords.latitude, success.coords.longitude), map.getZoom(), {\n          animate: true,\n          duration: 0.5\n        });\n      });\n    });\n    this.getVenueList(coordinates); //   });\n    // } else {\n    //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n    // }\n  }\n\n  findpath() {\n    var srcvert = this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert = this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n\n    if (this.graph.hasvertex(srcvert)) {} else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor == this.state.srcfloor && nodes[i].properties.floorElement === \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.srcfloor, this.state.srcVal, this.state.srcfloorL, this.state.srcfloorB, null, null, false, null);\n    }\n\n    if (this.graph.hasvertex(dstvert)) {} else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor === this.state.dstfloor && nodes[i].properties.floorElement == \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.dstfloor, this.state.dstVal, this.state.dstfloorL, this.state.dstfloorB, null, null, false, null);\n    }\n\n    this.specialcallwhile(this.state.srcfloor, srcvert, this.state.dstfloor, dstvert);\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n        break;\n      }\n\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n        var neighbour = false;\n\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      let ans = new Map();\n\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n\n          let canvas = window.d3.select(\"#mydiv\").append(\"canvas\").attr(\"id\", \"canvas\" + ii).attr(\"style\", `border:1px solid;display:${dsp};`).attr(\"width\", this.state.canvasWidth).attr(\"height\", this.state.canvasHeight).call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", multiCanvasZoom));\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n\n          img1.onload = function () {\n            multiCanvas();\n            zoomTo();\n          };\n\n          function multiCanvasZoom() {\n            me.setState({\n              zoom: true // pathCaption: []\n\n            }, () => {\n              var transform = window.d3.event.transform;\n              ctx.save();\n              ctx.clearRect(0, 0, width, height);\n              ctx.translate(transform.x, transform.y);\n              ctx.scale(transform.k, transform.k);\n              loaded = false;\n              multiCanvas();\n              ctx.restore();\n            });\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n\n              ctx.globalAlpha = 0.2;\n              ctx.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight);\n              var id = \"canvas\" + ii; // me.loadMultiFloorNonwalkable(id)\n\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n\n              var node_count = 0;\n\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n\n                node_count++;\n              }\n\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY); // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n\n    for (let i = 0; i < m; i++) {\n      var row = [],\n          row1 = [],\n          row3 = [],\n          row4 = [];\n\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n\n      this.visited[minleave[0]][minleave[1]] = 1;\n\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (this.visited[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])] == 1) {} else {\n            check = false;\n          }\n        }\n\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(vert, this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])], true);\n          }\n\n          this.reset_var();\n          break;\n        }\n      }\n\n      this.leaves.splice(var_i, 1);\n\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (this.minimumcost[j][k] > this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k))) {\n                this.minimumcost[j][k] = this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k));\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][minleave[1]].concat([[j, k]]);\n                notthere = 1;\n\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (single == true) {\n      let {\n        scale\n      } = this.state;\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n      } else {\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n\n      let sp = this.shortestpath[dest_x][dest_y];\n      let mypoints = sp.map(r => {\n        return {\n          x: r[0],\n          y: r[1]\n        };\n      });\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      } // if (\n      //   this.state.srcBuildingLocation.venueName ===\n      //     this.state.dstBuildingLocation.venueName &&\n      //   this.state.srcBuildingLocation.buildingName ===\n      //     this.state.dstBuildingLocation.buildingName\n      // ) {\n      // if (this.state.zoom === false) {\n\n\n      if (canvasid === \"canvas0\" || \"myCanvassrc\") {\n        this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n      } else {\n        this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n      } // }\n      // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // } else if (this.state.dstBuildingLocation) {\n      //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // }\n\n\n      var rowX = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          x: row[0],\n          index: i\n        };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          y: row[1],\n          index: i\n        };\n      });\n      let minRowX = rowX.reduce((prev, current) => prev.x < current.x ? prev : current);\n      let maxRowX = rowX.reduce((prev, current) => prev.x > current.x ? prev : current);\n      let minRowY = rowY.reduce((prev, current) => prev.y < current.y ? prev : current);\n      let maxRowY = rowY.reduce((prev, current) => prev.y > current.y ? prev : current);\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      }; // var max = Math.max.apply(null, maxRow);\n\n      this.setState({\n        pathPoints: this.shortestpath[dest_x][dest_y]\n      });\n\n      for (var i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n        context.globalAlpha = 1;\n        context.beginPath();\n        var half_scale = scale / 2;\n        var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n        var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n        context.fill();\n        context.fillStyle = \"#2d9cdb\";\n        context.strokeStyle = \"#2d9cdb\";\n        context.stroke();\n      }\n\n      this.reset_var();\n    }\n  }\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({\n      x: parseInt(p1.x),\n      y: parseInt(p1.y)\n    });\n    let counter = seperationGap;\n\n    while (counter < d) {\n      let x = p1.x + counter / d * (p2.x - p1.x);\n      let y = p1.y + counter / d * (p2.y - p1.y);\n      result.push({\n        x: parseInt(x),\n        y: parseInt(y)\n      });\n      counter += 1 * seperationGap;\n    }\n\n    return result;\n  }\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n  /* NAVIGATION DRAWER */\n\n\n  previousButton() {\n    let currentStep = this.state.currentStep;\n\n    if (currentStep !== 0) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\",\n        type: \"button\",\n        onClick: this._prev,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2853,\n        columnNumber: 13\n      }, this);\n    }\n\n    return null;\n  }\n\n  nextButton() {\n    let currentStep = this.state.currentStep;\n\n    if (currentStep < this.state.pathCaption.length) {\n      this._next();\n    }\n\n    return null;\n  }\n\n  render() {\n    var combineInstructions = [];\n\n    if (this.state.srcfloor === this.state.dstfloor) {\n      combineInstructions = this.state.pathCaption;\n    } else {\n      if (this.state.firstFlr === this.state.currentFloor) {\n        combineInstructions = this.state.firstFlrInstruction;\n      } else {\n        combineInstructions = this.state.secondFlrInstruction;\n      } // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n\n    }\n\n    let {\n      center,\n      currentPos\n    } = this.state;\n    let {\n      srcBuildingLocation,\n      dstBuildingLocation\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      // <React.Fragment>\n      // </React.Fragment>\n      _jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          hidden: this.state.showInstructions,\n          children: [!this.state.buildingView ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"source-destination fixed-top\",\n              id: \"src-bar\",\n              style: {\n                marginTop: \"50px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row w-100  mx-auto\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12 p-0\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn-nvgtn text-white\",\n                    onClick: () => {\n                      this.setState({\n                        showStrtMenu: true,\n                        srcReadOnly: false\n                      });\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      className: \"float-left mt-2 mr-2\",\n                      src: \"/inclunav/assets/images/profile.svg\",\n                      alt: \"user location\",\n                      alt: \"current location\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3065,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"strt-txt text-justify \",\n                      children: this.state.currentLocation\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3071,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3056,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3055,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3054,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mx-auto hr-line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3077,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row w-100  mx-auto\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-10 p-0\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn-nvgtn text-white\",\n                    onClick: () => {\n                      this.setState({\n                        showDstMenu: true,\n                        dstReadOnly: false\n                      });\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      className: \"float-left mt-2 mr-2\",\n                      src: \"/inclunav/assets/images/navigation.svg\",\n                      alt: \"select destination\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3089,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"strt-txt text-justify \",\n                      children: this.state.dstAddress\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3094,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3080,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3079,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3099,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3078,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3049,\n              columnNumber: 15\n            }, this), this.state.showStrtMenu && !this.state.buildingView ? /*#__PURE__*/_jsxDEV(SourceMenu, {\n              srcName: this.state.srcName,\n              currentLocation: this.state.currentLocation,\n              selectedSrcLocation: this.state.selectedSrcLocation,\n              locationList: this.state.locationList,\n              srcReadOnly: this.state.srcReadOnly,\n              srcFloorList: this.state.srcFloorList,\n              showStrtMenu: () => {\n                this.setState({\n                  showStrtMenu: false\n                });\n              },\n              handleSelectSource: e => {\n                if (e.length > 0) {\n                  this.setState({\n                    tmpSrcLocation: e[0]\n                  }, () => {\n                    this.handleSrcChange(e);\n                  });\n                }\n              },\n              handleSourceLocation: e => {\n                if (e.length > 0) {\n                  this.setState({\n                    selectedSrcLocation: e[0],\n                    selectedDstLocation: e[0],\n                    buildingView: false\n                  }, () => {\n                    this.props.androidNavigation({\n                      venueName: e[0].venueName,\n                      buildingName: e[0].buildingName\n                    }, () => {});\n                    this.fetchLocation(e[0].venueName, e[0].buildingName, \"srcBuildingLocation\");\n                    this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\");\n\n                    if (this.state.dstName !== \"Select Destination\") {\n                      this.handleSubmit();\n                    } else {\n                      this.setNavigation(this.state.selectedDstLocation);\n                    }\n                  });\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3104,\n              columnNumber: 17\n            }, this) : null, this.state.showDstMenu && !this.state.buildingView ? /*#__PURE__*/_jsxDEV(DestinationMenu, {\n              dstName: this.state.dstName,\n              currentLocation: this.state.currentLocation,\n              selectedDstLocation: this.state.selectedDstLocation,\n              selectedDestination: this.state.selectedDestination,\n              locationList: this.state.locationList,\n              dstReadOnly: this.state.dstReadOnly,\n              dstFloorList: this.state.dstFloorList,\n              showDstMenu: () => {\n                this.setState({\n                  showDstMenu: false\n                });\n              },\n              handleSelectDestination: e => {\n                let resp = \"\";\n\n                if (e[0].floorElement === \"Rooms\") {\n                  resp = `${e[0].roomName}(${e[0].floor})`;\n                } else if (e[0].floorElement === \"FloorConnection\") {\n                  resp = `${e[0].name}(${e[0].floor})`;\n                } else if (e[0].floorElement === \"Services\") {\n                  resp = `${e[0].type}(${e[0].floor})`;\n                } else if (e[0].floorElement === \"RestRooms\") {\n                  resp = `${e[0].type} Washroom (${e[0].floor})`;\n                } else {\n                  resp = \"\";\n                }\n\n                this.setState({\n                  tmpDstLocation: e[0],\n                  dstName: e[0],\n                  dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                  showDstMenu: false,\n                  dstReadOnly: true\n                }, () => {\n                  if (srcBuildingLocation.venueName === dstBuildingLocation.venueName && srcBuildingLocation.buildingName === dstBuildingLocation.buildingName) {\n                    this.handleDstChange(e);\n                  }\n                });\n              },\n              handleSourceLocation: e => {\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n\n                  if (!venue && !building) {\n                    let data = {\n                      venueName,\n                      buildingName\n                    };\n                    let props;\n                    this.props.androidNavigation({\n                      venueName: e[0].venueName,\n                      buildingName: e[0].buildingName\n                    }, () => {});\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\"ground\", this.props.flrList.data);\n                            this.setState({\n                              srcName: props.roomName,\n                              srcfloor: \"ground\",\n                              srcVal: parseInt(props.node),\n                              srcfloorL: this.props.flrList.data[ind].floorL,\n                              srcfloorB: this.props.flrList.data[ind].floorB,\n                              imgName: this.props.flrList.data[ind].fileName,\n                              pathCaption: []\n                            }, () => {\n                              this.handleSubmit();\n                            });\n                          }\n                        }\n                      });\n                    });\n                  }\n\n                  this.setState({\n                    selectedDstLocation: e[0],\n                    buildingView: false\n                  }, () => {\n                    this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\");\n\n                    if (this.state.selectedSrcLocation.venueName === this.state.selectedDstLocation.venueName && this.state.selectedSrcLocation.buildingName === this.state.selectedDstLocation.buildingName) {\n                      this.setNavigation(this.state.selectedDstLocation);\n                    }\n                  });\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3160,\n              columnNumber: 17\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3047,\n            columnNumber: 13\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            hidden: this.state.buildingView,\n            children: /*#__PURE__*/_jsxDEV(MapContainer, {\n              style: {\n                height: \"100vh\"\n              },\n              center: center,\n              zoom: this.state.zoomLevel,\n              ref: m => {\n                this.leafletMap = m;\n              },\n              onClick: this.handleClick,\n              children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n                url: \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3291,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Marker, {\n                position: this.state.currentPos,\n                draggable: true,\n                children: /*#__PURE__*/_jsxDEV(Popup, {\n                  position: this.state.currentPos,\n                  children: [\"Current location:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n                    children: JSON.stringify(this.state.currentPos, null, 2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3297,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3295,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3294,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3282,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3281,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            hidden: !this.state.buildingView,\n            className: \"mt-1\",\n            style: {\n              height: \"100%\",\n              width: \"100%\",\n              overflow: \"scroll\"\n            },\n            children: [!this.state.samefloor ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-group-vertical btn-info rounded  shadow mt-5\",\n              role: \"group\",\n              \"aria-label\": \"First group\",\n              style: {\n                position: \"fixed\",\n                zIndex: \"5\",\n                background: \"#56c9ad\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-dark text-white text-capitalize\",\n                onClick: this.navigatePrevious,\n                children: this.props.flrList.data.map((r, i) => {\n                  if (this.state.srcfloor === r.floor) {\n                    return `L${i}`;\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3314,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-dark text-white\",\n                onClick: this.navigateNext,\n                children: this.props.flrList.data.map((r, i) => {\n                  if (this.state.dstfloor === r.floor) {\n                    return `L${i}`;\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3325,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3308,\n              columnNumber: 15\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: \"100%\",\n                top: \"50px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"map\",\n                id: \"myImage\",\n                src: `${config.imgUrl}/${this.state.imgName}`,\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3339,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"map\",\n                id: \"srcImage\",\n                src: \"/inclunav/assets/images/source.svg\",\n                style: {\n                  WebkitTransform: `rotate(20deg)`\n                },\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3345,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"map\",\n                id: \"dstImage\",\n                src: \"/inclunav/assets/images/destination.svg\",\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3352,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"map\",\n                id: \"stairs\",\n                src: \"/inclunav/assets/images/stair.png\",\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3358,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"map\",\n                id: \"lift\",\n                src: \"/inclunav/assets/images/lift.png\",\n                hidden: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3364,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"mydiv1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3370,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"canvaDiv\",\n                ref: \"canv\",\n                onScroll: this.handleScroll,\n                children: [/*#__PURE__*/_jsxDEV(Stage, {\n                  width: 500,\n                  height: 500,\n                  children: /*#__PURE__*/_jsxDEV(Layer, {\n                    children: this.state.pathPoints.map((star, id) => /*#__PURE__*/_jsxDEV(Star, {\n                      id: id,\n                      x: star[0],\n                      y: star[1],\n                      numPoints: 5,\n                      innerRadius: 20,\n                      outerRadius: 40,\n                      fill: \"#89b717\",\n                      opacity: 0.8,\n                      draggable: true // rotation={star.rotation}\n                      ,\n                      shadowColor: \"black\",\n                      shadowBlur: 10,\n                      shadowOpacity: 0.6\n                    }, id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 3379,\n                      columnNumber: 19\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 3377,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3373,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n                  id: \"myCanvassrc\",\n                  width: this.state.canvasWidth,\n                  height: this.state.canvasHeight,\n                  style: {\n                    position: \"absolute\"\n                  },\n                  hidden: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3399,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3372,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"mydiv\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3407,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3338,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3302,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3045,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3041,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile: state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n})(ColoredRect);","map":{"version":3,"sources":["/home/jahnavi/navigation/src/components/dashboard/navigation/Konva.js"],"names":["React","Component","render","Map","MapContainer","Marker","Popup","TileLayer","L","config","connect","floorList","imgDetails","getAllBuildingElements","venueList","buildingList","getGpsLocation","androidNavigation","getUserPortfolio","Typeahead","Instructions","NavigationDetails","GlobalDetails","InstructionTab","SourceMenu","DestinationMenu","Stage","Layer","Star","Rect","Text","Konva","Graph","constructor","noOfVertices","AdjList","Adjweights","addVertex","v","set","hasvertex","has","edges","get","addEdge","w","wt","undir","push","printGraph","get_keys","keys","i","get_values","val","conc","conc2","j","ColoredRect","props","getUserDetails","id","localStorage","getItem","token","userProfile","success","clear","history","data","properties","setState","language","visionType","height","ageGroup","walkingType","navigationMode","fetchLocation","venueName","buildingName","point","flrListData","flrList","prevData","state","center","lat","lng","currentPos","floorAngle","parseInt","buildingOrientation","map","leafletMap","leafletElement","flyTo","LatLng","getZoom","animate","duration","nodes","navigationInfo","lists","length","sel","uniqueLists","Array","from","Set","o","floorElement","coordinates","find","a","freeBeacon","r","type","freeData","filter","el","sort","b","roomName","undefined","name","srcFloorList","me","srcLat","srcBuildingLocation","srcLng","fitBounds","latLngBounds","latLng","dstFloorList","zoomLevel","getVenueList","vnList","findNearVenue","distList","getDistance","arr","list","dt","k","venueDistance","distance","lowest","Number","POSITIVE_INFINITY","highest","NEGATIVE_INFINITY","tmp","nearLocation","listArr","locationList","d","sortedArr","quickSort","currentVenue","getBuildingList","address","dateCreated","liveStatus","organization","selectedLocation","currentBuilding","pivot","lesserVal","greaterVal","bldList","findNearBuilding","p","setNavigation","rad","x","Math","PI","p1","p2","R","dLat","dLong","sin","cos","c","atan2","sqrt","grids_all","num_vert","fc","floor","node","graph","frConn","split","flrmatrix","flr_dist_matrix","len","vert1","vert2","getKeys","cnt","prev","toggle","value","event","findFloor","key","array","geomtery","color_canvas_spl","canvasid","color","srcfloorL","scale","srcDiv","document","getElementById","canvas","context","getContext","wrh","dstfloorL","dstfloorB","newWidth","canvasWidth","newHeight","canvasHeight","gpx","gpy","srcfloorB","pos_x","pos_y","fillStyle","drawImage","lift","stairs","rot","y","step","frConnType","half_scale","dstDiv","color_canvas","place","posX","posY","halfScale","globalAlpha","fillRect","find_fl","handleSubmit","srcVal","srcfloor","dstfloor","dstVal","divimg","divcan","childNodes","elem","remove","cvWidth","clientWidth","ratio","height_of_canvas","factor","ceil","samefloor","img1","Image","img","src","hidden","dest_x","dest_y","imgDiv","angle","pointerangle","window","d3","select","call","zoom","scaleExtent","on","width","property","active","zoom1","initialTransform","zoomIdentity","translate","animation","pathFloor","pathArray","currentStep","transform","save","clearRect","draw","restore","reset","classed","rotate","callwhile","transition","timer","ms","Promise","res","setTimeout","zoomTo","X","croppedRegion","maxX","minX","Y","maxY","minY","min","distX","distY","onload","buildingView","findpath","loadNonwalkable","navInfo","androidNav","floorData","polygons","clickedPoints","start","oldpath","loadMultiFloorNonwalkable","oldpathMulti","e","f","g","canvas1","context1","interpolatePath","turningPointsPath","seperationGap","resultpath","points","interpolatePoints","simplifyPath","tolerance","Vector","Line","distanceToPoint","m","abs","pow","douglasPeucker","returnPoints","line","maxDistance","maxDistanceIndex","concat","slice","find_angle","p0","p0c","cp1","findDirectionword","round","findErrorInAngle","findDirectionAbbreviation","findInstructions","nonRefinedPoints","refinedPoints","mapElements","nRefined","nNonRefined","ElementMap","includedSet","word","currentNRPoint","currentRPoint","flagList","radius","Object","join","replace","DirectionResults","ElaboratedResults","add","error","path_angle","floorangle","diff","CurrentDirection","actualAngle","pathAngle","gn","calculatePath","begin","end","currpoint","max","tempAngle","resultMap","instruction","forEach","element","prevState","srtdFlr","instructionReady","flrArry","merge3","flat","pathCaption","firstFlrInstruction","firstFlr","currentFloor","secondFlrInstruction","secondFlr","pathGN","rotateDirection","path_angleN","drawerToggleClickHandler","sideDrawerOpen","backdropClickHandler","incCanvas","decCanvas","handleDstChange","resp","ind","dstName","floorL","floorB","imgName","fileName","showDstMenu","dstReadOnly","dstBuildingLocation","dstChange","handleSrcChange","srcName","showStrtMenu","srcReadOnly","currentLocation","console","log","srcChange","onSuggestionsFetchRequested","suggestions","getSuggestions","onDstSuggestionsFetchRequested","dstSuggestions","getDstSuggestions","onSuggestionsClearRequested","onDstSuggestionsClearRequested","inputValue","trim","toLowerCase","inputLength","lang","getSuggestionValue","suggestion","getDstSuggestionValue","renderSuggestion","renderDstSuggestion","onChange","newValue","onSrcChange","dstValue","nvgtSrcBld","tmpSrcLocation","fetchSrcBldLocation","nvgtDstBld","tmpDstLocation","fetchDstBldLocation","cb","doorGroup","srcBldDstPointChange","selectedSrcLocation","navigateNext","div","children","style","display","next","navigatePrevious","handleBuildingView","showInstructions","_next","utter","SpeechSynthesisUtterance","speechSynthesis","cancel","speak","_prev","playInstruction","pause","synth","resume","filterInstruction","utterance1","instructions","stepsCount","includes","theNum","match","reduce","splice","handleClick","Util","getRandomColor","gpsLocation","buildingAddress","canvaslist","isLoading","sidebarLeft","selectedDstLocation","selectedDestination","dstAddress","showDirections","srtdInstruction","osmRoutes","globalDistance","globalTime","pathPoints","shortestPathVar","grids","visited","shortestpath","minimumcost","leaves","flrconn","num_floors","animateRef","show","componentDidMount","coords","latitude","longitude","innerWidth","cvHeight","clientHeight","innerHeight","srcBar","navHeight","topPos","getBoundingClientRect","top","realHeight","srcvert","dstvert","coord","vert","specialcallwhile","MAX_VALUE","minleave","var_i","notthere","get_dist","jj","l","neighbour","dum","createcanvas","ans","clist","floorLlist","ind1","breadth","callimage","callmark","get_val","count","ii","fList","dsp","append","attr","multiCanvasZoom","ctx","imgUrl","appendChild","loaded","multiCanvas","index","n","node_count","single","row","row1","row3","row4","row5","grid_1","src_x","src_y","check","ch","reset_var","sp","mypoints","refinedpaths","allElements","allNodes","rowX","rowY","minRowX","current","maxRowX","minRowY","maxRowY","beginPath","arc","fill","strokeStyle","stroke","result","counter","previousButton","nextButton","combineInstructions","marginTop","venue","building","JSON","stringify","overflow","position","zIndex","background","WebkitTransform","handleScroll","star","mapStateToProps","getImage","getAllElem","userPortfolio"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport {\n    Map as MapContainer,\n    Marker,\n    Popup,\n    TileLayer,\n  } from \"react-leaflet\";\n  import L from \"leaflet\";\n  import \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\n  import config from \"../../../config\";\n  import { connect } from \"react-redux\";\n  import {\n    floorList,\n    imgDetails,\n    getAllBuildingElements,\n    venueList,\n    buildingList,\n    getGpsLocation,\n    androidNavigation,\n    getUserPortfolio\n  } from \"../../../store/actions/index\";\n  import { Typeahead } from \"react-bootstrap-typeahead\";\n  import \"react-bootstrap-typeahead/css/Typeahead.css\";\n  import \"leaflet-routing-machine\";\n  import \"lrm-graphhopper\";\n  import Instructions from \"./Instructions\";\n  import NavigationDetails from './NavigationDetails';\n  import GlobalDetails from './GlobalDetails';\n  import InstructionTab from './InstructionTab';\n  import SourceMenu from \"./SourceMenu\";\n  import DestinationMenu from \"./DestinationMenu\";\n\nimport { Stage, Layer,Star, Rect, Text } from 'react-konva';\nimport Konva from 'konva';\n\nclass Graph {\n    constructor(noOfVertices) {\n      this.noOfVertices = noOfVertices;\n      this.AdjList = new Map();\n      this.Adjweights = new Map();\n    }\n    addVertex(v) {\n      this.AdjList.set(v, []);\n      this.Adjweights.set(v, []);\n    }\n    hasvertex(v) {\n      return this.AdjList.has(v);\n    }\n    edges(v) {\n      return this.AdjList.get(v);\n    }\n    addEdge(v, w, wt, undir) {\n      if (undir) {\n        this.AdjList.get(v).push(w);\n        this.Adjweights.get(v).push(wt);\n        this.AdjList.get(w).push(v);\n        this.Adjweights.get(w).push(wt);\n      } else {\n        this.AdjList.get(v).push(w);\n        this.Adjweights.get(v).push(wt);\n      }\n    }\n  \n    printGraph() {\n      var get_keys = this.AdjList.keys();\n      for (var i of get_keys) {\n        var get_values = this.AdjList.get(i);\n        var val = this.Adjweights.get(i);\n        var conc = \"\";\n        var conc2 = \"\";\n        for (let j of get_values) {\n          conc = conc + j + \" \";\n        }\n        for (let j of val) {\n          conc2 = conc2 + j + \" \";\n        }\n      }\n    }\n  }\n\n\nclass ColoredRect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          center: { lat: 28.6139, lng: 77.209 },\n          currentPos: { lat: 28.6139, lng: 77.209 },\n          gpsLocation: \"\",\n          buildingAddress: \"\",\n          zoomLevel: \"18\",\n          showStrtMenu: false,\n          showDstMenu: false,\n          //\n          buildingName: \"\",\n          srcName: \"Select Source\",\n          srcfloor: \"none\",\n          dstfloor: \"none\",\n          list: [],\n          dstName: \"Select Destination\",\n          srcVal: null,\n          dstVal: null,\n          scale: 2.4,\n          srcfloorL: null,\n          srcfloorB: null,\n          dstfloorL: null,\n          dstfloorB: null,\n          samefloor: true,\n          canvaslist: [],\n          ind: 0,\n          sideDrawerOpen: false,\n          isLoading: false,\n          sidebarLeft: false,\n          imgName: null,\n          value: \"\",\n          suggestions: [],\n          dstValue: \"\",\n          dstSuggestions: [],\n          venueName: \"\",\n          venueList: [],\n          buildingList: [],\n          buildingView: false,\n          pathCaption: [],\n          pathFloor: [],\n          currentStep: 0,\n          srcReadOnly: false,\n          dstReadOnly: false,\n          currentLocation: \"\",\n          locationList: [],\n          selectedSrcLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n          selectedDstLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n          srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n          dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n          srcFloorList: [],\n          dstFloorList: [],\n          selectedDestination: \"Select Destination\",\n          dstAddress: \"Select Destination\",\n          canvasWidth: null,\n          canvasHeight: null,\n          tmpSrcLocation: {},\n          tmpDstLocation: {},\n          floorAngle: 0,\n          pathAngle:0,\n          next: true,\n          showDirections: false,\n          pathArray: [],\n          srtdInstruction: [],\n          srtdFlr: [],\n          toggle: false,\n          osmRoutes: null,\n          globalDistance: 0,\n          globalTime: 0,\n          showInstructions: false,\n          zoom:false,\n          language:'en',\n          visionType:'vision',\n          height:'<5ft',\n          ageGroup:'adult',\n          walkingType:'walk',\n          pause:false,\n          firstFlrInstruction:[],\n          secondFlrInstruction:[],\n          firstFlr:'',\n          secondFlr:'',\n          currentFloor:'',\n          instructionReady:false,\n          color: 'green',\n          pathPoints:[]\n\n        };\n        this.shortestPathVar = [];\n        this.grids_all = [];\n        this.grids = [];\n        this.visited = [];\n        this.shortestpath = [];\n        this.minimumcost = [];\n        this.leaves = [];\n        this.graph = null;\n        this.flrconn = [];\n        this.num_floors = 0;\n        this.animateRef = false;\n        this.instructions = [];\n        this.show = 0;\n        this.actualAngle = 0;\n        this.croppedRegion = {};\n      }\n    \n      componentDidMount() {\n        // if (window.navigator.geolocation) {\n        //   navigator.geolocation.getCurrentPosition(success => {\n          let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n            let coordinates = [success.coords.latitude, success.coords.longitude];\n            this.props.getGpsLocation(\n              { lat: success.coords.latitude, lng: success.coords.longitude },\n              () => {\n                this.getUserDetails()\n                var cvWidth = Math.max(\n                  document.getElementById(\"myCanvassrc\").clientWidth,\n                  window.innerWidth || 0\n                );\n                var cvHeight = Math.max(\n                  document.getElementById(\"myCanvassrc\").clientHeight,\n                  window.innerHeight || 0\n                );\n    \n                var srcBar = document.getElementById(\"src-bar\");\n                var navHeight = document.getElementById(\"nav-height\");\n                var element = document.getElementById(\"myCanvassrc\");\n                var topPos = element.getBoundingClientRect().top;\n                let realHeight =\n                  cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    \n                this.setState(\n                  {\n                    // currentLocation: this.props.gpsLocation.display_name,\n                    currentLocation: \"IIT Delhi\",\n                    canvasWidth: cvWidth,\n                    canvasHeight: realHeight,\n                    center: {\n                      lat: success.coords.latitude,\n                      lng: success.coords.longitude\n                    },\n                    currentPos: {\n                      lat: success.coords.latitude,\n                      lng: success.coords.longitude\n                    }\n                  },\n                  () => {\n                    const map = this.leafletMap.leafletElement;\n                    let lat = success.coords.latitude;\n                    let lng = success.coords.longitude;\n                    map.flyTo(\n                      new L.LatLng(\n                        success.coords.latitude,\n                        success.coords.longitude\n                      ),\n                      map.getZoom(),\n                      {\n                        animate: true,\n                        duration: 0.5\n                      }\n                    );\n                  }\n                );\n              }\n            );\n            this.getVenueList(coordinates);\n        //   });\n        // } else {\n        //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n        // }\n      }\n    \n      getUserDetails = ()=>{\n        let id = localStorage.getItem('id');\n          let token = localStorage.getItem('token');\n          this.props.getUserPortfolio({id,token},()=>{\n            // console.log(\"user profile\",this.props.userProfile)\n            if(this.props.userProfile.success === false){\n              localStorage.clear();\n              this.props.history.push('/')\n            }else{\n              let data = this.props.userProfile.properties\n              this.setState({\n                language:data.language,\n                visionType:data.visionType,\n                height:data.height,\n                ageGroup:data.ageGroup,\n                walkingType:data.navigationMode\n              })          \n            }\n          })\n      }\n    \n      fetchLocation = (venueName, buildingName, point) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          let flrListData = this.props.flrList.data;\n          let prevData = this.state.center;\n          this.setState(\n            {\n              center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n              currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n              [point]: {\n                venueName,\n                buildingName,\n                lat: flrListData[0].lat,\n                lng: flrListData[0].lng,\n                floorAngle:parseInt(flrListData[0].buildingOrientation)\n              }\n            },\n            () => {\n              this.props.getAllBuildingElements(data, () => {\n                const map = this.leafletMap.leafletElement;\n                map.flyTo(\n                  new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n                  map.getZoom(),\n                  {\n                    animate: true,\n                    duration: 0.5\n                  }\n                );\n                let nodes = this.props.navigationInfo;\n                let lists = [];\n                for (let i = 0; i < nodes.length; i++) {\n                  var sel = nodes[i].properties;\n                  lists.push(sel);\n                }\n    \n                const uniqueLists = Array.from(\n                  new Set(\n                    lists.map(o => {\n                      if (o.floorElement === \"Rooms\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"FloorConnection\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"Services\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"RestRooms\") {\n                        return o.coordinates;\n                      } else {\n                        // return o.coordinates\n                      }\n                    })\n                  )\n                ).map(id => {\n                  return lists.find(a => a.coordinates === id);\n                });\n                let freeBeacon = uniqueLists.map(r=>{\n                  if(r.floorElement === \"Services\"){\n                    if(r.type === \"Beacons\" ){\n                      return null\n                    }else{\n                      return r\n                    }\n                  }else{\n                    return r\n                  } \n                })\n    \n                let freeData = freeBeacon.filter( (el)=> {\n                  return el != null;\n                });\n                freeData.sort((a, b)=> {\n                  if(a.floorElement === \"Rooms\"){\n                    if(a.roomName !== undefined){\n                      return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n                    }else{\n                      return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n                    }\n                  }else{\n                    return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n                  }\n                });\n                if (point === \"srcBuildingLocation\") {\n                  this.setState({\n                    srcFloorList: freeData\n                  });\n                } else if (point === \"dstBuildingLocation\") {\n                  let me = this;\n                  let srcLat = this.state.srcBuildingLocation.lat;\n                  let srcLng = this.state.srcBuildingLocation.lng;\n                  if (!srcLat && !srcLng){\n                    srcLat = prevData.lat;\n                    srcLng = prevData.lng;\n                  }\n    \n                  map.fitBounds(\n                    L.latLngBounds(\n                      L.latLng(srcLat, srcLng),\n                      L.latLng(flrListData[0].lat, flrListData[0].lng)\n                    )\n                  );\n                  this.setState({\n                    dstFloorList: freeData,\n                    zoomLevel: \"10\"\n                  });\n                }\n              });\n            }\n          );\n        });\n      };\n    \n      getVenueList = (coordinates = null) => {\n        this.props.venueList(() => {\n          this.setState(\n            {\n              venueList: this.props.vnList.data\n            },\n            () => {\n              this.findNearVenue(coordinates);\n            }\n          );\n        });\n      };\n    \n      findNearVenue = coordinates => {\n        let { venueList } = this.state;\n        let distList = venueList.map(r => {\n          return this.getDistance(coordinates, r);\n        });\n        let arr = [];\n        let list = this.state.venueList.map((r, i) => {\n          if (r.buildingList) {\n            let dt = r.buildingList.map(k => {\n              arr.push({\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              });\n              return {\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              };\n            });\n            return dt;\n          } else {\n            arr.push({\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            });\n            return {\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            };\n          }\n        });\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n          if (tmp > highest) highest = tmp;\n        }\n        let listArr = this.state.locationList.map(r => {\n          let k = distList.map(d => {\n            if (d.venueName === r.venueName) {\n              return { r, distance: d.distance };\n            }\n          });\n        });\n        let sortedArr = this.quickSort(arr);\n        if (lowest < 1) {\n          this.setState(\n            {\n              currentVenue: nearLocation,\n              locationList: arr\n            },\n            () => {\n              this.getBuildingList(nearLocation.venueName, coordinates);\n            }\n          );\n        } else {\n          this.setState({\n            currentVenue: {\n              address: \"\",\n              coordinates: [],\n              dateCreated: \"\",\n              distance: 2,\n              id: 35,\n              liveStatus: true,\n              organization: \"\",\n              venueName: \"\"\n            },\n            selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n            locationList: arr,\n            currentBuilding: {\n              address: \"\",\n              buildingName: \"\",\n              coordinates: [],\n              distance: 2,\n              lat: 0,\n              lng: 0\n            }\n          });\n        }\n      };\n    \n      quickSort = arr => {\n        if (arr.length < 2) {\n          return arr;\n        }\n        let pivot = arr[0];\n        let lesserVal = [];\n        let greaterVal = [];\n        for (let k = 0; k < arr.length; k++) {\n          if (arr[k].venueDistance < pivot.venueDistance) {\n            lesserVal.push(arr[k]);\n          } else {\n            greaterVal.push(arr[k]);\n          }\n        }\n      };\n    \n      getBuildingList = (venueName, coordinates) => {\n        this.props.buildingList({ venueName: venueName }, () => {\n          this.setState(\n            {\n              buildingList: this.props.bldList.data\n            },\n            () => {\n              if (this.state.buildingList.length > 0) {\n                this.findNearBuilding(coordinates);\n              } else {\n                this.setState({\n                  selectedLocation: { venueName: venueName, buildingName: \"\" }\n                });\n              }\n            }\n          );\n        });\n      };\n    \n      findNearBuilding = coordinates => {\n        let { buildingList } = this.state;\n        let distList = buildingList.map(r => {\n          let p = [r.lat, r.lng];\n          r.coordinates = p;\n          return this.getDistance(coordinates, r);\n        });\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n          if (tmp > highest) highest = tmp;\n        }\n        if (lowest < 50) {\n          this.setState(\n            {\n              currentBuilding: nearLocation,\n              selectedLocation: {\n                venueName: this.state.currentVenue.venueName,\n                buildingName: nearLocation.buildingName\n              }\n            },\n            () => {\n              this.setNavigation(this.state.selectedLocation);\n              this.fetchLocation(\n                this.state.selectedLocation.venueName,\n                this.state.selectedLocation.buildingName\n              );\n            }\n          );\n        }\n      };\n    \n      rad = function(x) {\n        return (x * Math.PI) / 180;\n      };\n    \n      getDistance = function(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = this.rad(p2.coordinates[0] - p1[0]);\n        var dLong = this.rad(p2.coordinates[1] - p1[1]);\n        var a =\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.cos(this.rad(p1[0])) *\n            Math.cos(this.rad(p2.coordinates[0])) *\n            Math.sin(dLong / 2) *\n            Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = (R * c) / 1000;\n        p2.distance = d;\n        return p2; // returns the distance in km\n      };\n    \n      setNavigation = data => {\n                                        // this.props.androidNavigation(data, () => {\n                                    // })\n        this.grids_all = [];\n        this.props.getAllBuildingElements(data, () => {\n          let nodes = this.props.navigationInfo;\n          let lists = [];\n          let num_vert = 0;\n          let fc = new Map();\n          for (let i = 0; i < nodes.length; i++) {\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\n              num_vert++;\n              var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              if (fc.has(v) === false) {\n                fc.set(v, [val]);\n              } else {\n                fc.get(v).push(val);\n              }\n            }\n          }\n          this.graph = new Graph(num_vert + 2);\n          for (let i = 0; i < nodes.length; i++) {\n            var sel = nodes[i].properties;\n            lists.push(sel);\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.graph.addVertex(val);\n            }\n    \n            if (nodes[i].properties.floorElement === \"Floor\") {\n              if (nodes[i].properties.length == 8) {\n                var v = nodes[i].properties.frConn[0].split(\",\");\n                var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n                var len = v.length / 2;\n                if (v.length % 2 === 0) {\n                  for (var j = 0; j < v.length; j = j + 2) {\n                    var val =\n                      parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                      parseInt(v[j]);\n                    var vert1 = nodes[i].properties.floor + \",\" + val;\n                    for (var k = j + 2; k < v.length; k = k + 2) {\n                      val =\n                        parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                        parseInt(v[k]);\n                      var vert2 = nodes[i].properties.floor + \",\" + val;\n                      this.graph.addEdge(\n                        vert1,\n                        vert2,\n                        flrmatrix[len * (j / 2) + k / 2],\n                        true\n                      );\n                    }\n                  }\n                } else {\n                }\n              }\n              this.grids_all.push(nodes[i]);\n            }\n          }\n    \n          let getKeys = fc.keys();\n    \n          for (let i of getKeys) {\n            var get_values = fc.get(i);\n            var cnt = 0;\n            var prev = null;\n            for (var j of get_values) {\n              if (cnt > 0) {\n                this.graph.addEdge(prev, j, 0, true);\n                prev = j;\n              }\n              if (cnt === 0) {\n                prev = j;\n              }\n              cnt++;\n            }\n          }\n          // if(this.state.srcfloor === this.state.dstfloor){\n    \n          this.setState({\n            // canvasWidth: cvWidth,\n            // canvasHeight: height_of_canvas,\n            list: lists\n          });\n          // }\n        });\n      };\n    \n      toggle = (type, value) => event => {\n        this.setState(state => {\n          return {\n            [type]: value\n          };\n        });\n      };\n    \n      findFloor = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (array[i].type) {\n              if (array[i].geomtery.type === \"Polygon\") {\n                if (array[i].properties.floor === key) {\n                  return i;\n                }\n              }\n            }\n            if (array[i].floor === key) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n    \n        let { scale } = this.state;\n    \n        if(color === \"red\"){\n          let srcDiv = document.getElementById(\"srcImage\");\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n          context.fillStyle = color;\n          // context.fillRect(pos_x, pos_y, scale, scale);  \n          context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n        }else if(color === \"yellow\"){\n          let lift = document.getElementById(\"lift\");\n          let stairs = document.getElementById(\"stairs\");\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n          \n          let gpx,gpy;\n    \n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n    \n          var rot = (Math.PI / 2) * 3;\n          var x = pos_x;\n          var y = pos_y;\n          var step = Math.PI / 5;\n          let frConnType = \"\";\n          let data = this.props.navigationInfo.map(r => {\n            return r.properties;\n          });\n          for (let k = 0; k < data.length; k++) {\n            if (data[k].node === i) {\n              frConnType = data[k].type;\n            }\n          }\n          if (frConnType === \"Stairs\") {\n            var half_scale = scale / 2;\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n          } else if (frConnType === \"Lift\") {\n            var half_scale = scale / 2;\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n          }\n           \n        }else if(color === \"green\"){\n          let dstDiv = document.getElementById(\"dstImage\");\n          let { scale } = this.state;\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n          context.fillStyle = color;\n          // context.fillRect(pos_x, pos_y, scale, scale);  \n          context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n        }\n      };\n    \n      \n      color_canvas = (i, place, color) => {\n        let srcDiv = document.getElementById(\"srcImage\");\n        let dstDiv = document.getElementById(\"dstImage\");\n        if (place === \"srcmap\") {\n          let { srcfloorL, scale } = this.state;\n          var canvas = document.getElementById(\"myCanvassrc\");\n          var context = canvas.getContext(\"2d\");\n          // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n          // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n    \n          var wrh = this.state.srcfloorL / this.state.srcfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx = newWidth / this.state.srcfloorL;\n          let gpy = newHeight / this.state.srcfloorB;\n    \n          var posX = gpx * (i % srcfloorL);\n          var posY = gpy * parseInt(i / srcfloorL);\n          var halfScale = scale / 2;\n          posX = posX + halfScale;\n          posY = posY + halfScale;\n          if (color === \"green\") {\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.globalAlpha = 1;\n            context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n          }else if(color === \"#bdbdbd\"){\n            let { dstfloorL, scale } = this.state;\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.fillStyle = color;\n            context.globalAlpha = 1;\n            context.fillRect(posX, posY, scale, scale);  \n          } else {\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.globalAlpha = 1;\n            context.drawImage(srcDiv, posX-9,posY, 15, 15);\n          }\n        } else {\n          let { dstfloorL, scale } = this.state;\n          let canvas = document.getElementById(\"myCanvasdst\");\n          let context = canvas.getContext(\"2d\");\n          let posX = scale * (i % dstfloorL);\n          let posY = scale * parseInt(i / dstfloorL);\n          context.fillStyle = color;\n          context.fillRect(posX, posY, scale, scale);\n        }\n      };\n    \n      find = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (parseInt(array[i].node) === key) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      find_fl = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (\n              parseInt(array[i].node) === key &&\n              array[i].floor == \"floorconnection\"\n            ) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      handleSubmit = () => {\n        let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n        if (srcVal != null && dstVal != null) {\n          var divimg = document.getElementById(\"mydiv1\");\n          var divcan = document.getElementById(\"mydiv\");\n          var len = divimg.childNodes.length;\n          for (var i = 0; i < len; i++) {\n            var elem = divimg.childNodes[0].remove();\n          }\n    \n          len = divcan.childNodes.length;\n          for (var i = 0; i < len; i++) {\n            var elem = divcan.childNodes[0].remove();\n          }\n    \n          if (srcfloor === dstfloor) {\n            var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n            let ratio = cvWidth / dstfloorL;\n            let height_of_canvas = ratio * dstfloorB;\n            let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n    \n            this.setState({\n              samefloor: true,\n              scale:factor\n            });\n            \n            var img1 = new Image();\n            var img = document.getElementById(\"myImage\");\n            img1.src = img.src;\n            img1.hidden = true;\n            var color_canvas = this.color_canvas;\n            var me = this;\n            var dest_x = this.state.dstVal % this.state.dstfloorL;\n            var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n            let imgDiv = document.getElementById(\"myImage\");\n            this.imgDiv = imgDiv;\n            let angle = 0;\n    \n      // status of the pointer(s)\n      let pointerangle;\n    \n            var canvas = window.d3.select(\"canvas\").call(\n                window.d3\n                  .zoom()\n                  .scaleExtent([1, 8])\n                  .on(\"zoom\", zoom)\n              ),\n              context = canvas.node().getContext(\"2d\"),\n              width = canvas.property(\"width\"),\n              height = canvas.property(\"height\");\n            var active = window.d3.select(null);\n            var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n            var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n            function zoom() {\n              me.setState(\n                {\n                  animation: false,\n                  // pathCaption: [],\n                  pathFloor: [],\n                  pathArray: [],\n                  currentStep: 0,\n                  zoom: true\n                },\n                () => {\n                  var transform = window.d3.event.transform;\n                  context.save();\n                  context.clearRect(0, 0, width, height);\n                  context.translate(transform.x, transform.y);\n                  context.scale(transform.k, transform.k);\n                  draw();\n                  context.restore();\n                }\n              );\n            }\n            function draw() {\n              if (active.node() === this) return reset();\n              active.classed(\"active\", false);\n              active = window.d3.select(this).classed(\"active\", true);\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              context.rotate(angle);\n              context.globalAlpha = 0.2;\n              context.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              // me.loadNonwalkable(\"myCanvassrc\")\n              me.callwhile(\n                me.state.srcfloor,\n                me.state.srcVal,\n                me.state.srcfloorL,\n                me.state.srcfloorB,\n                dest_x,\n                dest_y,\n                true,\n                \"myCanvassrc\"\n              );\n              color_canvas(srcVal, \"srcmap\", \"red\");\n              color_canvas(dstVal, \"srcmap\", \"green\");\n            }\n    \n            function reset() {\n              active.classed(\"active\", false);\n              active = window.d3.select(null);\n              canvas\n                .transition()\n                .duration(750)\n                .call(zoom1.transform, initialTransform);\n            }\n            function timer(ms) {\n              return new Promise(res => setTimeout(res, ms));\n            }\n    \n            function zoomTo() {\n              let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n              let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              let gpx = newWidth / me.state.srcfloorL;\n              let gpy = newHeight / me.state.srcfloorB;\n              let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n              //Zoomed\n              let distX =\n                width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n              let distY =\n                height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n              var transform = window.d3.zoomIdentity.translate(distX, distY);\n              // .scale(1.2)\n              // .translate(-4*X,-4*Y)\n              canvas\n                .transition()\n                .duration(750)\n                .call(zoom1.transform, transform);\n            }\n            img1.onload = function() {\n              draw();\n              zoomTo();\n            };\n          } else {\n            this.setState({\n              samefloor: false,\n              buildingView:true\n            });\n            this.findpath();\n          }\n        } else {\n        }\n      };\n    \n      loadNonwalkable = () => {\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n        let navInfo = this.props.androidNav;\n        let floorData = navInfo.filter(r=>{\n          return r.floor === srcfloor\n        })\n        let polygons = floorData[0].properties.clickedPoints;\n        for (let i = 0; i < polygons.length; i++) {\n          let nodes = polygons[i].split(\",\");\n          var start = nodes[0];\n          for (let j = 1; j < nodes.length; j++) {\n            this.oldpath(start, nodes[j]);\n            this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n            start = nodes[j];\n          }\n          this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n        }\n      }\n    \n      loadMultiFloorNonwalkable = (id) => {\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n        let navInfo = this.props.androidNav;\n        let floorData\n    \n        if(id ===\" canvas0\"){\n          floorData = navInfo.filter(r=>{\n            return r.floor === srcfloor\n          })\n        }else{\n          floorData = navInfo.filter(r=>{\n            return r.floor === dstfloor\n          })\n        }\n    \n        let polygons = floorData[0].properties.clickedPoints;\n        for (let i = 0; i < polygons.length; i++) {\n          let nodes = polygons[i].split(\",\");\n          var start = nodes[0];\n          for (let j = 1; j < nodes.length; j++) {\n            this.oldpathMulti(start, nodes[j],id);\n            // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n            start = nodes[j];\n          }\n          // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n        }\n      }\n    \n      oldpath = (x, y) => {\n        // x = coord_val  y=coord_val in normal\n        var a, b, c, d, e, f, g;\n        let { dstfloorL } = this.state;\n    \n        a = parseInt(x / dstfloorL);\n        b = x % dstfloorL;\n    \n        c = parseInt(y / dstfloorL);\n        d = y % dstfloorL;\n    \n        e = Math.floor((a + c) / 2);\n        f = Math.floor((b + d) / 2);\n        if ((e === a) & (f === b)) {\n          g = dstfloorL * c + b;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n        } else if ((e === c) & (f === d)) {\n          g = dstfloorL * a + d;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n        } else {\n          g = dstfloorL * e + f;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n          this.oldpath(g, x);\n          this.oldpath(g, y);\n        }\n      };\n    \n      color = (i,color,canvasid)=>{\n          let posX,posY,gpx,gpy\n          if(canvasid === \"canvas0\"){\n            let wrh = this.state.srcfloorL / this.state.srcfloorB;\n            let newWidth = this.state.canvasWidth;\n            let newHeight = newWidth / wrh;\n            if (newHeight > this.state.canvasHeight) {\n              newHeight = this.state.canvasHeight;\n              newWidth = newHeight * wrh;\n            }\n      \n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;\n      \n            posX = gpx * (i % this.state.srcfloorL);\n            posY = gpy * parseInt(i / this.state.srcfloorL);\n          }else{\n            let wrh = this.state.dstfloorL / this.state.dstfloorB;\n            let newWidth = this.state.canvasWidth;\n            let newHeight = newWidth / wrh;\n            if (newHeight > this.state.canvasHeight) {\n              newHeight = this.state.canvasHeight;\n              newWidth = newHeight * wrh;\n            }\n      \n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n      \n            posX = gpx * (i % this.state.srcfloorL);\n            posY = gpy * parseInt(i / this.state.srcfloorL);\n          }\n    \n          let canvas1 = document.getElementById(canvasid);\n          let context1 = canvas1.getContext(\"2d\");\n          context1.fillStyle = color;\n          context1.fillRect(posX, posY, 5, 5);  \n      }\n    \n      oldpathMulti = (x, y,id) => {\n        var a, b, c, d, e, f, g;\n        let { dstfloorL } = this.state;\n    \n        a = parseInt(x / dstfloorL);\n        b = x % dstfloorL;\n    \n        c = parseInt(y / dstfloorL);\n        d = y % dstfloorL;\n    \n        e = Math.floor((a + c) / 2);\n        f = Math.floor((b + d) / 2);\n        if ((e === a) & (f === b)) {\n          g = dstfloorL * c + b;\n          this.color(g,\"#bdbdbd\",id);\n        } else if ((e === c) & (f === d)) {\n          g = dstfloorL * a + d;\n          this.color(g,\"#bdbdbd\",id);\n        } else {\n          g = dstfloorL * e + f;\n          this.color(g,\"#bdbdbd\",id);\n          this.oldpathMulti(g, x,id);\n          this.oldpathMulti(g, y,id);\n        }\n      };\n    \n      findpath() {\n        var srcvert =\n          this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n        var dstvert =\n          this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n        if (this.graph.hasvertex(srcvert)) {\n        } else {\n          this.graph.addVertex(srcvert);\n          let nodes = this.props.navigationInfo;\n          this.flrconn = [];\n          for (var i = 0; i < nodes.length; i++) {\n            if (\n              nodes[i].properties.floor == this.state.srcfloor &&\n              nodes[i].properties.floorElement === \"FloorConnection\"\n            ) {\n              var coord = nodes[i].properties.coordinates.split(\",\");\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.flrconn.push([coord[0], coord[1], vert]);\n            }\n          }\n          this.callwhile(\n            this.state.srcfloor,\n            this.state.srcVal,\n            this.state.srcfloorL,\n            this.state.srcfloorB,\n            null,\n            null,\n            false,\n            null\n          );\n        }\n    \n        if (this.graph.hasvertex(dstvert)) {\n        } else {\n          this.graph.addVertex(dstvert);\n          let nodes = this.props.navigationInfo;\n          this.flrconn = [];\n          for (var i = 0; i < nodes.length; i++) {\n            if (\n              nodes[i].properties.floor === this.state.dstfloor &&\n              nodes[i].properties.floorElement == \"FloorConnection\"\n            ) {\n              var coord = nodes[i].properties.coordinates.split(\",\");\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.flrconn.push([coord[0], coord[1], vert]);\n            }\n          }\n          this.callwhile(\n            this.state.dstfloor,\n            this.state.dstVal,\n            this.state.dstfloorL,\n            this.state.dstfloorB,\n            null,\n            null,\n            false,\n            null\n          );\n        }\n        this.specialcallwhile(\n          this.state.srcfloor,\n          srcvert,\n          this.state.dstfloor,\n          dstvert\n        );\n      }\n    \n      specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n        var min = Number.MAX_VALUE;\n        var minleave = null;\n        var var_i;\n        var notthere;\n        let shortestpath = new Map();\n        let visited = new Map();\n        let minimumcost = new Map();\n        let leaves = [];\n        var get_keys = this.graph.AdjList.keys();\n        for (var i of get_keys) {\n          minimumcost.set(i, min);\n          visited.set(i, false);\n        }\n    \n        leaves.push(srcvert);\n        shortestpath.set(srcvert, [srcvert]);\n        minimumcost.set(srcvert, 0);\n        this.graph.printGraph();\n        while (leaves.length > 0) {\n          min = Number.MAX_VALUE;\n          for (let i = 0; i < leaves.length; i++) {\n            if (min > minimumcost.get(leaves[i])) {\n              min = minimumcost.get(leaves[i]);\n              minleave = leaves[i];\n              var_i = i;\n            }\n          }\n          visited.set(minleave, true);\n    \n          if (minleave === dstvert) {\n            // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n            break;\n          }\n          leaves.splice(var_i, 1);\n          var get_values = this.graph.AdjList.get(minleave);\n          var get_dist = this.graph.Adjweights.get(minleave);\n          for (var jj = 0; jj < get_values.length; jj++) {\n            var j = get_values[jj];\n            var l = j.split(\",\");\n    \n            var neighbour = false;\n            if (l.length == 2) {\n              neighbour = true;\n            } else if (l.length == 3) {\n              if (j == dstvert) {\n                neighbour = true;\n              }\n            }\n            if (visited.get(j) == false && neighbour) {\n              if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n                minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n                var dum = [];\n                dum = shortestpath.get(minleave);\n                dum = dum.concat([j]);\n                shortestpath.set(j, dum);\n                notthere = 1;\n                for (var p = 0; p < leaves.length; p++) {\n                  if (leaves[p] == j) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  leaves.push(j);\n                }\n              }\n            }\n          }\n        }\n        this.createcanvas(shortestpath.get(dstvert), false);\n      }\n      createcanvas(list, samefloor) {\n        if (samefloor === false) {\n          let ans = new Map();\n          for (var i = 0; i < list.length; i++) {\n            var e = list[i].split(\",\");\n    \n            if (ans.has(e[0])) {\n              ans.get(e[0]).push(e[1]);\n            } else {\n              ans.set(e[0], [e[1]]);\n            }\n          }\n          var get_keys = ans.keys();\n          let clist = [];\n          let floorLlist = [];\n          var cnt = 0;\n          for (var i of get_keys) {\n            var ind1 = this.findFloor(i, this.props.flrList);\n            var ind = this.findFloor(i, this.grids_all);\n            floorLlist.push(this.grids_all[ind].properties.length);\n            clist.push({\n              id: cnt,\n              scale: 10,\n              floorL: this.grids_all[ind].properties.length,\n              floorB: this.grids_all[ind].properties.breadth,\n              fileName: this.grids_all[ind].properties.fileName,\n              floor: this.grids_all[ind].properties.floor\n            });\n            cnt++;\n          }\n          this.setState({\n            canvaslist: clist\n          });\n          this.callimage(0, ans, cnt, clist, floorLlist);\n        }\n      }\n    \n      callmark(ans, floorLlist) {\n        var get_keys = ans.keys();\n        var cnt = 0;\n        for (var i of get_keys) {\n          var canvasid = \"canvas\" + cnt;\n          var get_val = ans.get(i);\n          for (var j of get_val) {\n            this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n          }\n          cnt++;\n        }\n      }\n    \n      callimage(cnt, ans, count, clist, floorLlist) {\n        let floorList = [this.state.srcfloor, this.state.dstfloor];\n        for (let jj = 0; jj < floorList.length; jj++) {\n          for (let ii = 0; ii < clist.length; ii++) {\n            if (floorList[jj] === clist[ii].floor) {\n              let i = clist[ii].floor;\n              let ind = this.findFloor(i, this.props.fList);\n              let ratio = this.state.canvasWidth / clist[ii].floorL;\n              let height_of_canvas = ratio * clist[ii].floorB;\n              let dsp;\n              if (clist[ii].floor === this.state.dstfloor) {\n                dsp = \"none\";\n              } else {\n                dsp = \"block\";\n              }\n              let canvas = window.d3\n                .select(\"#mydiv\")\n                .append(\"canvas\")\n                .attr(\"id\", \"canvas\" + ii)\n                .attr(\"style\", `border:1px solid;display:${dsp};`)\n                .attr(\"width\", this.state.canvasWidth)\n                .attr(\"height\", this.state.canvasHeight)\n                .call(\n                  window.d3\n                    .zoom()\n                    .scaleExtent([1, 8])\n                    .on(\"zoom\", multiCanvasZoom)\n                );\n    \n              let width = canvas.property(\"width\");\n              let height = canvas.property(\"height\");\n              let active = window.d3.select(null);\n              let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n              let initialTransform = window.d3.zoomIdentity\n                .translate(0, 0)\n                .scale(1);\n              let ctx = canvas.node().getContext(\"2d\");\n              let div = document.getElementById(\"mydiv1\");\n              let img1 = new Image();\n              img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n    \n              img1.hidden = true;\n              div.appendChild(img1);\n              let me = this;\n              let get_val = ans.get(i);\n              let loaded = false;\n              img1.onload = function() {\n                multiCanvas();\n                zoomTo()\n              };\n    \n              function multiCanvasZoom() {\n                me.setState(\n                  {\n                    zoom: true,\n                    // pathCaption: []\n                  },\n                  () => {\n                    var transform = window.d3.event.transform;\n                    ctx.save();\n                    ctx.clearRect(0, 0, width, height);\n                    ctx.translate(transform.x, transform.y);\n                    ctx.scale(transform.k, transform.k);\n                    loaded = false;\n                    multiCanvas();\n                    ctx.restore();\n                  }\n                );\n              }\n    \n              function multiCanvas() {\n                if (loaded === false) {\n                  var wrh = me.state.dstfloorL / me.state.dstfloorB;\n                  var newWidth = width;\n                  var newHeight = newWidth / wrh;\n                  if (newHeight > height) {\n                    newHeight = height;\n                    newWidth = newHeight * wrh;\n                  }\n                  ctx.globalAlpha = 0.2;\n    \n                  ctx.drawImage(\n                    img1,\n                    0,\n                    0,\n                    img1.width,\n                    img1.height,\n                    0,\n                    0,\n                    newWidth,\n                    newHeight\n                  );\n                  var id = \"canvas\" + ii;\n                  // me.loadMultiFloorNonwalkable(id)\n                  var index = me.findFloor(i, me.grids_all);\n                  var m = parseInt(me.grids_all[index].properties.length);\n                  var n = parseInt(me.grids_all[index].properties.breadth);\n                  for (var j = 0; j < get_val.length - 1; j++) {\n                    var dest_x = get_val[j + 1] % m;\n                    var dest_y = parseInt(get_val[j + 1] / m);\n                    me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n                  }\n                  var node_count = 0;\n                  for (var j of get_val) {\n                    if (ii === count - 1) {\n                      if (node_count === get_val.length - 1) {\n                        me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                      } else {\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                      }\n                    } else {\n                      if (node_count === 0 && ii === 0) {\n                        me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                      } else {\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                      }\n                    }\n                    node_count++;\n                  }\n                  loaded = true;\n                }\n              }\n    \n              function zoomTo() {\n                let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n                let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n                var wrh = me.state.dstfloorL / me.state.dstfloorB;\n                var newWidth = width;\n                var newHeight = newWidth / wrh;\n                if (newHeight > height) {\n                  newHeight = height;\n                  newWidth = newHeight * wrh;\n                }\n                let gpx = newWidth / me.state.srcfloorL;\n                let gpy = newHeight / me.state.srcfloorB;\n                let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n                //Zoomed\n                let distX =\n                  width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n                let distY =\n                  height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n                var transform = window.d3.zoomIdentity.translate(distX, distY);\n                // .scale(1.2)\n                // .translate(-4*X,-4*Y)\n                canvas\n                  .transition()\n                  .duration(750)\n                  .call(zoom1.transform, transform);\n              }\n            }\n          }\n        }\n      }\n    \n      callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n        var min = Number.MAX_VALUE;\n        var minleave = [];\n        var var_i;\n        var notthere;\n        for (let i = 0; i < m; i++) {\n          var row = [],\n            row1 = [],\n            row3 = [],\n            row4 = [];\n          for (let j = 0; j < n; j++) {\n            row.push(1);\n            row1.push(-1);\n            row3.push(Number.MAX_VALUE);\n            var row5 = [];\n            row4.push(row5);\n          }\n          this.shortestpath.push(row4);\n          this.grids.push(row);\n          this.visited.push(row1);\n          this.minimumcost.push(row3);\n        }\n        var ind1 = this.findFloor(srcfloor, this.grids_all);\n        if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n          for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n            var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n            for (let j = 0; j < nodes.length; j++) {\n              var val = nodes[j];\n              var x = val % m;\n              var y = parseInt(val / m);\n              this.grids[x][y] = 0;\n            }\n          }\n        }\n        var src_x = srcVal % m;\n        var src_y = parseInt(srcVal / m);\n        this.leaves.push([src_x, src_y]);\n        this.shortestpath[src_x][src_y].push([src_x, src_y]);\n        this.minimumcost[src_x][src_y] = 0;\n    \n        while (this.leaves.length > 0) {\n          min = Number.MAX_VALUE;\n          for (let i = 0; i < this.leaves.length; i++) {\n            if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n              min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n              minleave = this.leaves[i];\n              var_i = i;\n            }\n          }\n          this.visited[minleave[0]][minleave[1]] = 1;\n          if (single == true) {\n            if (minleave[0] == dest_x && minleave[1] == dest_y) {\n              break;\n            }\n          } else {\n            var check = true;\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n              if (\n                this.visited[parseInt(this.flrconn[ch][0])][\n                  parseInt(this.flrconn[ch][1])\n                ] == 1\n              ) {\n              } else {\n                check = false;\n              }\n            }\n            if (check == true) {\n              for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n                var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n                this.graph.addEdge(\n                  vert,\n                  this.flrconn[ch][2],\n                  this.minimumcost[parseInt(this.flrconn[ch][0])][\n                    parseInt(this.flrconn[ch][1])\n                  ],\n                  true\n                );\n              }\n              this.reset_var();\n              break;\n            }\n          }\n          this.leaves.splice(var_i, 1);\n          for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n            for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n              if (j >= 0 && j < m && k >= 0 && k < n) {\n                if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n                  if (\n                    this.minimumcost[j][k] >\n                    this.minimumcost[minleave[0]][minleave[1]] +\n                      Math.sqrt(\n                        (minleave[0] - j) * (minleave[0] - j) +\n                          (minleave[1] - k) * (minleave[1] - k)\n                      )\n                  ) {\n                    this.minimumcost[j][k] =\n                      this.minimumcost[minleave[0]][minleave[1]] +\n                      Math.sqrt(\n                        (minleave[0] - j) * (minleave[0] - j) +\n                          (minleave[1] - k) * (minleave[1] - k)\n                      );\n                    this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                      minleave[1]\n                    ].concat([[j, k]]);\n                    notthere = 1;\n                    for (var p = 0; p < this.leaves.length; p++) {\n                      if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                        notthere = 0;\n                      }\n                    }\n                    if (notthere == 1) {\n                      this.leaves.push([j, k]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (single == true) {\n          let { scale } = this.state;\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          var canvas = document.getElementById(canvasid);\n          var context = canvas.getContext(\"2d\");\n    \n          if (canvas !== null) {\n            var context = canvas.getContext(\"2d\");\n          }\n    \n          let sp = this.shortestpath[dest_x][dest_y];\n    \n          let mypoints = sp.map(r => {\n            return { x: r[0], y: r[1] };\n          });\n          var refinedpaths = this.simplifyPath(mypoints, 2);\n          let allElements = this.props.navigationInfo;\n          let allNodes = [];\n          for (let i = 0; i < allElements.length; i++) {\n            allNodes.push(allElements[i].properties);\n          }\n          // if (\n          //   this.state.srcBuildingLocation.venueName ===\n          //     this.state.dstBuildingLocation.venueName &&\n          //   this.state.srcBuildingLocation.buildingName ===\n          //     this.state.dstBuildingLocation.buildingName\n          // ) {\n    \n            // if (this.state.zoom === false) {\n              if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n                this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n              }else{\n                this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n              }\n            // }\n            // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n          // } else if (this.state.dstBuildingLocation) {\n          //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n          // }\n          \n          var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n            return { x: row[0], index: i };\n          });\n          var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n            return { y: row[1], index: i };\n          });\n          let minRowX = rowX.reduce((prev, current) =>\n            prev.x < current.x ? prev : current\n          );\n          let maxRowX = rowX.reduce((prev, current) =>\n            prev.x > current.x ? prev : current\n          );\n          let minRowY = rowY.reduce((prev, current) =>\n            prev.y < current.y ? prev : current\n          );\n          let maxRowY = rowY.reduce((prev, current) =>\n            prev.y > current.y ? prev : current\n          );\n    \n          this.croppedRegion = {\n            minX: [minRowX.x, rowY[minRowX.index].y],\n            maxX: [maxRowX.x, rowY[maxRowX.index].y],\n            minY: [rowX[minRowY.index].x, minRowY.y],\n            maxY: [rowX[maxRowY.index].x, maxRowY.y]\n          };\n          // var max = Math.max.apply(null, maxRow);\n          this.setState({\n            pathPoints:this.shortestpath[dest_x][dest_y]\n          })    \n          for (var i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n            context.globalAlpha = 1;\n            context.beginPath();\n            var half_scale = scale / 2;\n            var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n            var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = \"#2d9cdb\";\n            context.strokeStyle = \"#2d9cdb\";\n            context.stroke();\n          }\n          this.reset_var();\n        }\n      }\n    \n      interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n        let resultpath = [];\n        if (turningPointsPath.length === 1) {\n          resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n          return resultpath;\n        }\n        for (let i = 0; i < turningPointsPath.length - 1; i++) {\n          let points = this.interpolatePoints(\n            turningPointsPath[i],\n            turningPointsPath[i + 1],\n            seperationGap,\n            gpx,\n            gpy\n          );\n          for (let k = 0; k < points.length; k++) {\n            resultpath.push(points[k]);\n          }\n          // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n        }\n        return resultpath;\n      };\n    \n      interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n        let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n        let result = [];\n        result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n        let counter = seperationGap;\n        while (counter < d) {\n          let x = p1.x + (counter / d) * (p2.x - p1.x);\n          let y = p1.y + (counter / d) * (p2.y - p1.y);\n          result.push({ x: parseInt(x), y: parseInt(y) });\n          counter += 1 * seperationGap;\n        }\n        return result;\n      }\n    \n      simplifyPath = (points, tolerance) => {\n        // helper classes\n        var Vector = function(x, y) {\n          this.x = x;\n          this.y = y;\n        };\n        var Line = function(p1, p2) {\n          this.p1 = p1;\n          this.p2 = p2;\n          this.distanceToPoint = function(point) {\n            // slope\n            var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n              // y offset\n              b = this.p1.y - m * this.p1.x,\n              d = [];\n            // distance to the linear equation\n            d.push(\n              Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n            );\n            // distance to p1\n            d.push(\n              Math.sqrt(\n                Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n              )\n            );\n            // distance to p2\n            d.push(\n              Math.sqrt(\n                Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n              )\n            );\n            // return the smallest distance\n            return d.sort(function(a, b) {\n              return a - b; //causes an array to be sorted numerically and ascending\n            })[0];\n          };\n        };\n    \n        var douglasPeucker = function(points, tolerance) {\n          if (points.length <= 2) {\n            return [points[0]];\n          }\n          var returnPoints = [],\n            // make line from start to end\n            line = new Line(points[0], points[points.length - 1]),\n            // find the largest distance from intermediate poitns to this line\n            maxDistance = 0,\n            maxDistanceIndex = 0,\n            p;\n          for (var i = 1; i <= points.length - 2; i++) {\n            var distance = line.distanceToPoint(points[i]);\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxDistanceIndex = i;\n            }\n          }\n          // check if the max distance is greater than our tollerance allows\n          if (maxDistance >= tolerance) {\n            p = points[maxDistanceIndex];\n            line.distanceToPoint(p, true);\n            // include this point in the output\n            returnPoints = returnPoints.concat(\n              douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n            );\n            // returnPoints.push( points[maxDistanceIndex] );\n            returnPoints = returnPoints.concat(\n              douglasPeucker(\n                points.slice(maxDistanceIndex, points.length),\n                tolerance\n              )\n            );\n          } else {\n            // ditching this point\n            p = points[maxDistanceIndex];\n            line.distanceToPoint(p, true);\n            returnPoints = [points[0]];\n          }\n          return returnPoints;\n        };\n        var arr = douglasPeucker(points, tolerance);\n        // always have to push the very last point on so it doesn't get left off\n        arr.push(points[points.length - 1]);\n        return arr;\n      };\n    \n      find_angle = (p0, p1, c) => {\n        var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n        var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n        return (\n          (Math.atan2(\n            cp1.y * p0c.x - cp1.x * p0c.y,\n            p0c.x * cp1.x + p0c.y * cp1.y\n          ) *\n            180) /\n          Math.PI\n        );\n      };\n    \n      //Module for finding the direction's equivalent commands\n    \n      findDirectionword = angle => {\n        if (angle >= 75 && angle <= 105) return \"Turn Right\";\n    \n        if (angle <= -75 && angle >= -105) return \"Turn Left\";\n    \n        if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n          return \"Go Straight\";\n        if (angle < 0) {\n          if (Math.round((360 + angle) / 30) === 9) {\n            return \"Turn Left\";\n          }\n          return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n        }\n    \n        if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n        return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n      };\n    \n      // find the error component in the iteration and leaves it for the next iteration\n      findErrorInAngle = angle => {\n        if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n        return angle - Math.round(angle / 30) * 30;\n      };\n      //same as above but in abbreviated form\n    \n      findDirectionAbbreviation = angle => {\n        if (angle > 0) return \"Right\";\n    \n        return \"Left\";\n      };\n    \n      findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n        //length of refined and non refined paths\n        var nRefined = refinedPoints.length;\n        var nNonRefined = nonRefinedPoints.length;\n        //converting the mapElements to ordered map for ease of access\n        var ElementMap = new Map();\n        var includedSet = new Set();\n        var word;\n        //for iteration purpose\n        var currentNRPoint = 0;\n        var currentRPoint = 0;\n        var flagList = [];\n        var i = 0;\n        var j = 0;\n        //radius defines what range to cover in a path\n        var radius = 3;\n    \n        //adding the elements to map\n        for (i = 0; i < mapElements.length; i++) {\n          let props = mapElements[i].properties;\n          if (props.floorElement === \"Rooms\") {\n            if (\n              props.floor === floor &&\n              props.roomName !== \"undefined\" &&\n              props.coordinates !== undefined\n            ){\n              Object.keys(props).map(id => {\n                if(id === 'roomName'){\n                  props[`name`] = [...props[id]].join('');\n                  delete props[id];  \n                }\n              });\n    \n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n            }\n          } else if (props.floorElement === \"FloorConnection\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            ){\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n            }\n          } else if (props.floorElement === \"Services\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            )\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          } else if (props.floorElement === \"RestRooms\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            )\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          } else {\n          }\n        }\n        //finding the indices of the\n        while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n          if (\n            nonRefinedPoints[currentNRPoint][0] ===\n              refinedPoints[currentRPoint].x &&\n            nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n          ) {\n            flagList.push(currentNRPoint);\n            currentRPoint++;\n          }\n          currentNRPoint++;\n        }\n    \n        // Generating the direction and elaborated results\n        var DirectionResults = [];\n        var ElaboratedResults = [];\n    \n        //entry point insertion to the list\n        DirectionResults.push(\n          \"You are at \" +\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n              .name\n        );\n        ElaboratedResults.push(\n          \"You are at \" +\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n              .name\n        );\n        includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n        includedSet.add(\n          refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n        );\n        //iterate and /finding the desired results\n        var error = 0;\n        for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n          var angle = 0;\n          var coordinates;\n          // this.actualAngle = 155\n          if (currentRPoint === 0) {\n            angle = this.find_angle(\n              {\n                x: refinedPoints[currentRPoint].x,\n                y: refinedPoints[currentRPoint].y + 1\n              },\n              refinedPoints[currentRPoint + 1],\n              refinedPoints[currentRPoint]\n            );\n            let path_angle = angle;\n            let floorangle = this.state.floorAngle;\n            let diff = 360 - floorangle;\n            // let CurrentDirection = 60;\n            let CurrentDirection = this.actualAngle;\n            // rotateDirection\n            this.setState({\n              pathAngle:path_angle\n            })\n    \n            let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n    \n            angle = gn;\n\n          } else\n            angle = this.find_angle(\n              refinedPoints[currentRPoint - 1],\n              refinedPoints[currentRPoint + 1],\n              refinedPoints[currentRPoint]\n            );\n          angle = angle + error;\n    \n          error = this.findErrorInAngle(angle);\n          if (currentRPoint == nRefined - 2) {\n            word = this.findDirectionword(angle);\n            DirectionResults.push(word);\n            DirectionResults.push(\n              \"Move \" +\n                Math.round(\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n                ) +\n                \" steps forward\"\n            );\n            ElaboratedResults.push(word);\n            ElaboratedResults.push(\n              \"Move \" +\n                Math.round(\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n                ) +\n                \" steps forward\"\n            );\n            DirectionResults.push(\n              \"You are about to reach:\" +\n                ElementMap.get(\n                  refinedPoints[nRefined - 1].x +\n                    \"@\" +\n                    refinedPoints[nRefined - 1].y\n                ).name +\n                \" on your \" +\n                this.findDirectionAbbreviation(angle)\n            );\n            ElaboratedResults.push(\n              \"You are about to reach:\" +\n                ElementMap.get(\n                  refinedPoints[nRefined - 1].x +\n                    \"@\" +\n                    refinedPoints[nRefined - 1].y\n                ).name +\n                \" on your \" +\n                this.findDirectionAbbreviation(angle)\n            );\n            break;\n          }\n          word = this.findDirectionword(angle);\n          DirectionResults.push(word);\n          DirectionResults.push(\n            \"Move \" +\n              Math.round(\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n              ) +\n              \" steps forward\"\n          );\n          ElaboratedResults.push(word);\n          ElaboratedResults.push(\n            \"Move \" +\n              Math.round(\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n              ) +\n              \" steps forward\"\n          );\n    \n          //this part of code handles the intermediate importatnt rooms\n          var begin = flagList[currentRPoint] + 1;\n          var end = flagList[currentRPoint + 1];\n    \n          while (begin < end) {\n            var currpoint = nonRefinedPoints[begin];\n            for (\n              i = Math.max(0, currpoint[0] - radius);\n              i < currpoint[0] + radius;\n              i++\n            ) {\n              for (\n                j = Math.max(0, currpoint[1] - radius);\n                j < currpoint[1] + radius;\n                j++\n              ) {\n                if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n                  var tempAngle = this.find_angle(\n                    {\n                      x: nonRefinedPoints[begin - 1][0],\n                      y: nonRefinedPoints[begin - 1][1]\n                    },\n                    { x: i, y: j },\n                    { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n                  );\n                  ElaboratedResults.push(\n                    ElementMap.get(i + \"@\" + j).roomName +\n                      \" on your \" +\n                      this.findDirectionAbbreviation(tempAngle)\n                  );\n                  includedSet.add(i + \"@\" + j);\n                }\n              }\n            }\n            begin++;\n          }\n        }\n    \n        DirectionResults.push(\n          \"You will reach \" +\n            ElementMap.get(\n              \"\" +\n                refinedPoints[nRefined - 1].x +\n                \"@\" +\n                refinedPoints[nRefined - 1].y\n            ).name\n        );\n        // \"You have reached \" +\n        //   ElementMap.get(\n        //     \"\" +\n        //       refinedPoints[nRefined - 1].x +\n        //       \"@\" +\n        //       refinedPoints[nRefined - 1].y\n        //   ).roomName\n    \n        ElaboratedResults.push(\n          \"You have reached \" +\n            ElementMap.get(\n              \"\" +\n                refinedPoints[nRefined - 1].x +\n                \"@\" +\n                refinedPoints[nRefined - 1].y\n            ).name\n        );\n        let resultMap = DirectionResults.map(r => {\n          return { instruction: r, floor: floor };\n        });\n        resultMap.forEach(element => {\n          this.setState(prevState => ({\n            pathFloor: [...prevState.pathFloor, element]\n          }));\n        });\n        let step = DirectionResults[0];\n        if(this.state.srcfloor === this.state.dstfloor){\n          if(this.state.zoom === false){\n          this.setState(\n            prevState => ({\n              pathArray: [...prevState.pathArray, DirectionResults],\n              srtdFlr: [...prevState.srtdFlr, floor],\n              instructionReady:true\n    \n            }),\n            () => {\n              let flrArry = [this.state.srcfloor, this.state.dstfloor];\n              if (this.state.pathArray.length === 2) {\n                for (let k = 0; k < flrArry.length; k++) {\n                  if (this.state.srtdFlr[k] === flrArry[k]) {\n                    const merge3 = this.state.pathArray.flat(1);\n                    this.setState({\n                      pathCaption: merge3\n                    });\n                  }\n                }\n              } else {\n                for (let k = 0; k < DirectionResults.length; k++) {\n                  this.setState(prevState => ({\n                    pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n                  }));\n                }\n              }\n            }\n          );\n        }\n    \n        }else{\n            if(this.state.srcfloor === floor){\n              this.setState({\n                firstFlrInstruction:DirectionResults,\n                firstFlr:floor,\n                currentFloor:floor,\n                // instructionReady:true\n              })\n            }else{\n              this.setState({\n                secondFlrInstruction:DirectionResults,\n                secondFlr:floor,\n                instructionReady:true\n              })\n            }\n        }\n          \n      };\n    \n      calculatePath = (path_angle, diff, CurrentDirection) => {\n        let pathGN, rotateDirection, path_angleN;\n        if (path_angle >= 0 && path_angle < 106) {\n          pathGN = 360 - (diff - path_angle);\n          rotateDirection = pathGN - CurrentDirection;\n        } else if (path_angle > 105 && path_angle <= 180) {\n          pathGN = path_angle - diff;\n          rotateDirection = pathGN - CurrentDirection;\n        } else if (path_angle <= -1 && path_angle >= -180) {\n          path_angleN = 180 + path_angle;\n          pathGN = path_angleN + 180 - diff;\n          rotateDirection = pathGN - CurrentDirection;\n        }\n        return rotateDirection;\n      };\n    \n      reset_var() {\n        this.grids = [];\n        this.visited = [];\n        this.shortestpath = [];\n        this.minimumcost = [];\n        this.leaves = [];\n      }\n    \n      /* NAVIGATION DRAWER */\n      drawerToggleClickHandler = () => {\n        this.setState(prevState => {\n          return { sideDrawerOpen: !prevState.sideDrawerOpen };\n        });\n      };\n    \n      backdropClickHandler = () => {\n        this.setState({ sideDrawerOpen: false });\n      };\n      incCanvas = () => {\n        let { scale } = this.state;\n        if (scale < 30) {\n          this.setState(\n            {\n              scale: scale + 1\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n      decCanvas = () => {\n        let { scale } = this.state;\n        if (scale > 2) {\n          this.setState(\n            {\n              scale: scale - 1\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n    \n      handleDstChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        if (e.length > 0) {\n          for (let i = 0; i < navInfo.length; i++) {\n            if (e[0].floorElement === \"Rooms\") {\n              resp = `${e[0].roomName}(${e[0].floor})`;\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.roomName;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n            } else if (e[0].floorElement === \"FloorConnection\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.name;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].name}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"Services\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.type;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].type}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"RestRooms\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.type;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].type} Washroom (${e[0].floor})`;\n            } else {\n            }\n          }\n          var ind = this.findFloor(floor, this.props.flrList.data);\n          this.setState(\n            {\n              dstName: name,\n              dstfloor: floor,\n              dstVal: parseInt(val),\n              dstfloorL: this.props.flrList.data[ind].floorL,\n              dstfloorB: this.props.flrList.data[ind].floorB,\n              imgName: this.props.flrList.data[ind].fileName,\n              buildingView: true,\n              showDstMenu: false,\n              dstReadOnly: true,\n              pathCaption: [],\n              selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n    \n      dstChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e.floorElement === \"Rooms\") {\n            resp = `${e.roomName}(${e.floor})`;\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e.floorElement === \"FloorConnection\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.name}(${e.floor})`;\n          } else if (e.floorElement === \"Services\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type}(${e.floor})`;\n          } else if (e.floorElement === \"RestRooms\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type} Washroom (${e.floor})`;\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            dstName: name,\n            dstfloor: floor,\n            dstVal: parseInt(val),\n            dstfloorL: this.props.flrList.data[ind].floorL,\n            dstfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName\n          },\n          () => {\n            this.handleSubmit();\n          }\n        );\n      };\n    \n      handleSrcChange = e => {\n        let { srcBuildingLocation } = this.state;\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            resp = `${e[0].roomName}(${e[0].floor})`;\n            if (e[0].node === navInfo[i].properties.node) {\n    \n              name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].name}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].type}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\n          } else {\n          }\n        }\n    \n        var ind = this.findFloor(floor, this.props.flrList.data);\n    \n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName,\n            showStrtMenu: false,\n            srcReadOnly: true,\n            zoomLevel: \"18\",\n            pathCaption: [],\n            currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`\n          },\n          () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(\n                this.props.flrList.data[0].lat,\n                this.props.flrList.data[0].lng\n              ),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 2\n              }\n            );\n            console.log(\"called\")\n            // setTimeout(() => {\n              this.handleSubmit();\n            // }, \"2000\");\n          }\n        );\n      };\n    \n      srcChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e.floorElement === \"Rooms\") {\n            resp = `${e.roomName}(${e.floor})`;\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e.floorElement === \"FloorConnection\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.name}(${e.floor})`;\n          } else if (e.floorElement === \"Services\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type}(${e.floor})`;\n          } else if (e.floorElement === \"RestRooms\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName\n          },\n          () => {\n            this.handleSubmit();\n          }\n        );\n      };\n    \n      onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          suggestions: this.getSuggestions(value)\n        });\n      };\n    \n      onDstSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          dstSuggestions: this.getDstSuggestions(value)\n        });\n      };\n      // Autosuggest will call this function every time you need to clear suggestions.\n      onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n    \n      onDstSuggestionsClearRequested = () => {\n        this.setState({\n          dstSuggestions: []\n        });\n      };\n    \n      getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n        return inputLength === 0\n          ? []\n          : this.state.list.filter(lang => {\n              let resp = \"\";\n              if (lang.floorElement === \"Rooms\") {\n                resp = `${lang.roomName}(${lang.floor})`;\n              } else if (lang.floorElement === \"FloorConnection\") {\n                resp = `${lang.name}(${lang.floor})`;\n              } else if (lang.floorElement === \"Services\") {\n                resp = `${lang.type}(${lang.floor})`;\n              } else if (lang.floorElement === \"RestRooms\") {\n                resp = `${lang.type} Washroom (${lang.floor})`;\n              } else {\n              }\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\n            });\n      };\n    \n      getDstSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n        return inputLength === 0\n          ? []\n          : this.state.list.filter(lang => {\n              let resp = \"\";\n              if (lang.floorElement === \"Rooms\") {\n                resp = `${lang.roomName}(${lang.floor})`;\n              } else if (lang.floorElement === \"FloorConnection\") {\n                resp = `${lang.name}(${lang.floor})`;\n              } else if (lang.floorElement === \"Services\") {\n                resp = `${lang.type}(${lang.floor})`;\n              } else if (lang.floorElement === \"RestRooms\") {\n                resp = `${lang.type} Washroom (${lang.floor})`;\n              } else {\n              }\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\n            });\n      };\n    \n      getSuggestionValue = suggestion => {\n        this.srcChange(suggestion);\n        if (suggestion.floorElement === \"Rooms\") {\n          return suggestion.roomName;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          return suggestion.name;\n        } else if (suggestion.floorElement === \"Services\") {\n          return suggestion.type;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          return suggestion.type;\n        } else {\n        }\n      };\n    \n      getDstSuggestionValue = suggestion => {\n        this.dstChange(suggestion);\n        if (suggestion.floorElement === \"Rooms\") {\n          return suggestion.roomName;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          return suggestion.name;\n        } else if (suggestion.floorElement === \"Services\") {\n          return suggestion.type;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          return suggestion.type;\n        } else {\n        }\n      };\n    \n      renderSuggestion = suggestion => {\n        let resp = \"\";\n        if (suggestion.floorElement === \"Rooms\") {\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          resp = `${suggestion.name}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"Services\") {\n          resp = `${suggestion.type}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n        } else {\n        }\n        return <div style={{ color: \"white\" }}>{resp}</div>;\n      };\n    \n      renderDstSuggestion = suggestion => {\n        let resp = \"\";\n        if (suggestion.floorElement === \"Rooms\") {\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          resp = `${suggestion.name}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"Services\") {\n          resp = `${suggestion.type}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n        } else {\n        }\n        return <div style={{ color: \"white\" }}>{resp}</div>;\n      };\n    \n      onChange = (event, { newValue }) => {\n        this.setState({\n          value: newValue\n        });\n      };\n    \n      onSrcChange = (event, { newValue }) => {\n        this.setState({\n          dstValue: newValue\n        });\n      };\n    \n      nvgtSrcBld = () => {\n        let { tmpSrcLocation } = this.state;\n        let e = [tmpSrcLocation];\n        this.fetchSrcBldLocation(\n          e,\n          tmpSrcLocation.venueName,\n          tmpSrcLocation.buildingName,\n          \"srcBuildingLocation\",\n          k => {\n            this.handleDstChange(k);\n          }\n        );\n      };\n    \n      nvgtDstBld = () => {\n        let { tmpDstLocation } = this.state;\n        let e = [tmpDstLocation];\n        this.fetchDstBldLocation(\n          e,\n          tmpDstLocation.venueName,\n          tmpDstLocation.buildingName,\n          \"dstBuildingLocation\",\n          k => {\n            this.handleDstChange(e);\n          }\n        );\n      };\n    \n      fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          this.props.getAllBuildingElements(data, () => {\n            let navInfo = this.props.navigationInfo;\n            for (let i = 0; i < navInfo.length; i++) {\n              if (\n                navInfo[i].properties.floorElement === \"Rooms\" &&\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n              ) {\n                this.srcBldDstPointChange(e, () => {\n                  let k = [navInfo[i].properties];\n                  this.setNavigation(this.state.selectedSrcLocation);\n                  cb(k);\n                });\n              }\n            }\n          });\n        });\n      };\n    \n      fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          this.props.getAllBuildingElements(data, () => {\n            let navInfo = this.props.navigationInfo;\n            for (let i = 0; i < navInfo.length; i++) {\n              if (\n                navInfo[i].properties.floorElement === \"Rooms\" &&\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n              ) {\n                let props = [navInfo[i].properties];\n                this.srcBldDstPointChange(props, () => {\n                  let k = [navInfo[i].properties];\n                  this.setNavigation(this.state.selectedSrcLocation);\n                  cb(k);\n                });\n              }\n            }\n          });\n        });\n      };\n    \n      srcBldDstPointChange = (e, cb) => {\n        let { srcBuildingLocation } = this.state;\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName,\n            showStrtMenu: false,\n            srcReadOnly: true,\n            zoomLevel: \"18\"\n          },\n          () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(\n                this.props.flrList.data[0].lat,\n                this.props.flrList.data[0].lng\n              ),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 2\n              }\n            );\n            setTimeout(() => {\n              this.handleSubmit();\n            }, \"2000\");\n          }\n        );\n        cb();\n      };\n    \n      navigateNext = () => {\n        let div = document.getElementById(\"mydiv\").children;\n        div[0].style.display = \"none\";\n        div[1].style.display = \"block\";\n        this.setState({\n          next: false,\n          currentFloor: this.state.dstfloor\n        });\n      };\n    \n      navigatePrevious = () => {\n        let div = document.getElementById(\"mydiv\").children;\n        div[1].style.display = \"none\";\n        div[0].style.display = \"block\";\n        this.setState({\n          next: true,\n          currentFloor: this.state.srcfloor\n        });\n      };\n    \n      handleBuildingView = () => {\n        this.setState({\n          showInstructions: false,\n        });\n      };\n    \n      previousButton() {\n        let currentStep = this.state.currentStep;\n        if (currentStep !== 0) {\n          return (\n            <button\n              className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\n              type=\"button\"\n              onClick={this._prev}\n            >\n              Previous\n            </button>\n          );\n        }\n        return null;\n      }\n    \n      nextButton() {\n        let currentStep = this.state.currentStep;\n        if (currentStep < this.state.pathCaption.length) {\n          this._next();\n        }\n        return null;\n      }\n    \n      _next = () => {\n        let currentStep = this.state.currentStep;\n        currentStep =\n          currentStep >= this.state.pathCaption.length - 1\n            ? this.state.pathCaption.length\n            : currentStep + 1;\n        if (this.state.pathCaption[currentStep]) {\n          let step = this.state.pathCaption[currentStep];\n          var utter = new window.SpeechSynthesisUtterance(step);\n          let lang = localStorage.getItem(\"Language\");\n          if (lang === \"Hindi\") {\n            utter.lang = \"hi-IN\";\n          } else {\n            utter.lang = \"en-US\";\n          }\n          window.speechSynthesis.cancel();\n          window.speechSynthesis.speak(utter);\n        }\n        if (\n          this.state.pathFloor[currentStep] !== undefined &&\n          this.state.pathFloor[currentStep].floor !==\n            this.state.pathFloor[currentStep - 1].floor\n        ) {\n          this.navigateNext();\n        }\n    \n        this.setState({\n          currentStep: currentStep\n        });\n      };\n    \n      _prev = () => {\n        let currentStep = this.state.currentStep;\n        currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n        if (this.state.pathFloor[currentStep + 1] !== undefined) {\n          if (\n            this.state.pathFloor[currentStep + 1].floor !==\n            this.state.pathFloor[currentStep].floor\n          ) {\n            this.navigatePrevious();\n          }\n        }\n        this.setState({\n          currentStep: currentStep\n        });\n      };\n    \n      playInstruction = (pause)=>{\n        var synth = window.speechSynthesis;\n        synth.cancel();\n        if(pause === true){\n          synth.pause();\n        }else{\n          synth.resume();\n        }\n        // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n        // synth.speak(utterance);\n        // synth.resume()\n        let instruction = this.filterInstruction()\n    \n        instruction.forEach(r=>{\n          var utterance1 = new SpeechSynthesisUtterance(r);\n          synth.speak(utterance1);\n        })\n      }\n    \n      filterInstruction = ()=>{\n        var instructions = [];\n        var stepsCount = [];\n        let instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n        instructions = instruction &&  instruction.map((r, i) => {\n                            if (\n                              r.includes(\"right\") ||\n                              r.includes(\"Right\")\n                            ) {\n                              return r \n                            } else if (\n                              r.includes(\"left\") ||\n                              r.includes(\"Left\")\n                            ) {\n                              return r \n                            } else if (\n                              r.includes(\"forward\")\n                            ) {\n                              let theNum  = r.match(/\\d+/)[0]\n                              stepsCount.push(parseInt(theNum))\n                              return r \n                            } else if (\n                              r.includes(\"Turn 1 O' Clock\") ||\n                              r.includes(\"Turn 2 O' Clock\") ||\n                              r.includes(\"Turn 3 O' Clock\") \n                            ) {\n                              return'Turn slight right' \n                            }else if(  \n                              r.includes(\"Turn 4 O' Clock\") ||\n                              r.includes(\"Turn 5 O' Clock\")){\n                                return 'Turn back and then turn slight left' \n                            } else if (\n                              r.includes(\"Turn 7 O' Clock\") ||\n                              r.includes(\"Turn 8 O' Clock\") ||\n                              r.includes(\"Turn 9 O' Clock\") \n                            ) {\n                              return 'turn slight left'\n                            }else if(                        \n                              r.includes(\"Turn 10 O' Clock\") ||\n                              r.includes(\"Turn 11 O' Clock\")){\n                                return 'Turn back and then turn slight left'\n                            } else if (\n                              r.includes(\"Turn 6 O' Clock\")\n                            ) {\n                              return 'Turn back'\n                            } else if (r.includes(\"You are at\")) {\n                              return r\n                            } else if (r.includes(\"reached\")) {\n                              return r\n                            } else if (\n                              r.includes(\"Turn 0 O' Clock\") ||\n                              r.includes(\"Turn 12 O' Clock\")\n                            ) {\n                              return null \n                            }else{\n                              return r\n                            }\n        })\n        var distance\n    \n        if(instructions){\n          const add = arr => arr.reduce((a, b) => a + b, 0);\n          distance = add(stepsCount);\n          instructions = instructions.filter( (el)=> {\n            return el != null;\n          });\n        }\n        instructions.splice(instructions.length-2, 1);\n        return instructions;\n      }\n\n  state = {\n  };\n  \n  handleClick = () => {\n    this.setState({\n            color: Konva.Util.getRandomColor()\n        });\n    };\n  \n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n        // <React.Fragment>\n        \n        // </React.Fragment>\n        <React.Fragment>\n         \n            \n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView ? (\n            <React.Fragment>\n\n              <div\n                className=\"source-destination fixed-top\"\n                id=\"src-bar\"\n                style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showStrtMenu: true,\n                          srcReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button>\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-10 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          dstReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button>\n                  </div>\n                  <div className=\"col-2\"></div>\n                </div>\n              </div>\n              {this.state.showStrtMenu && !this.state.buildingView\n                ? \n                <SourceMenu\n                srcName = {this.state.srcName}\n                currentLocation = {this.state.currentLocation}\n                selectedSrcLocation = {this.state.selectedSrcLocation}\n                locationList = {this.state.locationList}\n                srcReadOnly = {this.state.srcReadOnly}\n                srcFloorList = {this.state.srcFloorList}\n                showStrtMenu = {()=>{\n                  this.setState({ showStrtMenu: false });\n                }}\n                handleSelectSource = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        tmpSrcLocation: e[0]\n                      },\n                      () => {\n                        this.handleSrcChange(e);\n                      }\n                    );\n                  }\n                }}\n                handleSourceLocation = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        selectedSrcLocation: e[0],\n                        selectedDstLocation: e[0],\n                        buildingView: false\n                      },\n                      () => {\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                        })\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"srcBuildingLocation\"\n                        );\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"dstBuildingLocation\"\n                        );\n                        if(this.state.dstName !== \"Select Destination\"){\n                          this.handleSubmit()\n                        }else{\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      }\n                    );\n                  }\n                }}\n                />\n                : null}\n              {this.state.showDstMenu && !this.state.buildingView\n                ? \n                <DestinationMenu\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      if (\n                        this.state.selectedSrcLocation.venueName ===\n                          this.state.selectedDstLocation.venueName &&\n                        this.state.selectedSrcLocation.buildingName ===\n                          this.state.selectedDstLocation.buildingName\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                : null}\n            </React.Fragment>\n          ) : null}\n         \n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n             \n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n              <Stage\n                width={500} \n                height={500}\n            >\n                <Layer>\n                {this.state.pathPoints.map((star,id) => (\n                  <Star\n                    key={id}\n                    id={id}\n                    x = {star[0]}\n                    y = {star[1]}\n                    numPoints={5}\n                    innerRadius = {20}\n                    outerRadius = {40}\n                    fill=\"#89b717\"\n                    opacity={0.8}\n                    draggable\n                    // rotation={star.rotation}\n                    shadowColor=\"black\"\n                    shadowBlur={10}\n                    shadowOpacity = {0.6}\n                  />\n                ))}\n                </Layer>\n            </Stage>\n\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={true}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      getImage: state.imgDetails,\n      allNodes: state.getAllElem,\n      flrList: state.floorList,\n      userProfile:state.userPortfolio,\n      navigationInfo: state.navigationInfo,\n      vnList: state.venueList,\n      bldList: state.buildingList,\n      gpsLocation: state.gpsLocation,\n      androidNav: state.androidNavigation\n    };\n  };\n  \n  export default connect(mapStateToProps, {\n    floorList,\n    imgDetails,\n    getAllBuildingElements,\n    venueList,\n    buildingList,\n    getGpsLocation,\n    androidNavigation,\n    getUserPortfolio\n  })(ColoredRect);"]},"metadata":{},"sourceType":"module"}