{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jahnavi/navigation/src/components/dashboard/navigation/InclusiveNavigation.js\";\nimport React from \"react\";\nimport { Map as MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport { floorList, imgDetails, getAllBuildingElements, venueList, buildingList, getGpsLocation, androidNavigation, getUserPortfolio } from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\"; // import \"leaflet-routing-machine\";\n\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\nconst center = {\n  lat: 28.6139,\n  lng: 77.209\n};\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n\n}\n\nclass Navigation extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getUserDetails = () => {\n      let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({\n        id,\n        token\n      }, () => {\n        if (this.props.userProfile.success === false) {\n          localStorage.clear();\n          this.props.history.push('/');\n        } else {\n          let data = this.props.userProfile.properties;\n          this.setState({\n            language: data.language,\n            visionType: data.visionType,\n            height: data.height,\n            ageGroup: data.ageGroup,\n            walkingType: data.navigationMode\n          });\n        }\n      });\n    };\n\n    this.setCanvasregion = success => {\n      var cvWidth = Math.max(document.getElementById(\"myCanvassrc\").clientWidth, window.innerWidth || 0);\n      var cvHeight = Math.max(document.getElementById(\"myCanvassrc\").clientHeight, window.innerHeight || 0);\n      var srcBar = document.getElementById(\"src-bar\");\n      var navHeight = document.getElementById(\"nav-height\");\n      let realHeight = cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n      this.setState({\n        currentLocation: \"IIT Delhi\",\n        selectedVenue: \"IIT Delhi\",\n        canvasWidth: cvWidth,\n        canvasHeight: realHeight,\n        center: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        },\n        currentPos: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        }\n      }, () => {\n        this.mapAnimation(success);\n      });\n    };\n\n    this.mapAnimation = success => {\n      const map = this.leafletMap.leafletElement;\n      map.flyTo(new L.LatLng(success.coords.latitude, success.coords.longitude), map.getZoom(), {\n        animate: true,\n        duration: 0.5\n      });\n    };\n\n    this.getVenueList = (coordinates = null) => {\n      this.props.venueList(() => {\n        this.setState({\n          venueList: this.props.vnList.data\n        }, () => {\n          this.findNearVenue(coordinates);\n        });\n      });\n    };\n\n    this.fetchLocation = (venueName, buildingName, point) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        let flrListData = this.props.flrList.data;\n        let prevData = this.state.center;\n        this.setState({\n          center: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          currentPos: {\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng\n          },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle: parseInt(flrListData[0].buildingOrientation)\n          }\n        }, () => {\n          this.getAllBuildingElements(data, flrListData, point, prevData);\n        });\n      });\n    };\n\n    this.getAllBuildingElements = (data, flrListData, point, prevData) => {\n      this.props.getAllBuildingElements(data, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(flrListData[0].lat, flrListData[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 0.5\n        });\n        this.dataFilter(data, flrListData, point, prevData, map);\n      });\n    };\n\n    this.dataFilter = (flrListData, point, prevData, map) => {\n      let nodes = this.props.navigationInfo;\n      let lists = [];\n\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n      }\n\n      const uniqueLists = Array.from(new Set(lists.map(o => {\n        if (o.floorElement === \"Rooms\") {\n          return o.coordinates;\n        } else if (o.floorElement === \"FloorConnection\") {\n          return o.coordinates;\n        } else if (o.floorElement === \"Services\") {\n          return o.coordinates;\n        } else if (o.floorElement === \"RestRooms\") {\n          return o.coordinates;\n        } else {// return o.coordinates\n        }\n      }))).map(id => {\n        return lists.find(a => a.coordinates === id);\n      });\n      let freeBeacon = uniqueLists.map(r => {\n        if (r.floorElement === \"Services\") {\n          if (r.type === \"Beacons\") {\n            return null;\n          } else {\n            return r;\n          }\n        } else {\n          return r;\n        }\n      });\n      let freeData = freeBeacon.filter(el => {\n        return el != null;\n      });\n      freeData.sort((a, b) => {\n        if (a.floorElement === \"Rooms\") {\n          if (a.roomName !== undefined) {\n            return a.roomName < b.roomName ? -1 : a.roomName > b.roomName ? 1 : 0;\n          } else {\n            return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n          }\n        } else {\n          return a.type < b.type ? -1 : a.type > b.type ? 1 : 0;\n        }\n      }); // if (point === \"srcBuildingLocation\") {\n      //   this.setState({\n      //     srcFloorList: freeData\n      //   });\n      // } else if (point === \"dstBuildingLocation\") {\n      //   let me = this;\n      //   let srcLat = this.state.srcBuildingLocation.lat;\n      //   let srcLng = this.state.srcBuildingLocation.lng;\n      //   if (!srcLat && !srcLng){\n      //     srcLat = prevData.lat;\n      //     srcLng = prevData.lng;\n      //   }\n      //   map.fitBounds(\n      //     L.latLngBounds(\n      //       L.latLng(srcLat, srcLng),\n      //       L.latLng(flrListData[0].lat, flrListData[0].lng)\n      //     )\n      //   );\n      //   this.setState({\n      //     dstFloorList: freeData,\n      //     zoomLevel: \"10\"\n      //   });\n      // }\n    };\n\n    this.findNearVenue = coordinates => {\n      let {\n        venueList\n      } = this.state;\n      let distList = venueList.map(r => {\n        return this.getDistance(coordinates, r);\n      });\n      let arr = [];\n      let list = this.state.venueList.map((r, i) => {\n        if (r.buildingList) {\n          let dt = r.buildingList.map(k => {\n            arr.push({\n              venueName: r.venueName,\n              buildingName: k,\n              venueDistance: distList[i].distance\n            });\n            return {\n              venueName: r.venueName,\n              buildingName: k,\n              venueDistance: distList[i].distance\n            };\n          });\n          return dt;\n        } else {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: \"\",\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: \"\",\n            venueDistance: distList[i].distance\n          };\n        }\n      });\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n\n        if (tmp > highest) highest = tmp;\n      }\n\n      let listArr = this.state.locationList.map(r => {\n        let k = distList.map(d => {\n          if (d.venueName === r.venueName) {\n            return {\n              r,\n              distance: d.distance\n            };\n          }\n        });\n      });\n      let sortedArr = this.quickSort(arr);\n\n      if (lowest < 1) {\n        this.setState({\n          currentVenue: nearLocation,\n          locationList: arr\n        }, () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        });\n      } else {\n        this.setState({\n          currentVenue: {\n            address: \"\",\n            coordinates: [],\n            dateCreated: \"\",\n            distance: 2,\n            id: 35,\n            liveStatus: true,\n            organization: \"\",\n            venueName: \"\"\n          },\n          selectedLocation: {\n            venueName: \"Venue\",\n            buildingName: \"Building\"\n          },\n          locationList: arr,\n          currentBuilding: {\n            address: \"\",\n            buildingName: \"\",\n            coordinates: [],\n            distance: 2,\n            lat: 0,\n            lng: 0\n          }\n        });\n      }\n    };\n\n    this.quickSort = arr => {\n      if (arr.length < 2) {\n        return arr;\n      }\n\n      let pivot = arr[0];\n      let lesserVal = [];\n      let greaterVal = [];\n\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[k].venueDistance < pivot.venueDistance) {\n          lesserVal.push(arr[k]);\n        } else {\n          greaterVal.push(arr[k]);\n        }\n      }\n    };\n\n    this.getBuildingList = (venueName, coordinates = null) => {\n      this.props.buildingList({\n        venueName: venueName\n      }, () => {\n        this.setState({\n          buildingList: this.props.bldList.data\n        }, () => {\n          if (this.state.buildingList.length > 0) {\n            if (coordinates !== null) {\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: {\n                venueName: venueName,\n                buildingName: \"\"\n              }\n            });\n          }\n        });\n      });\n    };\n\n    this.findNearBuilding = coordinates => {\n      let {\n        buildingList\n      } = this.state;\n      let distList = buildingList.map(r => {\n        let p = [r.lat, r.lng];\n        r.coordinates = p;\n        return this.getDistance(coordinates, r);\n      });\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n\n        if (tmp > highest) highest = tmp;\n      }\n\n      if (lowest < 50) {\n        this.setState({\n          currentBuilding: nearLocation,\n          selectedLocation: {\n            venueName: this.state.currentVenue.venueName,\n            buildingName: nearLocation.buildingName\n          }\n        }, () => {\n          this.setNavigation(this.state.selectedLocation);\n          this.fetchLocation(this.state.selectedLocation.venueName, this.state.selectedLocation.buildingName);\n        });\n      }\n    };\n\n    this.rad = function (x) {\n      return x * Math.PI / 180;\n    };\n\n    this.getDistance = function (p1, p2) {\n      var R = 6378137; // Earth’s mean radius in meter\n\n      var dLat = this.rad(p2.coordinates[0] - p1[0]);\n      var dLong = this.rad(p2.coordinates[1] - p1[1]);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.rad(p1[0])) * Math.cos(this.rad(p2.coordinates[0])) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      var d = R * c / 1000;\n      p2.distance = d;\n      return p2; // returns the distance in km\n    };\n\n    this.setNavigation = data => {\n      this.props.getAllBuildingElements({\n        venueName: this.state.selectedVenue,\n        buildingName: this.state.selectedBuilding\n      }, () => {\n        let nodes = this.props.navigationInfo;\n        this.grids_all = [];\n        let lists = [];\n        let num_vert = 0;\n        let fc = new Map();\n\n        for (let i = 0; i < nodes.length; i++) {\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            num_vert++;\n            var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n\n            if (fc.has(v) === false) {\n              fc.set(v, [val]);\n            } else {\n              fc.get(v).push(val);\n            }\n          }\n        }\n\n        this.graph = new Graph(num_vert + 2);\n\n        for (let i = 0; i < nodes.length; i++) {\n          var sel = nodes[i].properties;\n          lists.push(sel);\n\n          if (nodes[i].properties.floorElement === \"FloorConnection\") {\n            var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n            this.graph.addVertex(val);\n          }\n\n          if (nodes[i].properties.floorElement === \"Floor\") {\n            if (nodes[i].properties.length == 8) {\n              var v = nodes[i].properties.frConn[0].split(\",\");\n              var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n              var len = v.length / 2;\n\n              if (v.length % 2 === 0) {\n                for (var j = 0; j < v.length; j = j + 2) {\n                  var val = parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) + parseInt(v[j]);\n                  var vert1 = nodes[i].properties.floor + \",\" + val;\n\n                  for (var k = j + 2; k < v.length; k = k + 2) {\n                    val = parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) + parseInt(v[k]);\n                    var vert2 = nodes[i].properties.floor + \",\" + val;\n                    this.graph.addEdge(vert1, vert2, flrmatrix[len * (j / 2) + k / 2], true);\n                  }\n                }\n              } else {}\n            }\n\n            this.grids_all.push(nodes[i]);\n          }\n        }\n\n        let getKeys = fc.keys();\n\n        for (let i of getKeys) {\n          var get_values = fc.get(i);\n          var cnt = 0;\n          var prev = null;\n\n          for (var j of get_values) {\n            if (cnt > 0) {\n              this.graph.addEdge(prev, j, 0, true);\n              prev = j;\n            }\n\n            if (cnt === 0) {\n              prev = j;\n            }\n\n            cnt++;\n          }\n        }\n\n        this.setState({\n          list: lists\n        });\n      });\n    };\n\n    this.toggle = (type, value) => event => {\n      this.setState(state => {\n        return {\n          [type]: value\n        };\n      });\n    };\n\n    this.findFloor = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (array[i].type) {\n            if (array[i].geomtery.type === \"Polygon\") {\n              if (array[i].properties.floor === key) {\n                return i;\n              }\n            }\n          }\n\n          if (array[i].floor === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n      let {\n        scale\n      } = this.state;\n\n      if (color === \"red\") {\n        let srcDiv = document.getElementById(\"srcImage\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n      } else if (color === \"yellow\") {\n        let lift = document.getElementById(\"lift\");\n        let stairs = document.getElementById(\"stairs\");\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        var rot = Math.PI / 2 * 3;\n        var x = pos_x;\n        var y = pos_y;\n        var step = Math.PI / 5;\n        let frConnType = \"\";\n        let data = this.props.navigationInfo.map(r => {\n          return r.properties;\n        });\n\n        for (let k = 0; k < data.length; k++) {\n          if (data[k].node === i) {\n            frConnType = data[k].type;\n          }\n        }\n\n        if (frConnType === \"Stairs\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n        } else if (frConnType === \"Lift\") {\n          var half_scale = scale / 2;\n          pos_x = pos_x + half_scale;\n          pos_y = pos_y + half_scale;\n          context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n        }\n      } else if (color === \"green\") {\n        let dstDiv = document.getElementById(\"dstImage\");\n        let {\n          scale\n        } = this.state;\n        let canvas = document.getElementById(canvasid);\n        let context = canvas.getContext(\"2d\");\n        var wrh = this.state.dstfloorL / this.state.dstfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx, gpy;\n\n        if (canvasid === \"canvas0\") {\n          gpx = newWidth / this.state.srcfloorL;\n          gpy = newHeight / this.state.srcfloorB;\n        } else {\n          gpx = newWidth / this.state.dstfloorL;\n          gpy = newHeight / this.state.dstfloorB;\n        }\n\n        let pos_x = gpx * (i % srcfloorL);\n        let pos_y = gpy * parseInt(i / srcfloorL);\n        context.fillStyle = color; // context.fillRect(pos_x, pos_y, scale, scale);  \n\n        context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n      }\n    };\n\n    this.color_canvas = (i, place, color) => {\n      let srcDiv = document.getElementById(\"srcImage\");\n      let dstDiv = document.getElementById(\"dstImage\");\n\n      if (place === \"srcmap\") {\n        let {\n          srcfloorL,\n          scale\n        } = this.state;\n        var canvas = document.getElementById(\"myCanvassrc\");\n        var context = canvas.getContext(\"2d\");\n        var wrh = this.state.srcfloorL / this.state.srcfloorB;\n        var newWidth = this.state.canvasWidth;\n        var newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        let gpx = newWidth / this.state.srcfloorL;\n        let gpy = newHeight / this.state.srcfloorB;\n        var posX = gpx * (i % srcfloorL);\n        var posY = gpy * parseInt(i / srcfloorL);\n        var halfScale = scale / 2;\n        posX = posX + halfScale;\n        posY = posY + halfScale;\n\n        if (color === \"green\") {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n        } else if (color === \"#bdbdbd\") {\n          let {\n            dstfloorL,\n            scale\n          } = this.state;\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.fillStyle = color;\n          context.globalAlpha = 1;\n          context.fillRect(posX, posY, scale, scale);\n        } else {\n          var half_scale = scale / 2;\n          posX = posX + half_scale;\n          posY = posY + half_scale;\n          context.globalAlpha = 1;\n          context.drawImage(srcDiv, posX - 9, posY, 15, 15);\n        }\n      } else {\n        let {\n          dstfloorL,\n          scale\n        } = this.state;\n        let canvas = document.getElementById(\"myCanvasdst\");\n        let context = canvas.getContext(\"2d\");\n        let posX = scale * (i % dstfloorL);\n        let posY = scale * parseInt(i / dstfloorL);\n        context.fillStyle = color;\n        context.fillRect(posX, posY, scale, scale);\n      }\n    };\n\n    this.find = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.find_fl = (key, array) => {\n      if (array !== undefined) {\n        for (let i = 0; i < array.length; i++) {\n          if (parseInt(array[i].node) === key && array[i].floor == \"floorconnection\") {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    };\n\n    this.handleSubmit = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal,\n        dstfloorL,\n        dstfloorB\n      } = this.state;\n\n      if (srcVal != null && dstVal != null) {\n        var divimg = document.getElementById(\"mydiv1\");\n        var divcan = document.getElementById(\"mydiv\");\n        var len = divimg.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divimg.childNodes[0].remove();\n        }\n\n        len = divcan.childNodes.length;\n\n        for (var i = 0; i < len; i++) {\n          var elem = divcan.childNodes[0].remove();\n        }\n\n        if (srcfloor === dstfloor) {\n          var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n          let ratio = cvWidth / dstfloorL;\n          let height_of_canvas = ratio * dstfloorB;\n          let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n          this.setState({\n            samefloor: true,\n            scale: factor\n          });\n          var img1 = new Image();\n          var img = document.getElementById(\"myImage\");\n          img1.src = img.src;\n          img1.hidden = true;\n          var color_canvas = this.color_canvas;\n          var me = this;\n          var dest_x = this.state.dstVal % this.state.dstfloorL;\n          var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n          let imgDiv = document.getElementById(\"myImage\");\n          this.imgDiv = imgDiv;\n          let angle = 0; // status of the pointer(s)\n\n          let pointerangle;\n          var canvas = window.d3.select(\"canvas\").call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", zoom)),\n              context = canvas.node().getContext(\"2d\"),\n              width = canvas.property(\"width\"),\n              height = canvas.property(\"height\");\n          var active = window.d3.select(null);\n          var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n          var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n\n          function zoom() {\n            me.setState({\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            }, () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            });\n          }\n\n          function draw() {\n            if (active.node() === this) return reset();\n            active.classed(\"active\", false);\n            active = window.d3.select(this).classed(\"active\", true);\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            context.rotate(angle);\n            context.globalAlpha = 0.5;\n            context.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight); // me.loadNonwalkable(\"myCanvassrc\")\n\n            me.callwhile(me.state.srcfloor, me.state.srcVal, me.state.srcfloorL, me.state.srcfloorB, dest_x, dest_y, true, \"myCanvassrc\");\n            color_canvas(srcVal, \"srcmap\", \"red\");\n            color_canvas(dstVal, \"srcmap\", \"green\");\n          }\n\n          function reset() {\n            active.classed(\"active\", false);\n            active = window.d3.select(null);\n            canvas.transition().duration(750).call(zoom1.transform, initialTransform);\n          }\n\n          function timer(ms) {\n            return new Promise(res => setTimeout(res, ms));\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY); // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n\n          img1.onload = function () {\n            draw();\n            zoomTo();\n          };\n        } else {\n          this.setState({\n            samefloor: false,\n            buildingView: true\n          });\n          this.findpath();\n        }\n      } else {}\n    };\n\n    this.loadNonwalkable = () => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData = navInfo.filter(r => {\n        return r.floor === srcfloor;\n      });\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpath(start, nodes[j]);\n          this.color_canvas(start, \"srcmap\", \"#bdbdbd\");\n          start = nodes[j];\n        }\n\n        this.color_canvas(nodes[0], \"srcmap\", \"#bdbdbd\");\n      }\n    };\n\n    this.loadMultiFloorNonwalkable = id => {\n      let {\n        srcVal,\n        srcfloor,\n        dstfloor,\n        dstVal\n      } = this.state;\n      let navInfo = this.props.androidNav;\n      let floorData;\n\n      if (id === \" canvas0\") {\n        floorData = navInfo.filter(r => {\n          return r.floor === srcfloor;\n        });\n      } else {\n        floorData = navInfo.filter(r => {\n          return r.floor === dstfloor;\n        });\n      }\n\n      let polygons = floorData[0].properties.clickedPoints;\n\n      for (let i = 0; i < polygons.length; i++) {\n        let nodes = polygons[i].split(\",\");\n        var start = nodes[0];\n\n        for (let j = 1; j < nodes.length; j++) {\n          this.oldpathMulti(start, nodes[j], id); // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n\n          start = nodes[j];\n        } // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n\n      }\n    };\n\n    this.oldpath = (x, y) => {\n      // x = coord_val  y=coord_val in normal\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n      } else {\n        g = dstfloorL * e + f;\n        this.color_canvas(g, \"srcmap\", \"#bdbdbd\");\n        this.oldpath(g, x);\n        this.oldpath(g, y);\n      }\n    };\n\n    this.color = (i, color, canvasid) => {\n      let posX, posY, gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      } else {\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);\n    };\n\n    this.oldpathMulti = (x, y, id) => {\n      var a, b, c, d, e, f, g;\n      let {\n        dstfloorL\n      } = this.state;\n      a = parseInt(x / dstfloorL);\n      b = x % dstfloorL;\n      c = parseInt(y / dstfloorL);\n      d = y % dstfloorL;\n      e = Math.floor((a + c) / 2);\n      f = Math.floor((b + d) / 2);\n\n      if (e === a & f === b) {\n        g = dstfloorL * c + b;\n        this.color(g, \"#bdbdbd\", id);\n      } else if (e === c & f === d) {\n        g = dstfloorL * a + d;\n        this.color(g, \"#bdbdbd\", id);\n      } else {\n        g = dstfloorL * e + f;\n        this.color(g, \"#bdbdbd\", id);\n        this.oldpathMulti(g, x, id);\n        this.oldpathMulti(g, y, id);\n      }\n    };\n\n    this.interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n      let resultpath = [];\n\n      if (turningPointsPath.length === 1) {\n        resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n        return resultpath;\n      }\n\n      for (let i = 0; i < turningPointsPath.length - 1; i++) {\n        let points = this.interpolatePoints(turningPointsPath[i], turningPointsPath[i + 1], seperationGap, gpx, gpy);\n\n        for (let k = 0; k < points.length; k++) {\n          resultpath.push(points[k]);\n        } // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n\n      }\n\n      return resultpath;\n    };\n\n    this.simplifyPath = (points, tolerance) => {\n      // helper classes\n      var Vector = function (x, y) {\n        this.x = x;\n        this.y = y;\n      };\n\n      var Line = function (p1, p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n\n        this.distanceToPoint = function (point) {\n          // slope\n          var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n              // y offset\n          b = this.p1.y - m * this.p1.x,\n              d = []; // distance to the linear equation\n\n          d.push(Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)); // distance to p1\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2))); // distance to p2\n\n          d.push(Math.sqrt(Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2))); // return the smallest distance\n\n          return d.sort(function (a, b) {\n            return a - b; //causes an array to be sorted numerically and ascending\n          })[0];\n        };\n      };\n\n      var douglasPeucker = function (points, tolerance) {\n        if (points.length <= 2) {\n          return [points[0]];\n        }\n\n        var returnPoints = [],\n            // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n            // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n            maxDistanceIndex = 0,\n            p;\n\n        for (var i = 1; i <= points.length - 2; i++) {\n          var distance = line.distanceToPoint(points[i]);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxDistanceIndex = i;\n          }\n        } // check if the max distance is greater than our tollerance allows\n\n\n        if (maxDistance >= tolerance) {\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true); // include this point in the output\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)); // returnPoints.push( points[maxDistanceIndex] );\n\n          returnPoints = returnPoints.concat(douglasPeucker(points.slice(maxDistanceIndex, points.length), tolerance));\n        } else {\n          // ditching this point\n          p = points[maxDistanceIndex];\n          line.distanceToPoint(p, true);\n          returnPoints = [points[0]];\n        }\n\n        return returnPoints;\n      };\n\n      var arr = douglasPeucker(points, tolerance); // always have to push the very last point on so it doesn't get left off\n\n      arr.push(points[points.length - 1]);\n      return arr;\n    };\n\n    this.find_angle = (p0, p1, c) => {\n      var p0c = {\n        x: c.x - p0.x,\n        y: c.y - p0.y\n      }; // p0->c (b)\n\n      var cp1 = {\n        x: p1.x - c.x,\n        y: p1.y - c.y\n      }; // p1->c (a)\n      // {\n      // x: refinedPoints[currentRPoint].x,\n      // y: refinedPoints[currentRPoint].y + 1\n      // },\n      // refinedPoints[currentRPoint + 1],\n      // refinedPoints[currentRPoint]\n\n      return Math.atan2(cp1.y * p0c.x - cp1.x * p0c.y, p0c.x * cp1.x + p0c.y * cp1.y) * 180 / Math.PI;\n    };\n\n    this.findDirectionword = angle => {\n      if (angle >= 75 && angle <= 105) return \"Turn Right\";\n      if (angle <= -75 && angle >= -105) return \"Turn Left\";\n      if (angle >= 165 && angle <= 180 || angle <= -165 && angle >= -180) return \"Go Straight\";\n\n      if (angle < 0) {\n        if (Math.round((360 + angle) / 30) === 9) {\n          return \"Turn Left\";\n        } // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n        //   return (\"Go Straight\")\n        // }\n        // return (\"O' Clock\", {\n        //   angle: Math.abs(Math.round((360 + angle) / 30))\n        // });\n\n\n        return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n      }\n\n      if (Math.floor(angle / 30) === 3) return \"Turn Right\"; // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return this.props.t(\"Go Straight\")\n      // }\n      // return this.props.t(\"O' Clock\", {\n      //   angle: Math.abs(Math.round(angle / 30))\n      // });\n\n      return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n    };\n\n    this.findWord = angle => {\n      if (angle >= 75 && angle <= 105) return \"Turn Right\";\n      if (angle <= -75 && angle >= -105) return \"Turn Left\";\n      if (angle >= 165 && angle <= 180 || angle <= -165 && angle >= -180) return \"Go Straight\";\n\n      if (angle < 0) {\n        if (Math.round((360 + angle) / 30) === 9) {\n          return \"Turn Left\";\n        }\n\n        return \"Turn left\"; //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n      }\n\n      if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n      return \"Turn right\"; // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n    };\n\n    this.findErrorInAngle = angle => {\n      if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n      return angle - Math.round(angle / 30) * 30;\n    };\n\n    this.findDirectionAbbreviation = angle => {\n      if (angle > 0) return \"Right\";\n      return \"Left\";\n    };\n\n    this.findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n      //length of refined and non refined paths\n      var nRefined = refinedPoints.length;\n      var nNonRefined = nonRefinedPoints.length; //converting the mapElements to ordered map for ease of access\n\n      var ElementMap = new Map();\n      var includedSet = new Set();\n      var word; //for iteration purpose\n\n      var currentNRPoint = 0;\n      var currentRPoint = 0;\n      var flagList = [];\n      var i = 0;\n      var j = 0; //radius defines what range to cover in a path\n\n      var radius = 3;\n      let pathTuning = []; //adding the elements to map\n\n      for (i = 0; i < mapElements.length; i++) {\n        let props = mapElements[i].properties;\n\n        if (props.floorElement === \"Rooms\") {\n          if (props.floor === floor && props.roomName !== \"undefined\" && props.coordinates !== undefined) {\n            Object.keys(props).map(id => {\n              if (id === 'roomName') {\n                props[`name`] = [...props[id]].join('');\n                delete props[id];\n              }\n            });\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          }\n        } else if (props.floorElement === \"FloorConnection\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) {\n            ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n          }\n        } else if (props.floorElement === \"Services\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else if (props.floorElement === \"RestRooms\") {\n          if (props.floor === floor && props.name !== \"undefined\" && props.coordinates !== undefined) ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        } else {}\n      } //finding the indices of the\n\n\n      while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n        if (nonRefinedPoints[currentNRPoint][0] === refinedPoints[currentRPoint].x && nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y) {\n          flagList.push(currentNRPoint);\n          currentRPoint++;\n        }\n\n        currentNRPoint++;\n      } // Generating the direction and elaborated results\n\n\n      var DirectionResults = [];\n      var ElaboratedResults = []; //entry point insertion to the list\n\n      DirectionResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      ElaboratedResults.push(\"You are at \" + ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y).name);\n      includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n      includedSet.add(refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y); //iterate and /finding the desired results\n\n      var error = 0;\n\n      for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n        var angle = 0;\n        var coordinates; // this.actualAngle = 155\n\n        if (currentRPoint === 0) {\n          angle = this.find_angle({\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          }, refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n          let path_angle = angle;\n          let floorangle = this.state.floorAngle;\n          let diff = 360 - floorangle; // let CurrentDirection = 60;\n\n          let CurrentDirection = this.actualAngle; // rotateDirection\n\n          this.setState({\n            pathAngle: path_angle\n          });\n          let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n          angle = gn;\n        } else angle = this.find_angle(refinedPoints[currentRPoint - 1], refinedPoints[currentRPoint + 1], refinedPoints[currentRPoint]);\n\n        angle = angle + error;\n        error = this.findErrorInAngle(angle);\n        let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint]);\n        let base = Math.cos(angle) * hypo;\n        let height = Math.sin(angle) * hypo;\n        this.forwardStep = parseInt(Math.abs(height));\n        this.lastStep = parseInt(Math.abs(base));\n        let steps = parseInt(this.forwardStep + hypo);\n\n        if (currentRPoint === nRefined - 2) {\n          word = this.findDirectionword(angle);\n          DirectionResults.push(word);\n          DirectionResults.push(\"Move \" + Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])) + \" steps forward\");\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          break;\n        }\n\n        if (hypo <= 6) {\n          word = this.findWord(angle);\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n        } else {\n          word = this.findDirectionword(angle);\n          pathTuning.push({\n            points: refinedPoints[currentRPoint],\n            angle: angle,\n            base,\n            height,\n            word\n          });\n          let step = parseInt(this.lastStep) + parseInt(Math.round(0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])));\n          DirectionResults.push(word);\n          DirectionResults.push(word + \" Move \" + step + \" steps forward\");\n        } //this part of code handles the intermediate importatnt rooms\n\n\n        var begin = flagList[currentRPoint] + 1;\n        var end = flagList[currentRPoint + 1];\n\n        while (begin < end) {\n          var currpoint = nonRefinedPoints[begin];\n\n          for (i = Math.max(0, currpoint[0] - radius); i < currpoint[0] + radius; i++) {\n            for (j = Math.max(0, currpoint[1] - radius); j < currpoint[1] + radius; j++) {\n              if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n                var tempAngle = this.find_angle({\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                }, {\n                  x: i,\n                  y: j\n                }, {\n                  x: nonRefinedPoints[begin][0],\n                  y: nonRefinedPoints[begin][1]\n                });\n                ElaboratedResults.push(ElementMap.get(i + \"@\" + j).roomName + \" on your \" + this.findDirectionAbbreviation(tempAngle));\n                includedSet.add(i + \"@\" + j);\n              }\n            }\n          }\n\n          begin++;\n        }\n      }\n\n      let elem = ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y);\n\n      if (elem.type === \"Rest Rooms\") {\n        let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`;\n        DirectionResults.push(\"You will reach \" + name);\n      } else {\n        DirectionResults.push(\"You will reach \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name);\n      }\n\n      ElaboratedResults.push(\"You have reached \" + ElementMap.get(\"\" + refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y).name);\n      let resultMap = DirectionResults.map(r => {\n        return {\n          instruction: r,\n          floor: floor\n        };\n      });\n      this.pathTune = pathTuning;\n      resultMap.forEach(element => {\n        this.setState(prevState => ({\n          pathFloor: [...prevState.pathFloor, element]\n        }));\n      });\n      let step = DirectionResults[0];\n\n      if (this.state.srcfloor === this.state.dstfloor) {\n        if (this.state.zoom === false) {\n          this.setState(prevState => ({\n            pathArray: [...prevState.pathArray, DirectionResults],\n            srtdFlr: [...prevState.srtdFlr, floor],\n            instructionReady: true\n          }), () => {\n            let flrArry = [this.state.srcfloor, this.state.dstfloor];\n\n            if (this.state.pathArray.length === 2) {\n              for (let k = 0; k < flrArry.length; k++) {\n                if (this.state.srtdFlr[k] === flrArry[k]) {\n                  const merge3 = this.state.pathArray.flat(1);\n                  this.setState({\n                    pathCaption: merge3\n                  });\n                }\n              }\n            } else {\n              for (let k = 0; k < DirectionResults.length; k++) {\n                this.setState(prevState => ({\n                  pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n                }));\n              }\n            }\n          });\n        }\n      } else {\n        if (this.state.srcfloor === floor) {\n          this.setState({\n            firstFlrInstruction: DirectionResults,\n            firstFlr: floor,\n            currentFloor: floor // instructionReady:true\n\n          });\n        } else {\n          this.setState({\n            secondFlrInstruction: DirectionResults,\n            secondFlr: floor,\n            instructionReady: true\n          });\n        }\n      }\n    };\n\n    this.calculatePath = (path_angle, diff, CurrentDirection) => {\n      let pathGN, rotateDirection, path_angleN;\n\n      if (path_angle >= 0 && path_angle < 106) {\n        pathGN = 360 - (diff - path_angle);\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle > 105 && path_angle <= 180) {\n        pathGN = path_angle - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      } else if (path_angle <= -1 && path_angle >= -180) {\n        path_angleN = 180 + path_angle;\n        pathGN = path_angleN + 180 - diff;\n        rotateDirection = pathGN - CurrentDirection;\n      }\n\n      return rotateDirection;\n    };\n\n    this.drawerToggleClickHandler = () => {\n      this.setState(prevState => {\n        return {\n          sideDrawerOpen: !prevState.sideDrawerOpen\n        };\n      });\n    };\n\n    this.backdropClickHandler = () => {\n      this.setState({\n        sideDrawerOpen: false\n      });\n    };\n\n    this.incCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale < 30) {\n        this.setState({\n          scale: scale + 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.decCanvas = () => {\n      let {\n        scale\n      } = this.state;\n\n      if (scale > 2) {\n        this.setState({\n          scale: scale - 1\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.handleDstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      if (e.length > 0) {\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            resp = `${e[0].roomName}(${e[0].floor})`;\n\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].name}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\n          } else {}\n        }\n\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState({\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n        }, () => {\n          this.handleSubmit();\n        });\n      }\n    };\n\n    this.dstChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type} Washroom (${e.floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.handleSrcChange = e => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName ? navInfo[i].properties.roomName : navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data); // var srcBar = document.getElementById(\"src-bar\");\n      // var navHeight = document.getElementById(\"nav-height\");\n      // var element = document.getElementById(\"myCanvassrc\");\n      // var topPos = element.getBoundingClientRect().top;\n      // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n      // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n      // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n      // // image is smaller than the canvas so no need to resize\n      // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n      // // return;\n      // // Figure out the ratio\n      // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n      // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n      // // use whichever multiplier is smaller\n      // let ratio = ratioX < ratioY ? ratioX : ratioY;\n      // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n      // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        }); // setTimeout(() => {\n\n        this.handleSubmit(); // }, \"2000\");\n      });\n    };\n\n    this.srcChange = e => {\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e.floorElement === \"Rooms\") {\n          resp = `${e.roomName}(${e.floor})`;\n\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e.floorElement === \"FloorConnection\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.name}(${e.floor})`;\n        } else if (e.floorElement === \"Services\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n\n          resp = `${e.type}(${e.floor})`;\n        } else if (e.floorElement === \"RestRooms\") {\n          if (e.node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      }, () => {\n        this.handleSubmit();\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onDstSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        dstSuggestions: this.getDstSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onDstSuggestionsClearRequested = () => {\n      this.setState({\n        dstSuggestions: []\n      });\n    };\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getDstSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.list.filter(lang => {\n        let resp = \"\";\n\n        if (lang.floorElement === \"Rooms\") {\n          resp = `${lang.roomName}(${lang.floor})`;\n        } else if (lang.floorElement === \"FloorConnection\") {\n          resp = `${lang.name}(${lang.floor})`;\n        } else if (lang.floorElement === \"Services\") {\n          resp = `${lang.type}(${lang.floor})`;\n        } else if (lang.floorElement === \"RestRooms\") {\n          resp = `${lang.type} Washroom (${lang.floor})`;\n        } else {}\n\n        return resp.toLowerCase().slice(0, inputLength) === inputValue;\n      });\n    };\n\n    this.getSuggestionValue = suggestion => {\n      this.srcChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.getDstSuggestionValue = suggestion => {\n      this.dstChange(suggestion);\n\n      if (suggestion.floorElement === \"Rooms\") {\n        return suggestion.roomName;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        return suggestion.name;\n      } else if (suggestion.floorElement === \"Services\") {\n        return suggestion.type;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        return suggestion.type;\n      } else {}\n    };\n\n    this.renderSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2723,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.renderDstSuggestion = suggestion => {\n      let resp = \"\";\n\n      if (suggestion.floorElement === \"Rooms\") {\n        resp = `${suggestion.roomName}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"FloorConnection\") {\n        resp = `${suggestion.name}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"Services\") {\n        resp = `${suggestion.type}(${suggestion.floor})`;\n      } else if (suggestion.floorElement === \"RestRooms\") {\n        resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n      } else {}\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"white\"\n        },\n        children: resp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2738,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSrcChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        dstValue: newValue\n      });\n    };\n\n    this.nvgtSrcBld = () => {\n      let {\n        tmpSrcLocation\n      } = this.state;\n      let e = [tmpSrcLocation];\n      this.fetchSrcBldLocation(e, tmpSrcLocation.venueName, tmpSrcLocation.buildingName, \"srcBuildingLocation\", k => {\n        this.handleDstChange(k);\n      });\n    };\n\n    this.nvgtDstBld = () => {\n      let {\n        tmpDstLocation\n      } = this.state;\n      let e = [tmpDstLocation];\n      this.fetchDstBldLocation(e, tmpDstLocation.venueName, tmpDstLocation.buildingName, \"dstBuildingLocation\", k => {\n        this.handleDstChange(e);\n      });\n    };\n\n    this.fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              this.srcBldDstPointChange(e, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n      let data = {\n        venueName,\n        buildingName\n      };\n      this.props.floorList(data, () => {\n        this.props.getAllBuildingElements(data, () => {\n          let navInfo = this.props.navigationInfo;\n\n          for (let i = 0; i < navInfo.length; i++) {\n            if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n              let props = [navInfo[i].properties];\n              this.srcBldDstPointChange(props, () => {\n                let k = [navInfo[i].properties];\n                this.setNavigation(this.state.selectedSrcLocation);\n                cb(k);\n              });\n            }\n          }\n        });\n      });\n    };\n\n    this.srcBldDstPointChange = (e, cb) => {\n      let {\n        srcBuildingLocation\n      } = this.state;\n      let name = null;\n      let val = null;\n      let floor = null;\n      let resp = \"\";\n      let navInfo = this.props.navigationInfo;\n\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = e[0].floor;\n            val = navInfo[i].properties.node;\n          }\n        } else {}\n      }\n\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState({\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      }, () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(new L.LatLng(this.props.flrList.data[0].lat, this.props.flrList.data[0].lng), map.getZoom(), {\n          animate: true,\n          duration: 2\n        });\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      });\n      cb();\n    };\n\n    this.navigateNext = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[0].style.display = \"none\";\n      div[1].style.display = \"block\";\n      this.setState({\n        next: false,\n        currentFloor: this.state.dstfloor\n      });\n    };\n\n    this.navigatePrevious = () => {\n      let div = document.getElementById(\"mydiv\").children;\n      div[1].style.display = \"none\";\n      div[0].style.display = \"block\";\n      this.setState({\n        next: true,\n        currentFloor: this.state.srcfloor\n      });\n    };\n\n    this.handleBuildingView = () => {\n      this.setState({\n        showInstructions: false\n      });\n    };\n\n    this.previousButton = () => {\n      let currentStep = this.state.currentStep;\n\n      if (currentStep !== 0) {\n        // return (\n        //   <button\n        //     className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\n        //     type=\"button\"\n        //     onClick={this._prev}\n        //   >\n        //     Previous\n        //   </button>\n        // );\n        if (currentStep < this.state.pathCaption.length) {\n          this._next();\n        }\n      }\n\n      return null;\n    };\n\n    this.nextButton = () => {\n      let currentStep = this.state.currentStep;\n\n      if (currentStep < this.state.pathCaption.length) {\n        this._next();\n      }\n\n      return null;\n    };\n\n    this._next = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= this.state.pathCaption.length - 1 ? this.state.pathCaption.length : currentStep + 1;\n\n      if (this.state.pathCaption[currentStep]) {\n        let step = this.state.pathCaption[currentStep];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n      } // if (\n      //   this.state.pathFloor[currentStep] !== undefined &&\n      //   this.state.pathFloor[currentStep].floor !==\n      //     this.state.pathFloor[currentStep - 1].floor\n      // ) {\n      //   this.navigateNext();\n      // }\n\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this._prev = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n      if (this.state.pathFloor[currentStep + 1] !== undefined) {\n        if (this.state.pathFloor[currentStep + 1].floor !== this.state.pathFloor[currentStep].floor) {\n          let step = this.state.pathCaption[currentStep - 1];\n          var utter = new window.SpeechSynthesisUtterance(step);\n          window.speechSynthesis.cancel();\n          window.speechSynthesis.speak(utter); // this.navigatePrevious();\n        }\n      }\n\n      this.setState({\n        currentStep: currentStep\n      });\n    };\n\n    this.playInstruction = pause => {\n      var synth = window.speechSynthesis;\n      synth.cancel();\n\n      if (pause === true) {\n        synth.pause();\n      } else {\n        synth.resume();\n      } // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n      // synth.speak(utterance);\n      // synth.resume()\n\n\n      let instruction = this.filterInstruction();\n      instruction.forEach(r => {\n        var utterance1 = new SpeechSynthesisUtterance(r);\n        synth.speak(utterance1);\n      });\n    };\n\n    this.filterInstruction = () => {\n      var instructions = [];\n      var stepsCount = [];\n      let instruction;\n\n      if (this.state.srcfloor === this.state.dstfloor) {\n        instruction = this.state.pathCaption;\n      } else {\n        instruction = this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction;\n      }\n\n      instructions = instruction && instruction.map((r, i) => {\n        if (r.includes(\"right\") || r.includes(\"Right\")) {\n          return r;\n        } else if (r.includes(\"left\") || r.includes(\"Left\")) {\n          return r;\n        } else if (r.includes(\"forward\")) {\n          let theNum = r.match(/\\d+/)[0];\n          stepsCount.push(parseInt(theNum));\n          return r;\n        } else if (r.includes(\"Turn 1 O' Clock\") || r.includes(\"Turn 2 O' Clock\") || r.includes(\"Turn 3 O' Clock\")) {\n          return 'Turn slight right';\n        } else if (r.includes(\"Turn 4 O' Clock\") || r.includes(\"Turn 5 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 7 O' Clock\") || r.includes(\"Turn 8 O' Clock\") || r.includes(\"Turn 9 O' Clock\")) {\n          return 'turn slight left';\n        } else if (r.includes(\"Turn 10 O' Clock\") || r.includes(\"Turn 11 O' Clock\")) {\n          return 'Turn back and then turn slight left';\n        } else if (r.includes(\"Turn 6 O' Clock\")) {\n          return 'Turn back';\n        } else if (r.includes(\"You are at\")) {\n          return r;\n        } else if (r.includes(\"reached\")) {\n          return r;\n        } else if (r.includes(\"Turn 0 O' Clock\") || r.includes(\"Turn 12 O' Clock\")) {\n          return null;\n        } else {\n          return r;\n        }\n      });\n      var distance;\n\n      if (instructions) {\n        const add = arr => arr.reduce((a, b) => a + b, 0);\n\n        distance = add(stepsCount);\n        instructions = instructions.filter(el => {\n          return el != null;\n        });\n      }\n\n      instructions.splice(instructions.length - 2, 1);\n      return instructions;\n    };\n\n    this.handleSourceLocation = vals => {\n      this.setState({\n        selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n        selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n        buildingView: false\n      }, () => {\n        this.props.androidNavigation({\n          venueName: this.state.selectedVenue,\n          buildingName: this.state.selectedBuilding\n        }, () => {});\n        this.fetchLocation(this.state.selectedVenue, this.state.selectedBuilding, \"srcBuildingLocation\");\n        this.fetchLocation(this.state.selectedVenue, this.state.selectedBuilding, \"dstBuildingLocation\");\n\n        if (this.state.dstName !== \"Select Destination\") {\n          this.handleSubmit();\n        } else {\n          this.setNavigation(this.state.selectedDstLocation);\n        }\n      });\n    };\n\n    this.state = {\n      center: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      currentPos: {\n        lat: 28.6139,\n        lng: 77.209\n      },\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Select Source\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: {\n        buildingName: \"Building\",\n        venueName: \"Venue\"\n      },\n      selectedDstLocation: {\n        buildingName: \"Building\",\n        venueName: \"Venue\"\n      },\n      srcBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      dstBuildingLocation: {\n        buildingName: \"\",\n        venueName: \"\"\n      },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle: 0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom: false,\n      language: 'en',\n      visionType: 'vision',\n      height: '<5ft',\n      ageGroup: 'adult',\n      walkingType: 'walk',\n      pause: false,\n      firstFlrInstruction: [],\n      secondFlrInstruction: [],\n      firstFlr: '',\n      secondFlr: '',\n      currentFloor: '',\n      instructionReady: false,\n      selectedVenue: 'Select Venue',\n      selectedDestinationVenue: 'Select destination venue',\n      selectedBuilding: 'Select building',\n      selectedDestinationBuilding: 'Select destination building',\n      destinationActive: false,\n      open: false,\n      showMenu: false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.forwardStep = 0;\n    this.lastStep = 0;\n    this.pathTune = [];\n  }\n\n  componentDidMount() {\n    let success = {\n      coords: {\n        latitude: 28.6139,\n        longitude: 77.209\n      }\n    };\n    let coordinates = [success.coords.latitude, success.coords.longitude];\n    this.props.getGpsLocation({\n      lat: success.coords.latitude,\n      lng: success.coords.longitude\n    }, () => {\n      this.getUserDetails();\n      this.setCanvasregion(success);\n    });\n    this.getVenueList(coordinates);\n  }\n\n  findpath() {\n    var srcvert = this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert = this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n\n    if (this.graph.hasvertex(srcvert)) {} else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor == this.state.srcfloor && nodes[i].properties.floorElement === \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.srcfloor, this.state.srcVal, this.state.srcfloorL, this.state.srcfloorB, null, null, false, null);\n    }\n\n    if (this.graph.hasvertex(dstvert)) {} else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floor === this.state.dstfloor && nodes[i].properties.floorElement == \"FloorConnection\") {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n\n      this.callwhile(this.state.dstfloor, this.state.dstVal, this.state.dstfloorL, this.state.dstfloorB, null, null, false, null);\n    }\n\n    this.specialcallwhile(this.state.srcfloor, srcvert, this.state.dstfloor, dstvert);\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        break;\n      }\n\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n        var neighbour = false;\n\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      let ans = new Map();\n\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n\n          let canvas = window.d3.select(\"#mydiv\").append(\"canvas\").attr(\"id\", \"canvas\" + ii).attr(\"style\", `border:1px solid;display:${dsp};`).attr(\"width\", this.state.canvasWidth).attr(\"height\", this.state.canvasHeight).call(window.d3.zoom().scaleExtent([1, 8]).on(\"zoom\", multiCanvasZoom));\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n\n          img1.onload = function () {\n            multiCanvas();\n            zoomTo();\n          };\n\n          function multiCanvasZoom() {\n            me.setState({\n              zoom: true // pathCaption: []\n\n            }, () => {\n              var transform = window.d3.event.transform;\n              ctx.save();\n              ctx.clearRect(0, 0, width, height);\n              ctx.translate(transform.x, transform.y);\n              ctx.scale(transform.k, transform.k);\n              loaded = false;\n              multiCanvas();\n              ctx.restore();\n            });\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n\n              ctx.globalAlpha = 0.5;\n              ctx.drawImage(img1, 0, 0, img1.width, img1.height, 0, 0, newWidth, newHeight);\n              var id = \"canvas\" + ii; // me.loadMultiFloorNonwalkable(id)\n\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n\n              var node_count = 0;\n\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n\n                node_count++;\n              }\n\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy)); //Zoomed\n\n            let distX = width / 2 - me.croppedRegion.minX[0] * gpx - X / 2 * gpx;\n            let distY = height / 2 - me.croppedRegion.minY[1] * gpy - Y / 2 * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\n            canvas.transition().duration(750).call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n\n    for (let i = 0; i < m; i++) {\n      var row = [],\n          row1 = [],\n          row3 = [],\n          row4 = [];\n\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n\n      this.visited[minleave[0]][minleave[1]] = 1;\n\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (this.visited[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])] == 1) {} else {\n            check = false;\n          }\n        }\n\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(vert, this.flrconn[ch][2], this.minimumcost[parseInt(this.flrconn[ch][0])][parseInt(this.flrconn[ch][1])], true);\n          }\n\n          this.reset_var();\n          break;\n        }\n      }\n\n      this.leaves.splice(var_i, 1);\n\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (this.minimumcost[j][k] > this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k))) {\n                this.minimumcost[j][k] = this.minimumcost[minleave[0]][minleave[1]] + Math.sqrt((minleave[0] - j) * (minleave[0] - j) + (minleave[1] - k) * (minleave[1] - k));\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][minleave[1]].concat([[j, k]]);\n                notthere = 1;\n\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (single == true) {\n      let {\n        scale\n      } = this.state;\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx, gpy;\n\n      if (canvasid === \"canvas0\") {\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n      } else {\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n\n      let sp = this.shortestpath[dest_x][dest_y];\n      let mypoints = sp.map(r => {\n        return {\n          x: r[0],\n          y: r[1]\n        };\n      });\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      }\n\n      if (canvasid === \"canvas0\" || \"myCanvassrc\") {\n        this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n      } else {\n        this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n      }\n\n      var rowX = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          x: row[0],\n          index: i\n        };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function (row, i) {\n        return {\n          y: row[1],\n          index: i\n        };\n      });\n      let minRowX = rowX.reduce((prev, current) => prev.x < current.x ? prev : current);\n      let maxRowX = rowX.reduce((prev, current) => prev.x > current.x ? prev : current);\n      let minRowY = rowY.reduce((prev, current) => prev.y < current.y ? prev : current);\n      let maxRowY = rowY.reduce((prev, current) => prev.y > current.y ? prev : current);\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      }; // let conjugateDidd = this.pathTune.map((p,q,r)=>{\n      //     console.log(\"p q r\",p,q,r)\n      // })\n\n      let arr = this.pathTune;\n      if (arr.length == 0) return undefined;\n      var a = this.pathTune;\n      var resultX = a.map((n, i, a) => i ? n.points.x - a[i - 1].points.x : 0 - n.points.x);\n      var resultY = a.map((n, i, a) => i ? n.points.y - a[i - 1].points.y : 0 - n.points.y);\n      var minX = Math.min.apply(null, resultX),\n          minY = Math.min.apply(null, resultY);\n      let totalMin = Math.min(minX, minY);\n\n      if (totalMin < 5) {\n        for (let t = 0; t < resultX.length; t++) {\n          if (totalMin === resultX[t] && this.pathTune[t - 1]) {\n            this.pathTune[t].points.x = this.pathTune[t - 1].points.x;\n          } else if (totalMin === resultY[t] && this.pathTune[t - 1]) {\n            console.log(\"total min\", this.pathTune[t], this.pathTune[t - 1]);\n            this.pathTune[t].points.y = this.pathTune[t - 1].points.y;\n          }\n        }\n      } // return min\n      // let resY =  arr.reduce(function(r, e, i) {\n      //   let absR = Math.abs(r.points.x), absE = Math.abs(e.points.x);\n      //   if (absR > absE || i === 0 || (absR === absE && e.points.x > r)) r.points.x = e.points.x\n      //   return r.points.x\n      // })\n      // console.log(\"abs\",resX)\n      // console.log(\"max diff\",maxDiff)\n      // return maxDiff;\n\n\n      context.beginPath();\n      context.moveTo(gpx * this.pathTune[0].points.x, gpy * this.pathTune[0].points.y);\n\n      for (let k = 0; k < this.pathTune.length; k++) {\n        context.lineTo(gpx * this.pathTune[k].points.x, gpy * this.pathTune[k].points.y);\n      }\n\n      context.lineTo(gpx * this.pathTune[this.pathTune.length - 1].points.x, gpy * this.pathTune[this.pathTune.length - 1].points.y);\n      context.stroke(); // var max = Math.max.apply(null, maxRow);\n\n      console.log(\"pathtine\", this.pathTune); // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n      // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      this.reset_var();\n    }\n  }\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({\n      x: parseInt(p1.x),\n      y: parseInt(p1.y)\n    });\n    let counter = seperationGap;\n\n    while (counter < d) {\n      let x = p1.x + counter / d * (p2.x - p1.x);\n      let y = p1.y + counter / d * (p2.y - p1.y);\n      result.push({\n        x: parseInt(x),\n        y: parseInt(y)\n      });\n      counter += 1 * seperationGap;\n    }\n\n    return result;\n  }\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n  /* NAVIGATION DRAWER */\n\n\n  render() {\n    var combineInstructions = [];\n\n    if (this.state.srcfloor === this.state.dstfloor) {\n      combineInstructions = this.state.pathCaption;\n    } else {\n      if (this.state.firstFlr === this.state.currentFloor) {\n        combineInstructions = this.state.firstFlrInstruction;\n      } else {\n        combineInstructions = this.state.secondFlrInstruction;\n      } // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n\n    }\n\n    let {\n      center,\n      currentPos\n    } = this.state;\n    let {\n      srcBuildingLocation,\n      dstBuildingLocation\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: !this.state.showInstructions,\n        children: /*#__PURE__*/_jsxDEV(Instructions, {\n          dstAddress: this.state.dstAddress,\n          globalTime: this.state.globalTime,\n          globalDistance: this.state.globalDistance,\n          currentLocation: this.state.currentLocation,\n          handleBuildingView: this.handleBuildingView,\n          instructionSet: combineInstructions,\n          buildingView: this.state.buildingView,\n          sourceLocation: this.state.currentLocation,\n          dstLocation: this.state.dstAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: this.state.showInstructions,\n        children: [!this.state.buildingView ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"source-destination fixed-top\",\n            id: \"src-bar\",\n            style: {\n              marginTop: \"50px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100  mx-auto\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 p-0\",\n                children: /*#__PURE__*/_jsxDEV(SourceMenu, {\n                  srcName: this.state.srcName,\n                  currentLocation: this.state.currentLocation,\n                  selectedSrcLocation: this.state.selectedSrcLocation,\n                  locationList: this.state.locationList,\n                  srcReadOnly: this.state.srcReadOnly,\n                  handleBlurr: () => {\n                    this.setState({\n                      srcReadOnly: !this.state.srcReadOnly\n                    });\n                  },\n                  srcFloorList: this.state.srcFloorList,\n                  dstAddress: this.state.dstAddress,\n                  showStrtMenu: () => {\n                    this.setState({\n                      showStrtMenu: false\n                    });\n                  },\n                  destinationActive: this.state.destinationActive,\n                  venueChange: val => {\n                    this.setState({\n                      selectedVenue: val,\n                      destinationActive: false,\n                      showMenu: true\n                    }, () => {\n                      this.getBuildingList(val);\n                    });\n                  },\n                  selectedVenue: this.state.selectedVenue,\n                  buildingList: this.state.buildingList,\n                  showMenu: this.state.showMenu,\n                  selectedBuilding: this.state.selectedBuilding,\n                  buildingChange: vals => {\n                    this.setState({\n                      selectedBuilding: vals\n                    }, () => {\n                      this.handleSourceLocation();\n                    });\n                  },\n                  venueList: this.state.venueList,\n                  handleSelectSource: e => {\n                    if (e.length > 0) {\n                      this.setState({\n                        tmpSrcLocation: e[0]\n                      }, () => {\n                        this.handleSrcChange(e);\n                      });\n                    }\n                  },\n                  handleSourceLocation: e => {\n                    if (e.length > 0) {\n                      this.setState({\n                        selectedSrcLocation: e[0],\n                        selectedDstLocation: e[0],\n                        buildingView: false\n                      }, () => {\n                        this.props.androidNavigation({\n                          venueName: e[0].venueName,\n                          buildingName: e[0].buildingName\n                        }, () => {});\n                        this.fetchLocation(e[0].venueName, e[0].buildingName, \"srcBuildingLocation\");\n                        this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\");\n\n                        if (this.state.dstName !== \"Select Destination\") {\n                          this.handleSubmit();\n                        } else {\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      });\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3182,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3162,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mx-auto hr-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3265,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row w-100  mx-auto\",\n              style: {\n                marginTop: \"50px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-2\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"float-left mt-2 mr-2\",\n                  src: \"/inclunav/assets/images/navigation.svg\",\n                  alt: \"select destination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3268,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3267,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-10 p-0\",\n                children: /*#__PURE__*/_jsxDEV(DestinationMenu, {\n                  dstName: this.state.dstName,\n                  currentLocation: this.state.currentLocation,\n                  selectedDstLocation: this.state.selectedDstLocation,\n                  selectedDestination: this.state.selectedDestination,\n                  locationList: this.state.locationList,\n                  dstReadOnly: this.state.dstReadOnly,\n                  handleBlurr: () => {\n                    this.setState({\n                      dstReadOnly: !this.state.dstReadOnly\n                    });\n                  },\n                  dstFloorList: this.state.dstFloorList,\n                  showDstMenu: () => {\n                    this.setState({\n                      showDstMenu: false\n                    });\n                  },\n                  destinationActive: this.state.destinationActive,\n                  venueChange: val => {\n                    this.setState({\n                      selectedDestinationVenue: val,\n                      destinationActive: true,\n                      showMenu: true\n                    }, () => {\n                      this.getBuildingList(val);\n                    });\n                  },\n                  selectedVenue: this.state.selectedDestinationVenue,\n                  buildingList: this.state.buildingList,\n                  selectedBuilding: this.state.selectedDestinationBuilding,\n                  buildingChange: vals => {\n                    this.setState({\n                      selectedDestinationBuilding: vals\n                    }, () => {\n                      this.handleSourceLocation();\n                    });\n                  },\n                  venueList: this.state.venueList,\n                  handleSelectDestination: e => {\n                    let resp = \"\";\n\n                    if (e[0].floorElement === \"Rooms\") {\n                      resp = `${e[0].roomName}(${e[0].floor})`;\n                    } else if (e[0].floorElement === \"FloorConnection\") {\n                      resp = `${e[0].name}(${e[0].floor})`;\n                    } else if (e[0].floorElement === \"Services\") {\n                      resp = `${e[0].type}(${e[0].floor})`;\n                    } else if (e[0].floorElement === \"RestRooms\") {\n                      resp = `${e[0].type} Washroom (${e[0].floor})`;\n                    } else {\n                      resp = \"\";\n                    }\n\n                    this.setState({\n                      tmpDstLocation: e[0],\n                      dstName: e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true,\n                      destinationActive: false,\n                      showMenu: false\n                    }, () => {\n                      if (srcBuildingLocation.venueName === dstBuildingLocation.venueName && srcBuildingLocation.buildingName === dstBuildingLocation.buildingName) {\n                        this.handleDstChange(e);\n                      }\n                    });\n                  },\n                  handleSourceLocation: e => {\n                    if (e.length > 0) {\n                      let venueName = e[0].venueName;\n                      let buildingName = e[0].buildingName;\n                      let venue = this.state.srcBuildingLocation.venueName;\n                      let building = this.state.srcBuildingLocation.buildingName;\n\n                      if (!venue && !building) {\n                        let data = {\n                          venueName,\n                          buildingName\n                        };\n                        let props;\n                        this.props.androidNavigation({\n                          venueName: e[0].venueName,\n                          buildingName: e[0].buildingName\n                        }, () => {});\n                        this.setNavigation(data);\n                        this.props.floorList(data, () => {\n                          this.props.getAllBuildingElements(data, () => {\n                            let navInfo = this.props.navigationInfo;\n\n                            for (let i = 0; i < navInfo.length; i++) {\n                              if (navInfo[i].properties.floorElement === \"Rooms\" && navInfo[i].properties.doorGroup === \"Entrance | Exit\") {\n                                props = navInfo[i].properties;\n                                var ind = this.findFloor(\"ground\", this.props.flrList.data);\n                                this.setState({\n                                  srcName: props.roomName,\n                                  srcfloor: \"ground\",\n                                  srcVal: parseInt(props.node),\n                                  srcfloorL: this.props.flrList.data[ind].floorL,\n                                  srcfloorB: this.props.flrList.data[ind].floorB,\n                                  imgName: this.props.flrList.data[ind].fileName,\n                                  pathCaption: []\n                                }, () => {\n                                  this.handleSubmit();\n                                });\n                              }\n                            }\n                          });\n                        });\n                      }\n\n                      this.setState({\n                        selectedDstLocation: e[0],\n                        buildingView: false\n                      }, () => {\n                        this.fetchLocation(e[0].venueName, e[0].buildingName, \"dstBuildingLocation\"); // if (\n                        //   this.state.selectedSrcLocation.venueName ===\n                        //     this.state.selectedDstLocation.venueName &&\n                        //   this.state.selectedSrcLocation.buildingName ===\n                        //     this.state.selectedDstLocation.buildingName\n                        // ) {\n                        //   this.setNavigation(this.state.selectedDstLocation);\n                        // }\n\n                        if (this.state.selectedVenue === this.state.selectedDestinationVenue && this.state.selectedBuilding === this.state.selectedDestinationBuilding) {\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      });\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3294,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3275,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 3266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3155,\n          columnNumber: 13\n        }, this) : null, this.state.buildingView ? /*#__PURE__*/_jsxDEV(InstructionTab, {\n          pathCaption: combineInstructions,\n          currentStep: this.state.currentStep,\n          nextButton: () => this.nextButton(),\n          imgDiv: this.imgDiv\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3461,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          hidden: this.state.buildingView,\n          children: /*#__PURE__*/_jsxDEV(MapContainer, {\n            style: {\n              height: \"100vh\"\n            },\n            center: center,\n            zoom: this.state.zoomLevel,\n            ref: m => {\n              this.leafletMap = m;\n            },\n            onClick: this.handleClick,\n            children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: this.state.currentPos,\n              draggable: true,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                position: this.state.currentPos,\n                children: [\"Current location:\", /*#__PURE__*/_jsxDEV(\"pre\", {\n                  children: JSON.stringify(this.state.currentPos, null, 2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 3484,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 3482,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3481,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3469,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          hidden: !this.state.buildingView,\n          className: \"mt-1\",\n          style: {\n            height: \"100%\",\n            width: \"100%\",\n            overflow: \"scroll\"\n          },\n          children: [!this.state.samefloor ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group-vertical btn-info rounded  shadow mt-5\",\n            role: \"group\",\n            \"aria-label\": \"First group\",\n            style: {\n              position: \"fixed\",\n              zIndex: \"5\",\n              background: \"#56c9ad\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark text-white text-capitalize\",\n              onClick: this.navigatePrevious,\n              children: this.props.flrList.data.map((r, i) => {\n                if (this.state.srcfloor === r.floor) {\n                  return `L${i}`;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3501,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-dark text-white\",\n              onClick: this.navigateNext,\n              children: this.props.flrList.data.map((r, i) => {\n                if (this.state.dstfloor === r.floor) {\n                  return `L${i}`;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3512,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3495,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: \"100%\",\n              top: \"50px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"myImage\",\n              src: `${config.imgUrl}/${this.state.imgName}`,\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3526,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"srcImage\",\n              src: \"/inclunav/assets/images/source.svg\",\n              style: {\n                WebkitTransform: `rotate(20deg)`\n              },\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3532,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"dstImage\",\n              src: \"/inclunav/assets/images/destination.svg\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3539,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"stairs\",\n              src: \"/inclunav/assets/images/stair.png\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3545,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"map\",\n              id: \"lift\",\n              src: \"/inclunav/assets/images/lift.png\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3551,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"mydiv1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3557,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"canvaDiv\",\n              ref: \"canv\",\n              onScroll: this.handleScroll,\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                id: \"myCanvassrc\",\n                width: this.state.canvasWidth,\n                height: this.state.canvasHeight,\n                style: {\n                  position: \"absolute\"\n                },\n                hidden: !this.state.samefloor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3559,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3558,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"mydiv\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3567,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3525,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3489,\n          columnNumber: 11\n        }, this), !this.state.instructionReady ? /*#__PURE__*/_jsxDEV(GlobalDetails, {\n          toggle: this.state.toggle,\n          dstName: this.state.dstName,\n          dstAddress: this.state.dstAddress,\n          globalDistance: this.state.globalDistance,\n          currentLocation: this.state.currentLocation,\n          dstBuildingLocation: this.state.dstBuildingLocation,\n          tmpDstLocation: this.state.tmpDstLocation,\n          destinationVenue: this.state.selectedDestinationVenue,\n          destinationBuilding: this.state.selectedDestinationBuilding,\n          dstfloor: this.state.dstfloor,\n          dstVal: this.state.dstVal,\n          stateToggle: () => {\n            this.setState({\n              toggle: !this.state.toggle\n            });\n          },\n          openModal: this.onOpenModal,\n          closeBuilding: () => {\n            this.setState({\n              buildingView: false\n            });\n          } // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n          ,\n          instructionSet: combineInstructions,\n          handleShowInstructions: () => {\n            this.setState({\n              showInstructions: true\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3571,\n          columnNumber: 13\n        }, this) // null\n        :\n        /*#__PURE__*/\n        _jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(NavigationDetails, {\n            toggle: this.state.toggle,\n            dstName: this.state.dstName,\n            dstAddress: this.state.dstAddress,\n            globalDistance: this.state.globalDistance,\n            currentLocation: this.state.currentLocation,\n            dstBuildingLocation: this.state.dstBuildingLocation,\n            stateToggle: () => {\n              this.setState({\n                toggle: !this.state.toggle\n              });\n            },\n            currentStep: this.state.currentStep,\n            nextButton: this.nextButton,\n            previousButton: this.previousButton,\n            instructionSet: this.state.currentFloor === this.state.firstFlr ? this.state.firstFlrInstruction : this.state.secondFlrInstruction,\n            playInstruction: pause => {\n              this.playInstruction(pause);\n            },\n            closeBuilding: () => {\n              this.setState({\n                buildingView: false,\n                instructionReady: false,\n                zoom: false\n              });\n            },\n            handleShowInstructions: () => {\n              this.setState({\n                showInstructions: true\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3607,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3606,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3135,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile: state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n})(Navigation);","map":{"version":3,"sources":["/home/jahnavi/navigation/src/components/dashboard/navigation/InclusiveNavigation.js"],"names":["React","Map","MapContainer","Marker","Popup","TileLayer","L","config","connect","floorList","imgDetails","getAllBuildingElements","venueList","buildingList","getGpsLocation","androidNavigation","getUserPortfolio","Typeahead","Instructions","NavigationDetails","GlobalDetails","InstructionTab","SourceMenu","DestinationMenu","Menu","center","lat","lng","Graph","constructor","noOfVertices","AdjList","Adjweights","addVertex","v","set","hasvertex","has","edges","get","addEdge","w","wt","undir","push","printGraph","get_keys","keys","i","get_values","val","conc","conc2","j","Navigation","Component","props","getUserDetails","id","localStorage","getItem","token","userProfile","success","clear","history","data","properties","setState","language","visionType","height","ageGroup","walkingType","navigationMode","setCanvasregion","cvWidth","Math","max","document","getElementById","clientWidth","window","innerWidth","cvHeight","clientHeight","innerHeight","srcBar","navHeight","realHeight","currentLocation","selectedVenue","canvasWidth","canvasHeight","coords","latitude","longitude","currentPos","mapAnimation","map","leafletMap","leafletElement","flyTo","LatLng","getZoom","animate","duration","getVenueList","coordinates","vnList","findNearVenue","fetchLocation","venueName","buildingName","point","flrListData","flrList","prevData","state","floorAngle","parseInt","buildingOrientation","dataFilter","nodes","navigationInfo","lists","length","sel","uniqueLists","Array","from","Set","o","floorElement","find","a","freeBeacon","r","type","freeData","filter","el","sort","b","roomName","undefined","name","distList","getDistance","arr","list","dt","k","venueDistance","distance","lowest","Number","POSITIVE_INFINITY","highest","NEGATIVE_INFINITY","tmp","nearLocation","listArr","locationList","d","sortedArr","quickSort","currentVenue","getBuildingList","address","dateCreated","liveStatus","organization","selectedLocation","currentBuilding","pivot","lesserVal","greaterVal","bldList","findNearBuilding","p","setNavigation","rad","x","PI","p1","p2","R","dLat","dLong","sin","cos","c","atan2","sqrt","selectedBuilding","grids_all","num_vert","fc","floor","node","graph","frConn","split","flrmatrix","flr_dist_matrix","len","vert1","vert2","getKeys","cnt","prev","toggle","value","event","findFloor","key","array","geomtery","color_canvas_spl","canvasid","color","srcfloorL","scale","srcDiv","canvas","context","getContext","wrh","dstfloorL","dstfloorB","newWidth","newHeight","gpx","gpy","srcfloorB","pos_x","pos_y","fillStyle","drawImage","lift","stairs","rot","y","step","frConnType","half_scale","dstDiv","color_canvas","place","posX","posY","halfScale","globalAlpha","fillRect","find_fl","handleSubmit","srcVal","srcfloor","dstfloor","dstVal","divimg","divcan","childNodes","elem","remove","ratio","height_of_canvas","factor","ceil","samefloor","img1","Image","img","src","hidden","me","dest_x","dest_y","imgDiv","angle","pointerangle","d3","select","call","zoom","scaleExtent","on","width","property","active","zoom1","initialTransform","zoomIdentity","translate","animation","pathFloor","pathArray","currentStep","transform","save","clearRect","draw","restore","reset","classed","rotate","callwhile","transition","timer","ms","Promise","res","setTimeout","zoomTo","X","croppedRegion","maxX","minX","Y","maxY","minY","min","distX","distY","onload","buildingView","findpath","loadNonwalkable","navInfo","androidNav","floorData","polygons","clickedPoints","start","oldpath","loadMultiFloorNonwalkable","oldpathMulti","e","f","g","canvas1","context1","interpolatePath","turningPointsPath","seperationGap","resultpath","points","interpolatePoints","simplifyPath","tolerance","Vector","Line","distanceToPoint","m","abs","pow","douglasPeucker","returnPoints","line","maxDistance","maxDistanceIndex","concat","slice","find_angle","p0","p0c","cp1","findDirectionword","round","findWord","findErrorInAngle","findDirectionAbbreviation","findInstructions","nonRefinedPoints","refinedPoints","mapElements","nRefined","nNonRefined","ElementMap","includedSet","word","currentNRPoint","currentRPoint","flagList","radius","pathTuning","Object","join","replace","DirectionResults","ElaboratedResults","add","error","path_angle","floorangle","diff","CurrentDirection","actualAngle","pathAngle","gn","calculatePath","hypo","base","forwardStep","lastStep","steps","begin","end","currpoint","tempAngle","washroomType","resultMap","instruction","pathTune","forEach","element","prevState","srtdFlr","instructionReady","flrArry","merge3","flat","pathCaption","firstFlrInstruction","firstFlr","currentFloor","secondFlrInstruction","secondFlr","pathGN","rotateDirection","path_angleN","drawerToggleClickHandler","sideDrawerOpen","backdropClickHandler","incCanvas","decCanvas","handleDstChange","resp","ind","dstName","floorL","floorB","imgName","fileName","showDstMenu","dstReadOnly","dstBuildingLocation","selectedDestinationVenue","selectedDestinationBuilding","dstChange","handleSrcChange","srcBuildingLocation","srcName","showStrtMenu","srcReadOnly","zoomLevel","srcChange","onSuggestionsFetchRequested","suggestions","getSuggestions","onDstSuggestionsFetchRequested","dstSuggestions","getDstSuggestions","onSuggestionsClearRequested","onDstSuggestionsClearRequested","inputValue","trim","toLowerCase","inputLength","lang","getSuggestionValue","suggestion","getDstSuggestionValue","renderSuggestion","renderDstSuggestion","onChange","newValue","onSrcChange","dstValue","nvgtSrcBld","tmpSrcLocation","fetchSrcBldLocation","nvgtDstBld","tmpDstLocation","fetchDstBldLocation","cb","doorGroup","srcBldDstPointChange","selectedSrcLocation","navigateNext","div","children","style","display","next","navigatePrevious","handleBuildingView","showInstructions","previousButton","_next","nextButton","utter","SpeechSynthesisUtterance","speechSynthesis","cancel","speak","_prev","playInstruction","pause","synth","resume","filterInstruction","utterance1","instructions","stepsCount","includes","theNum","match","reduce","splice","handleSourceLocation","vals","selectedDstLocation","gpsLocation","buildingAddress","canvaslist","isLoading","sidebarLeft","srcFloorList","dstFloorList","selectedDestination","dstAddress","showDirections","srtdInstruction","osmRoutes","globalDistance","globalTime","destinationActive","open","showMenu","shortestPathVar","grids","visited","shortestpath","minimumcost","leaves","flrconn","num_floors","animateRef","show","componentDidMount","srcvert","dstvert","coord","vert","specialcallwhile","MAX_VALUE","minleave","var_i","notthere","get_dist","jj","l","neighbour","dum","createcanvas","ans","clist","floorLlist","ind1","breadth","callimage","callmark","get_val","count","ii","fList","dsp","append","attr","multiCanvasZoom","ctx","imgUrl","appendChild","loaded","multiCanvas","index","n","node_count","single","row","row1","row3","row4","row5","grid_1","src_x","src_y","check","ch","reset_var","sp","mypoints","refinedpaths","allElements","allNodes","rowX","rowY","minRowX","current","maxRowX","minRowY","maxRowY","resultX","resultY","apply","totalMin","t","console","log","beginPath","moveTo","lineTo","stroke","result","counter","render","combineInstructions","marginTop","venue","building","handleClick","JSON","stringify","overflow","position","zIndex","background","top","WebkitTransform","handleScroll","onOpenModal","mapStateToProps","getImage","getAllElem","userPortfolio"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Map as MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n} from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n// import \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\n\nconst center = { lat: 28.6139, lng: 77.209 };\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n}\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: { lat: 28.6139, lng: 77.209 },\n      currentPos: { lat: 28.6139, lng: 77.209 },\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Select Source\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n      selectedDstLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n      srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle:0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom:false,\n      language:'en',\n      visionType:'vision',\n      height:'<5ft',\n      ageGroup:'adult',\n      walkingType:'walk',\n      pause:false,\n      firstFlrInstruction:[],\n      secondFlrInstruction:[],\n      firstFlr:'',\n      secondFlr:'',\n      currentFloor:'',\n      instructionReady:false,\n      selectedVenue:'Select Venue',\n      selectedDestinationVenue:'Select destination venue',\n      selectedBuilding:'Select building',\n      selectedDestinationBuilding:'Select destination building',\n      destinationActive:false,\n      open:false,\n      showMenu:false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.forwardStep = 0;\n    this.lastStep = 0;\n    this.pathTune = [];\n  }\n\n  componentDidMount() {\n      let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n        let coordinates = [success.coords.latitude, success.coords.longitude];\n        this.props.getGpsLocation(\n          { lat: success.coords.latitude, lng: success.coords.longitude },\n          () => {\n            this.getUserDetails()\n            this.setCanvasregion(success)\n          }\n        );\n        this.getVenueList(coordinates);\n  }\n\n  getUserDetails = ()=>{\n    let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({id,token},()=>{\n        if(this.props.userProfile.success === false){\n          localStorage.clear();\n          this.props.history.push('/')\n        }else{\n          let data = this.props.userProfile.properties\n          this.setState({\n            language:data.language,\n            visionType:data.visionType,\n            height:data.height,\n            ageGroup:data.ageGroup,\n            walkingType:data.navigationMode\n          })          \n        }\n      })\n  }\n\n  setCanvasregion = (success)=>{\n    var cvWidth = Math.max(\n      document.getElementById(\"myCanvassrc\").clientWidth,\n      window.innerWidth || 0\n    );\n    var cvHeight = Math.max(\n      document.getElementById(\"myCanvassrc\").clientHeight,\n      window.innerHeight || 0\n    );\n    var srcBar = document.getElementById(\"src-bar\");\n    var navHeight = document.getElementById(\"nav-height\");\n    let realHeight = cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    this.setState(\n      {\n        currentLocation: \"IIT Delhi\",\n        selectedVenue:\"IIT Delhi\",\n        canvasWidth: cvWidth,\n        canvasHeight: realHeight,\n        center: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        },\n        currentPos: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        }\n      },\n      () => {\n        this.mapAnimation(success)\n      }\n    );\n  }\n\n  mapAnimation = (success)=>{\n   const map = this.leafletMap.leafletElement;\n   map.flyTo(\n     new L.LatLng(\n       success.coords.latitude,\n       success.coords.longitude\n     ),\n     map.getZoom(),\n     {\n       animate: true,\n       duration: 0.5\n     }\n   );\n  }\n\n  getVenueList = (coordinates = null) => {\n    this.props.venueList(() => {\n      this.setState(\n        {\n          venueList: this.props.vnList.data\n        },\n        () => {\n          this.findNearVenue(coordinates);\n        }\n      );\n    });\n  };\n\n  fetchLocation = (venueName, buildingName, point) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      let flrListData = this.props.flrList.data;\n      let prevData = this.state.center;\n      this.setState(\n        {\n          center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle:parseInt(flrListData[0].buildingOrientation)\n          }\n        },\n        () => {\n          this.getAllBuildingElements(data,flrListData,point,prevData)\n        }\n      );\n    });\n  };\n\n  getAllBuildingElements = (data,flrListData,point,prevData)=>{\n    this.props.getAllBuildingElements(data, () => {\n      const map = this.leafletMap.leafletElement;\n      map.flyTo(\n        new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n        map.getZoom(),\n        {\n          animate: true,\n          duration: 0.5\n        }\n      );\n      this.dataFilter(data,flrListData,point,prevData,map);\n    });\n  }\n\n  dataFilter = (flrListData,point,prevData,map)=>{\n    let nodes = this.props.navigationInfo;\n    let lists = [];\n    for (let i = 0; i < nodes.length; i++) {\n      var sel = nodes[i].properties;\n      lists.push(sel);\n    }\n    const uniqueLists = Array.from(\n      new Set(\n        lists.map(o => {\n          if (o.floorElement === \"Rooms\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"FloorConnection\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"Services\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"RestRooms\") {\n            return o.coordinates;\n          } else {\n            // return o.coordinates\n          }\n        })\n      )\n    ).map(id => {\n      return lists.find(a => a.coordinates === id);\n    });\n    let freeBeacon = uniqueLists.map(r=>{\n      if(r.floorElement === \"Services\"){\n        if(r.type === \"Beacons\" ){\n          return null\n        }else{\n          return r\n        }\n      }else{\n        return r\n      } \n    })\n\n    let freeData = freeBeacon.filter( (el)=> {\n      return el != null;\n    });\n    freeData.sort((a, b)=> {\n      if(a.floorElement === \"Rooms\"){\n        if(a.roomName !== undefined){\n          return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n        }else{\n          return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n        }\n      }else{\n        return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n      }\n    });\n    // if (point === \"srcBuildingLocation\") {\n    //   this.setState({\n    //     srcFloorList: freeData\n    //   });\n    // } else if (point === \"dstBuildingLocation\") {\n    //   let me = this;\n    //   let srcLat = this.state.srcBuildingLocation.lat;\n    //   let srcLng = this.state.srcBuildingLocation.lng;\n    //   if (!srcLat && !srcLng){\n    //     srcLat = prevData.lat;\n    //     srcLng = prevData.lng;\n    //   }\n    //   map.fitBounds(\n    //     L.latLngBounds(\n    //       L.latLng(srcLat, srcLng),\n    //       L.latLng(flrListData[0].lat, flrListData[0].lng)\n    //     )\n    //   );\n    //   this.setState({\n    //     dstFloorList: freeData,\n    //     zoomLevel: \"10\"\n    //   });\n    // }\n  }\n\n  findNearVenue = coordinates => {\n    let { venueList } = this.state;\n    let distList = venueList.map(r => {\n      return this.getDistance(coordinates, r);\n    });\n    let arr = [];\n    let list = this.state.venueList.map((r, i) => {\n      if (r.buildingList) {\n        let dt = r.buildingList.map(k => {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          };\n        });\n        return dt;\n      } else {\n        arr.push({\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        });\n        return {\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        };\n      }\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    let listArr = this.state.locationList.map(r => {\n      let k = distList.map(d => {\n        if (d.venueName === r.venueName) {\n          return { r, distance: d.distance };\n        }\n      });\n    });\n    let sortedArr = this.quickSort(arr);\n    if (lowest < 1) {\n      this.setState(\n        {\n          currentVenue: nearLocation,\n          locationList: arr\n        },\n        () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        }\n      );\n    } else {\n      this.setState({\n        currentVenue: {\n          address: \"\",\n          coordinates: [],\n          dateCreated: \"\",\n          distance: 2,\n          id: 35,\n          liveStatus: true,\n          organization: \"\",\n          venueName: \"\"\n        },\n        selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n        locationList: arr,\n        currentBuilding: {\n          address: \"\",\n          buildingName: \"\",\n          coordinates: [],\n          distance: 2,\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n  };\n\n  quickSort = arr => {\n    if (arr.length < 2) {\n      return arr;\n    }\n    let pivot = arr[0];\n    let lesserVal = [];\n    let greaterVal = [];\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k].venueDistance < pivot.venueDistance) {\n        lesserVal.push(arr[k]);\n      } else {\n        greaterVal.push(arr[k]);\n      }\n    }\n  };\n\n  getBuildingList = (venueName, coordinates = null) => {\n    this.props.buildingList({ venueName: venueName }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data\n        },\n        () => {\n          if (this.state.buildingList.length > 0) {\n            if(coordinates !== null){\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: { venueName: venueName, buildingName: \"\" }\n            });\n          }\n        }\n      );\n    });\n  };\n\n  findNearBuilding = coordinates => {\n    let { buildingList } = this.state;\n    let distList = buildingList.map(r => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      return this.getDistance(coordinates, r);\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    if (lowest < 50) {\n      this.setState(\n        {\n          currentBuilding: nearLocation,\n          selectedLocation: {\n            venueName: this.state.currentVenue.venueName,\n            buildingName: nearLocation.buildingName\n          }\n        },\n        () => {\n          this.setNavigation(this.state.selectedLocation);\n          this.fetchLocation(\n            this.state.selectedLocation.venueName,\n            this.state.selectedLocation.buildingName\n          );\n        }\n      );\n    }\n  };\n\n  rad = function(x) {\n    return (x * Math.PI) / 180;\n  };\n\n  getDistance = function(p1, p2) {\n    var R = 6378137; // Earth’s mean radius in meter\n    var dLat = this.rad(p2.coordinates[0] - p1[0]);\n    var dLong = this.rad(p2.coordinates[1] - p1[1]);\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.rad(p1[0])) *\n        Math.cos(this.rad(p2.coordinates[0])) *\n        Math.sin(dLong / 2) *\n        Math.sin(dLong / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = (R * c) / 1000;\n    p2.distance = d;\n    return p2; // returns the distance in km\n  };\n\n  setNavigation = data => {\n    this.props.getAllBuildingElements({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding} , () => {\n      let nodes = this.props.navigationInfo;\n    this.grids_all = [];\n      let lists = [];\n      let num_vert = 0;\n      let fc = new Map();\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          num_vert++;\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          if (fc.has(v) === false) {\n            fc.set(v, [val]);\n          } else {\n            fc.get(v).push(val);\n          }\n        }\n      }\n      this.graph = new Graph(num_vert + 2);\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.graph.addVertex(val);\n        }\n\n        if (nodes[i].properties.floorElement === \"Floor\") {\n          if (nodes[i].properties.length == 8) {\n            var v = nodes[i].properties.frConn[0].split(\",\");\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n            var len = v.length / 2;\n            if (v.length % 2 === 0) {\n              for (var j = 0; j < v.length; j = j + 2) {\n                var val =\n                  parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                  parseInt(v[j]);\n                var vert1 = nodes[i].properties.floor + \",\" + val;\n                for (var k = j + 2; k < v.length; k = k + 2) {\n                  val =\n                    parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                    parseInt(v[k]);\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\n                  this.graph.addEdge(\n                    vert1,\n                    vert2,\n                    flrmatrix[len * (j / 2) + k / 2],\n                    true\n                  );\n                }\n              }\n            } else {\n            }\n          }\n          this.grids_all.push(nodes[i]);\n        }\n      }\n\n      let getKeys = fc.keys();\n\n      for (let i of getKeys) {\n        var get_values = fc.get(i);\n        var cnt = 0;\n        var prev = null;\n        for (var j of get_values) {\n          if (cnt > 0) {\n            this.graph.addEdge(prev, j, 0, true);\n            prev = j;\n          }\n          if (cnt === 0) {\n            prev = j;\n          }\n          cnt++;\n        }\n      }\n\n      this.setState({\n        list: lists\n      });\n    });\n  };\n\n  toggle = (type, value) => event => {\n    this.setState(state => {\n      return {\n        [type]: value\n      };\n    });\n  };\n\n  findFloor = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].type) {\n          if (array[i].geomtery.type === \"Polygon\") {\n            if (array[i].properties.floor === key) {\n              return i;\n            }\n          }\n        }\n        if (array[i].floor === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n\n    let { scale } = this.state;\n\n    if(color === \"red\"){\n      let srcDiv = document.getElementById(\"srcImage\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n    }else if(color === \"yellow\"){\n      let lift = document.getElementById(\"lift\");\n      let stairs = document.getElementById(\"stairs\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      \n      let gpx,gpy;\n\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n\n      var rot = (Math.PI / 2) * 3;\n      var x = pos_x;\n      var y = pos_y;\n      var step = Math.PI / 5;\n      let frConnType = \"\";\n      let data = this.props.navigationInfo.map(r => {\n        return r.properties;\n      });\n      for (let k = 0; k < data.length; k++) {\n        if (data[k].node === i) {\n          frConnType = data[k].type;\n        }\n      }\n      if (frConnType === \"Stairs\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      } else if (frConnType === \"Lift\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      }\n       \n    }else if(color === \"green\"){\n      let dstDiv = document.getElementById(\"dstImage\");\n      let { scale } = this.state;\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n    }\n  };\n\n  color_canvas = (i, place, color) => {\n    let srcDiv = document.getElementById(\"srcImage\");\n    let dstDiv = document.getElementById(\"dstImage\");\n    if (place === \"srcmap\") {\n      let { srcfloorL, scale } = this.state;\n      var canvas = document.getElementById(\"myCanvassrc\");\n      var context = canvas.getContext(\"2d\");\n      var wrh = this.state.srcfloorL / this.state.srcfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx = newWidth / this.state.srcfloorL;\n      let gpy = newHeight / this.state.srcfloorB;\n\n      var posX = gpx * (i % srcfloorL);\n      var posY = gpy * parseInt(i / srcfloorL);\n      var halfScale = scale / 2;\n      posX = posX + halfScale;\n      posY = posY + halfScale;\n      if (color === \"green\") {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n      }else if(color === \"#bdbdbd\"){\n        let { dstfloorL, scale } = this.state;\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.fillStyle = color;\n        context.globalAlpha = 1;\n        context.fillRect(posX, posY, scale, scale);  \n      } else {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(srcDiv, posX-9,posY, 15, 15);\n      }\n    } else {\n      let { dstfloorL, scale } = this.state;\n      let canvas = document.getElementById(\"myCanvasdst\");\n      let context = canvas.getContext(\"2d\");\n      let posX = scale * (i % dstfloorL);\n      let posY = scale * parseInt(i / dstfloorL);\n      context.fillStyle = color;\n      context.fillRect(posX, posY, scale, scale);\n    }\n  };\n\n  find = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (parseInt(array[i].node) === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  find_fl = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (\n          parseInt(array[i].node) === key &&\n          array[i].floor == \"floorconnection\"\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  handleSubmit = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n    if (srcVal != null && dstVal != null) {\n      var divimg = document.getElementById(\"mydiv1\");\n      var divcan = document.getElementById(\"mydiv\");\n      var len = divimg.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divimg.childNodes[0].remove();\n      }\n      len = divcan.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divcan.childNodes[0].remove();\n      }\n      if (srcfloor === dstfloor) {\n        var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n        let ratio = cvWidth / dstfloorL;\n        let height_of_canvas = ratio * dstfloorB;\n        let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n        this.setState({\n          samefloor: true,\n          scale:factor\n        });\n        var img1 = new Image();\n        var img = document.getElementById(\"myImage\");\n        img1.src = img.src;\n        img1.hidden = true;\n        var color_canvas = this.color_canvas;\n        var me = this;\n        var dest_x = this.state.dstVal % this.state.dstfloorL;\n        var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n        let imgDiv = document.getElementById(\"myImage\");\n        this.imgDiv = imgDiv;\n        let angle = 0;\n  // status of the pointer(s)\n  let pointerangle;\n        var canvas = window.d3.select(\"canvas\").call(\n            window.d3\n              .zoom()\n              .scaleExtent([1, 8])\n              .on(\"zoom\", zoom)\n          ),\n          context = canvas.node().getContext(\"2d\"),\n          width = canvas.property(\"width\"),\n          height = canvas.property(\"height\");\n        var active = window.d3.select(null);\n        var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n        var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n        function zoom() {\n          me.setState(\n            {\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            },\n            () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            }\n          );\n        }\n        function draw() {\n          if (active.node() === this) return reset();\n          active.classed(\"active\", false);\n          active = window.d3.select(this).classed(\"active\", true);\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          context.rotate(angle);\n          context.globalAlpha = 0.5;\n          context.drawImage(\n            img1,\n            0,\n            0,\n            img1.width,\n            img1.height,\n            0,\n            0,\n            newWidth,\n            newHeight\n          );\n          // me.loadNonwalkable(\"myCanvassrc\")\n          me.callwhile(\n            me.state.srcfloor,\n            me.state.srcVal,\n            me.state.srcfloorL,\n            me.state.srcfloorB,\n            dest_x,\n            dest_y,\n            true,\n            \"myCanvassrc\"\n          );\n          color_canvas(srcVal, \"srcmap\", \"red\");\n          color_canvas(dstVal, \"srcmap\", \"green\");\n        }\n\n        function reset() {\n          active.classed(\"active\", false);\n          active = window.d3.select(null);\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, initialTransform);\n        }\n        function timer(ms) {\n          return new Promise(res => setTimeout(res, ms));\n        }\n\n        function zoomTo() {\n          let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n          let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          let gpx = newWidth / me.state.srcfloorL;\n          let gpy = newHeight / me.state.srcfloorB;\n          let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n          //Zoomed\n          let distX =\n            width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n          let distY =\n            height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n          var transform = window.d3.zoomIdentity.translate(distX, distY);\n          // .scale(1.2)\n          // .translate(-4*X,-4*Y)\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, transform);\n        }\n        img1.onload = function() {\n          draw();\n          zoomTo();\n        };\n      } else {\n        this.setState({\n          samefloor: false,\n          buildingView:true\n        });\n        this.findpath();\n      }\n    } else {\n    }\n  };\n\n  loadNonwalkable = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData = navInfo.filter(r=>{\n      return r.floor === srcfloor\n    })\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpath(start, nodes[j]);\n        this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n        start = nodes[j];\n      }\n      this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n    }\n  }\n\n  loadMultiFloorNonwalkable = (id) => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData\n\n    if(id ===\" canvas0\"){\n      floorData = navInfo.filter(r=>{\n        return r.floor === srcfloor\n      })\n    }else{\n      floorData = navInfo.filter(r=>{\n        return r.floor === dstfloor\n      })\n    }\n\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpathMulti(start, nodes[j],id);\n        // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n        start = nodes[j];\n      }\n      // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n    }\n  }\n\n  oldpath = (x, y) => {\n    // x = coord_val  y=coord_val in normal\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else {\n      g = dstfloorL * e + f;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n      this.oldpath(g, x);\n      this.oldpath(g, y);\n    }\n  };\n\n  color = (i,color,canvasid)=>{\n      let posX,posY,gpx,gpy\n      if(canvasid === \"canvas0\"){\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }else{\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);  \n  }\n\n  oldpathMulti = (x, y,id) => {\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color(g,\"#bdbdbd\",id);\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color(g,\"#bdbdbd\",id);\n    } else {\n      g = dstfloorL * e + f;\n      this.color(g,\"#bdbdbd\",id);\n      this.oldpathMulti(g, x,id);\n      this.oldpathMulti(g, y,id);\n    }\n  };\n\n  findpath() {\n    var srcvert =\n      this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert =\n      this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n    if (this.graph.hasvertex(srcvert)) {\n    } else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor == this.state.srcfloor &&\n          nodes[i].properties.floorElement === \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.srcfloor,\n        this.state.srcVal,\n        this.state.srcfloorL,\n        this.state.srcfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n\n    if (this.graph.hasvertex(dstvert)) {\n    } else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor === this.state.dstfloor &&\n          nodes[i].properties.floorElement == \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.dstfloor,\n        this.state.dstVal,\n        this.state.dstfloorL,\n        this.state.dstfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    this.specialcallwhile(\n      this.state.srcfloor,\n      srcvert,\n      this.state.dstfloor,\n      dstvert\n    );\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        break;\n      }\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n\n        var neighbour = false;\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      let ans = new Map();\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n          let canvas = window.d3\n            .select(\"#mydiv\")\n            .append(\"canvas\")\n            .attr(\"id\", \"canvas\" + ii)\n            .attr(\"style\", `border:1px solid;display:${dsp};`)\n            .attr(\"width\", this.state.canvasWidth)\n            .attr(\"height\", this.state.canvasHeight)\n            .call(\n              window.d3\n                .zoom()\n                .scaleExtent([1, 8])\n                .on(\"zoom\", multiCanvasZoom)\n            );\n\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity\n            .translate(0, 0)\n            .scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n          img1.onload = function() {\n            multiCanvas();\n            zoomTo()\n          };\n\n          function multiCanvasZoom() {\n            me.setState(\n              {\n                zoom: true,\n                // pathCaption: []\n              },\n              () => {\n                var transform = window.d3.event.transform;\n                ctx.save();\n                ctx.clearRect(0, 0, width, height);\n                ctx.translate(transform.x, transform.y);\n                ctx.scale(transform.k, transform.k);\n                loaded = false;\n                multiCanvas();\n                ctx.restore();\n              }\n            );\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              ctx.globalAlpha = 0.5;\n\n              ctx.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              var id = \"canvas\" + ii;\n              // me.loadMultiFloorNonwalkable(id)\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n              var node_count = 0;\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n                node_count++;\n              }\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n            //Zoomed\n            let distX =\n              width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n            let distY =\n              height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\n            canvas\n              .transition()\n              .duration(750)\n              .call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n    for (let i = 0; i < m; i++) {\n      var row = [],\n        row1 = [],\n        row3 = [],\n        row4 = [];\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n      this.visited[minleave[0]][minleave[1]] = 1;\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (\n            this.visited[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])\n            ] == 1\n          ) {\n          } else {\n            check = false;\n          }\n        }\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(\n              vert,\n              this.flrconn[ch][2],\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\n                parseInt(this.flrconn[ch][1])\n              ],\n              true\n            );\n          }\n          this.reset_var();\n          break;\n        }\n      }\n      this.leaves.splice(var_i, 1);\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (\n                this.minimumcost[j][k] >\n                this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  )\n              ) {\n                this.minimumcost[j][k] =\n                  this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  );\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                  minleave[1]\n                ].concat([[j, k]]);\n                notthere = 1;\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (single == true) {\n      let { scale } = this.state;\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n      let sp = this.shortestpath[dest_x][dest_y];\n      let mypoints = sp.map(r => {\n        return { x: r[0], y: r[1] };\n      });\n\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      }\n          if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n            this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n          }else{\n            this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n          }\n      var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { x: row[0], index: i };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { y: row[1], index: i };\n      });\n      let minRowX = rowX.reduce((prev, current) =>\n        prev.x < current.x ? prev : current\n      );\n      let maxRowX = rowX.reduce((prev, current) =>\n        prev.x > current.x ? prev : current\n      );\n      let minRowY = rowY.reduce((prev, current) =>\n        prev.y < current.y ? prev : current\n      );\n      let maxRowY = rowY.reduce((prev, current) =>\n        prev.y > current.y ? prev : current\n      );\n\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      };\n\n      // let conjugateDidd = this.pathTune.map((p,q,r)=>{\n      //     console.log(\"p q r\",p,q,r)\n      // })\n      let arr = this.pathTune;\n      if(arr.length == 0)return undefined;\n      var a = this.pathTune;\n      var resultX = a.map((n, i, a) => i ? n.points.x - a[i-1].points.x : 0 - n.points.x);\n\n      var resultY = a.map((n, i, a) => i ? n.points.y - a[i-1].points.y : 0 - n.points.y);\n\n      var minX = Math.min.apply(null, resultX),minY = Math.min.apply(null, resultY) ;\n      let totalMin = Math.min(minX,minY);\n      if(totalMin<5){\n        for(let t=0;t<resultX.length;t++){\n         if(totalMin === resultX[t] && this.pathTune[t-1] ){\n           this.pathTune[t].points.x = this.pathTune[t-1].points.x; \n         }else if(totalMin === resultY[t] && this.pathTune[t-1] ){\n           console.log(\"total min\",this.pathTune[t],this.pathTune[t-1])\n          this.pathTune[t].points.y = this.pathTune[t-1].points.y; \n         } \n        }\n      }\n    // return min\n\n      // let resY =  arr.reduce(function(r, e, i) {\n      //   let absR = Math.abs(r.points.x), absE = Math.abs(e.points.x);\n      //   if (absR > absE || i === 0 || (absR === absE && e.points.x > r)) r.points.x = e.points.x\n      //   return r.points.x\n      // })\n      // console.log(\"abs\",resX)\n      // console.log(\"max diff\",maxDiff)\n      // return maxDiff;\n\n      context.beginPath();\n      context.moveTo(gpx * this.pathTune[0].points.x,gpy * this.pathTune[0].points.y);\n      for (let k=0;k<this.pathTune.length;k++){\n        context.lineTo(gpx * this.pathTune[k].points.x,gpy * this.pathTune[k].points.y);\n      }\n      context.lineTo(gpx * this.pathTune[this.pathTune.length-1].points.x,gpy * this.pathTune[this.pathTune.length-1].points.y)\n      context.stroke();\n\n      // var max = Math.max.apply(null, maxRow);\n      console.log(\"pathtine\",this.pathTune)\n      // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n      this.reset_var();\n    }\n  }\n\n  interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n    let resultpath = [];\n    if (turningPointsPath.length === 1) {\n      resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n      return resultpath;\n    }\n    for (let i = 0; i < turningPointsPath.length - 1; i++) {\n      let points = this.interpolatePoints(\n        turningPointsPath[i],\n        turningPointsPath[i + 1],\n        seperationGap,\n        gpx,\n        gpy\n      );\n      for (let k = 0; k < points.length; k++) {\n        resultpath.push(points[k]);\n      }\n      // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n    }\n    return resultpath;\n  };\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n    let counter = seperationGap;\n    while (counter < d) {\n      let x = p1.x + (counter / d) * (p2.x - p1.x);\n      let y = p1.y + (counter / d) * (p2.y - p1.y);\n      result.push({ x: parseInt(x), y: parseInt(y) });\n      counter += 1 * seperationGap;\n    }\n    return result;\n  }\n\n  simplifyPath = (points, tolerance) => {\n    // helper classes\n    var Vector = function(x, y) {\n      this.x = x;\n      this.y = y;\n    };\n    var Line = function(p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n      this.distanceToPoint = function(point) {\n        // slope\n        var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n          // y offset\n          b = this.p1.y - m * this.p1.x,\n          d = [];\n        // distance to the linear equation\n        d.push(\n          Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n        );\n        // distance to p1\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n          )\n        );\n        // distance to p2\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n          )\n        );\n        // return the smallest distance\n        return d.sort(function(a, b) {\n          return a - b; //causes an array to be sorted numerically and ascending\n        })[0];\n      };\n    };\n\n    var douglasPeucker = function(points, tolerance) {\n      if (points.length <= 2) {\n        return [points[0]];\n      }\n      var returnPoints = [],\n        // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n        // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n        maxDistanceIndex = 0,\n        p;\n      for (var i = 1; i <= points.length - 2; i++) {\n        var distance = line.distanceToPoint(points[i]);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          maxDistanceIndex = i;\n        }\n      }\n      // check if the max distance is greater than our tollerance allows\n      if (maxDistance >= tolerance) {\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        // include this point in the output\n        returnPoints = returnPoints.concat(\n          douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n        );\n        // returnPoints.push( points[maxDistanceIndex] );\n        returnPoints = returnPoints.concat(\n          douglasPeucker(\n            points.slice(maxDistanceIndex, points.length),\n            tolerance\n          )\n        );\n      } else {\n        // ditching this point\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        returnPoints = [points[0]];\n      }\n      return returnPoints;\n    };\n    var arr = douglasPeucker(points, tolerance);\n    // always have to push the very last point on so it doesn't get left off\n    arr.push(points[points.length - 1]);\n    return arr;\n  };\n\n  find_angle = (p0, p1, c) => {\n    var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n    var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n\n    // {\n    // x: refinedPoints[currentRPoint].x,\n    // y: refinedPoints[currentRPoint].y + 1\n    // },\n    // refinedPoints[currentRPoint + 1],\n    // refinedPoints[currentRPoint]\n    return (\n      (Math.atan2(\n        cp1.y * p0c.x - cp1.x * p0c.y,\n        p0c.x * cp1.x + p0c.y * cp1.y\n      ) *\n        180) /\n      Math.PI\n    );\n  };\n\n  //Module for finding the direction's equivalent commands\n\n  findDirectionword = angle => {\n\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return (\"Go Straight\")\n      // }\n      // return (\"O' Clock\", {\n      //   angle: Math.abs(Math.round((360 + angle) / 30))\n      // });\n      return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n    //   return this.props.t(\"Go Straight\")\n    // }\n    // return this.props.t(\"O' Clock\", {\n    //   angle: Math.abs(Math.round(angle / 30))\n    // });\n    return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n\n  findWord = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      return \"Turn left\";\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    return \"Turn right\";\n\n    // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  // find the error component in the iteration and leaves it for the next iteration\n  findErrorInAngle = angle => {\n    if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n    return angle - Math.round(angle / 30) * 30;\n  };\n  //same as above but in abbreviated form\n\n  findDirectionAbbreviation = angle => {\n    if (angle > 0) return \"Right\";\n\n    return \"Left\";\n  };\n\n  findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n    //length of refined and non refined paths\n    var nRefined = refinedPoints.length;\n    var nNonRefined = nonRefinedPoints.length;\n    //converting the mapElements to ordered map for ease of access\n    var ElementMap = new Map();\n    var includedSet = new Set();\n    var word;\n    //for iteration purpose\n    var currentNRPoint = 0;\n    var currentRPoint = 0;\n    var flagList = [];\n    var i = 0;\n    var j = 0;\n    //radius defines what range to cover in a path\n    var radius = 3;\n    let pathTuning = []\n    //adding the elements to map\n    for (i = 0; i < mapElements.length; i++) {\n      let props = mapElements[i].properties;\n      if (props.floorElement === \"Rooms\") {\n        if (\n          props.floor === floor &&\n          props.roomName !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          Object.keys(props).map(id => {\n            if(id === 'roomName'){\n              props[`name`] = [...props[id]].join('');\n              delete props[id];  \n            }\n          });\n\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        }\n      } else if (props.floorElement === \"FloorConnection\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n        }\n      } else if (props.floorElement === \"Services\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else if (props.floorElement === \"RestRooms\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else {\n      }\n    }\n    //finding the indices of the\n    while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n      if (\n        nonRefinedPoints[currentNRPoint][0] ===\n          refinedPoints[currentRPoint].x &&\n        nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n      ) {\n        flagList.push(currentNRPoint);\n        currentRPoint++;\n      }\n      currentNRPoint++;\n    }\n    // Generating the direction and elaborated results\n    var DirectionResults = [];\n    var ElaboratedResults = [];\n    //entry point insertion to the list\n    DirectionResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    ElaboratedResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n    includedSet.add(\n      refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n    );\n    //iterate and /finding the desired results\n    var error = 0;\n    for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n      var angle = 0;\n      var coordinates;\n      // this.actualAngle = 155\n      if (currentRPoint === 0) {\n        angle = this.find_angle(\n          {\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          },\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n        let path_angle = angle;\n        let floorangle = this.state.floorAngle;\n        let diff = 360 - floorangle;\n        // let CurrentDirection = 60;\n        let CurrentDirection = this.actualAngle;\n        // rotateDirection\n        this.setState({\n          pathAngle:path_angle\n        })\n\n        let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n        angle = gn;\n      } else\n        angle = this.find_angle(\n          refinedPoints[currentRPoint - 1],\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n      angle = angle + error;\n      error = this.findErrorInAngle(angle);\n\n      let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n      let base = Math.cos(angle)*hypo;  \n      let height = Math.sin(angle)*hypo;\n      this.forwardStep = parseInt(Math.abs(height));   \n      this.lastStep = parseInt(Math.abs(base));\n      let steps = parseInt(this.forwardStep + hypo);\n\n      if (currentRPoint === nRefined - 2) {\n        word = this.findDirectionword(angle);\n        DirectionResults.push(word);\n        DirectionResults.push(\n          \"Move \" +\n            Math.round(\n              0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n            ) +\n            \" steps forward\"\n        );\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        break;\n      }\n     \n      if(hypo <= 6){\n        word = this.findWord(angle);\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n    }else{\n        word = this.findDirectionword(angle);\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        let step = parseInt(this.lastStep) + parseInt(Math.round(\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n          ))\n        DirectionResults.push(word);\n        DirectionResults.push(word + \" Move \" +\n        step +\n        \" steps forward\");\n    }\n\n      //this part of code handles the intermediate importatnt rooms\n      var begin = flagList[currentRPoint] + 1;\n      var end = flagList[currentRPoint + 1];\n\n      while (begin < end) {\n        var currpoint = nonRefinedPoints[begin];\n        for (\n          i = Math.max(0, currpoint[0] - radius);\n          i < currpoint[0] + radius;\n          i++\n        ) {\n          for (\n            j = Math.max(0, currpoint[1] - radius);\n            j < currpoint[1] + radius;\n            j++\n          ) {\n            if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n              var tempAngle = this.find_angle(\n                {\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                },\n                { x: i, y: j },\n                { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n              );\n              ElaboratedResults.push(\n                ElementMap.get(i + \"@\" + j).roomName +\n                  \" on your \" +\n                  this.findDirectionAbbreviation(tempAngle)\n              );\n              includedSet.add(i + \"@\" + j);\n            }\n          }\n        }\n        begin++;\n      }\n    }\n    let elem = ElementMap.get(\n      \"\" +\n        refinedPoints[nRefined - 1].x +\n        \"@\" +\n        refinedPoints[nRefined - 1].y\n    );\n    if(elem.type === \"Rest Rooms\"){\n      let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else{\n      DirectionResults.push(\n        \"You will reach \" +\n          ElementMap.get(\n            \"\" +\n              refinedPoints[nRefined - 1].x +\n              \"@\" +\n              refinedPoints[nRefined - 1].y\n          ).name\n      );\n    }\n    ElaboratedResults.push(\n      \"You have reached \" +\n        ElementMap.get(\n          \"\" +\n            refinedPoints[nRefined - 1].x +\n            \"@\" +\n            refinedPoints[nRefined - 1].y\n        ).name\n    );\n    let resultMap = DirectionResults.map(r => {\n      return { instruction: r, floor: floor };\n    });\n    this.pathTune = pathTuning\n    resultMap.forEach(element => {\n      this.setState(prevState => ({\n        pathFloor: [...prevState.pathFloor, element]\n      }));\n    });\n    let step = DirectionResults[0];\n    if(this.state.srcfloor === this.state.dstfloor){\n      if(this.state.zoom === false){\n      this.setState(\n        prevState => ({\n          pathArray: [...prevState.pathArray, DirectionResults],\n          srtdFlr: [...prevState.srtdFlr, floor],\n          instructionReady:true\n\n        }),\n        () => {\n          let flrArry = [this.state.srcfloor, this.state.dstfloor];\n          if (this.state.pathArray.length === 2) {\n            for (let k = 0; k < flrArry.length; k++) {\n              if (this.state.srtdFlr[k] === flrArry[k]) {\n                const merge3 = this.state.pathArray.flat(1);\n                this.setState({\n                  pathCaption: merge3\n                });\n              }\n            }\n          } else {\n            for (let k = 0; k < DirectionResults.length; k++) {\n              this.setState(prevState => ({\n                pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n              }));\n            }\n          }\n        }\n      );\n    }\n\n    }else{\n        if(this.state.srcfloor === floor){\n          this.setState({\n            firstFlrInstruction:DirectionResults,\n            firstFlr:floor,\n            currentFloor:floor,\n            // instructionReady:true\n          })\n        }else{\n          this.setState({\n            secondFlrInstruction:DirectionResults,\n            secondFlr:floor,\n            instructionReady:true\n          })\n        }\n    }\n      \n  };\n\n  calculatePath = (path_angle, diff, CurrentDirection) => {\n    let pathGN, rotateDirection, path_angleN;\n    if (path_angle >= 0 && path_angle < 106) {\n      pathGN = 360 - (diff - path_angle);\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle > 105 && path_angle <= 180) {\n      pathGN = path_angle - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle <= -1 && path_angle >= -180) {\n      path_angleN = 180 + path_angle;\n      pathGN = path_angleN + 180 - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    }\n    return rotateDirection;\n  };\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n\n  /* NAVIGATION DRAWER */\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n  incCanvas = () => {\n    let { scale } = this.state;\n    if (scale < 30) {\n      this.setState(\n        {\n          scale: scale + 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n  decCanvas = () => {\n    let { scale } = this.state;\n    if (scale > 2) {\n      this.setState(\n        {\n          scale: scale - 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  handleDstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    if (e.length > 0) {\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {\n        }\n      }\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState(\n        {\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  dstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type} Washroom (${e.floor})`;\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  handleSrcChange = e => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        resp = `${e[0].roomName}(${e[0].floor})`;\n        if (e[0].node === navInfo[i].properties.node) {\n\n          name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].name}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type} Washroom (${e[0].floor})`;\n      } else {\n      }\n    }\n\n    var ind = this.findFloor(floor, this.props.flrList.data);\n\n    // var srcBar = document.getElementById(\"src-bar\");\n    // var navHeight = document.getElementById(\"nav-height\");\n    // var element = document.getElementById(\"myCanvassrc\");\n    // var topPos = element.getBoundingClientRect().top;\n    // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n\n    // // image is smaller than the canvas so no need to resize\n    // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n    // // return;\n\n    // // Figure out the ratio\n    // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n    // // use whichever multiplier is smaller\n    // let ratio = ratioX < ratioY ? ratioX : ratioY;\n    // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n    // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        // setTimeout(() => {\n          this.handleSubmit();\n        // }, \"2000\");\n      }\n    );\n  };\n\n  srcChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onDstSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      dstSuggestions: this.getDstSuggestions(value)\n    });\n  };\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onDstSuggestionsClearRequested = () => {\n    this.setState({\n      dstSuggestions: []\n    });\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getDstSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getSuggestionValue = suggestion => {\n    this.srcChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  getDstSuggestionValue = suggestion => {\n    this.dstChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  renderSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  renderDstSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSrcChange = (event, { newValue }) => {\n    this.setState({\n      dstValue: newValue\n    });\n  };\n\n  nvgtSrcBld = () => {\n    let { tmpSrcLocation } = this.state;\n    let e = [tmpSrcLocation];\n    this.fetchSrcBldLocation(\n      e,\n      tmpSrcLocation.venueName,\n      tmpSrcLocation.buildingName,\n      \"srcBuildingLocation\",\n      k => {\n        this.handleDstChange(k);\n      }\n    );\n  };\n\n  nvgtDstBld = () => {\n    let { tmpDstLocation } = this.state;\n    let e = [tmpDstLocation];\n    this.fetchDstBldLocation(\n      e,\n      tmpDstLocation.venueName,\n      tmpDstLocation.buildingName,\n      \"dstBuildingLocation\",\n      k => {\n        this.handleDstChange(e);\n      }\n    );\n  };\n\n  fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            this.srcBldDstPointChange(e, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            let props = [navInfo[i].properties];\n            this.srcBldDstPointChange(props, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  srcBldDstPointChange = (e, cb) => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      }\n    );\n    cb();\n  };\n\n  navigateNext = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[0].style.display = \"none\";\n    div[1].style.display = \"block\";\n    this.setState({\n      next: false,\n      currentFloor: this.state.dstfloor\n    });\n  };\n\n  navigatePrevious = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[1].style.display = \"none\";\n    div[0].style.display = \"block\";\n    this.setState({\n      next: true,\n      currentFloor: this.state.srcfloor\n    });\n  };\n\n  handleBuildingView = () => {\n    this.setState({\n      showInstructions: false,\n    });\n  };\n\n  previousButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if (currentStep !== 0) {\n      // return (\n      //   <button\n      //     className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\n      //     type=\"button\"\n      //     onClick={this._prev}\n      //   >\n      //     Previous\n      //   </button>\n      // );\n      if (currentStep < this.state.pathCaption.length) {\n        this._next();\n      }\n    }\n    return null;\n  }\n\n  nextButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if (currentStep < this.state.pathCaption.length) {\n      this._next();\n    }\n    return null;\n  }\n\n  _next = () => {\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= this.state.pathCaption.length - 1\n        ? this.state.pathCaption.length\n        : currentStep + 1;\n    if (this.state.pathCaption[currentStep]) {\n      let step = this.state.pathCaption[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    // if (\n    //   this.state.pathFloor[currentStep] !== undefined &&\n    //   this.state.pathFloor[currentStep].floor !==\n    //     this.state.pathFloor[currentStep - 1].floor\n    // ) {\n    //   this.navigateNext();\n    // }\n\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  _prev = () => {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n    if (this.state.pathFloor[currentStep + 1] !== undefined) {\n      if (\n        this.state.pathFloor[currentStep + 1].floor !==\n        this.state.pathFloor[currentStep].floor\n      ) {\n        let step = this.state.pathCaption[currentStep-1];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n        // this.navigatePrevious();\n      }\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  playInstruction = (pause)=>{\n    var synth = window.speechSynthesis;\n    synth.cancel();\n    if(pause === true){\n      synth.pause();\n    }else{\n      synth.resume();\n    }\n    // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n    // synth.speak(utterance);\n    // synth.resume()\n    let instruction = this.filterInstruction()\n\n    instruction.forEach(r=>{\n      var utterance1 = new SpeechSynthesisUtterance(r);\n      synth.speak(utterance1);\n    })\n  }\n\n  filterInstruction = ()=>{\n    var instructions = [];\n    var stepsCount = [];\n    let instruction;\n    if(this.state.srcfloor === this.state.dstfloor){\n      instruction = this.state.pathCaption\n    }else{\n      instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    }\n    instructions = instruction &&  instruction.map((r, i) => {\n                        if (\n                          r.includes(\"right\") ||\n                          r.includes(\"Right\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"left\") ||\n                          r.includes(\"Left\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"forward\")\n                        ) {\n                          let theNum  = r.match(/\\d+/)[0]\n                          stepsCount.push(parseInt(theNum))\n                          return r \n                        } else if (\n                          r.includes(\"Turn 1 O' Clock\") ||\n                          r.includes(\"Turn 2 O' Clock\") ||\n                          r.includes(\"Turn 3 O' Clock\") \n                        ) {\n                          return'Turn slight right' \n                        }else if(  \n                          r.includes(\"Turn 4 O' Clock\") ||\n                          r.includes(\"Turn 5 O' Clock\")){\n                            return 'Turn back and then turn slight left' \n                        } else if (\n                          r.includes(\"Turn 7 O' Clock\") ||\n                          r.includes(\"Turn 8 O' Clock\") ||\n                          r.includes(\"Turn 9 O' Clock\") \n                        ) {\n                          return 'turn slight left'\n                        }else if(                        \n                          r.includes(\"Turn 10 O' Clock\") ||\n                          r.includes(\"Turn 11 O' Clock\")){\n                            return 'Turn back and then turn slight left'\n                        } else if (\n                          r.includes(\"Turn 6 O' Clock\")\n                        ) {\n                          return 'Turn back'\n                        } else if (r.includes(\"You are at\")) {\n                          return r\n                        } else if (r.includes(\"reached\")) {\n                          return r\n                        } else if (\n                          r.includes(\"Turn 0 O' Clock\") ||\n                          r.includes(\"Turn 12 O' Clock\")\n                        ) {\n                          return null \n                        }else{\n                          return r\n                        }\n    })\n    var distance\n\n    if(instructions){\n      const add = arr => arr.reduce((a, b) => a + b, 0);\n      distance = add(stepsCount);\n      instructions = instructions.filter( (el)=> {\n        return el != null;\n      });\n    }\n    instructions.splice(instructions.length-2, 1);\n    return instructions;\n  }\n\n  handleSourceLocation = (vals)=>{\n      this.setState(\n        {\n          selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          buildingView: false\n        },\n        () => {\n          this.props.androidNavigation({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding},()=>{\n          })\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"srcBuildingLocation\"\n          );\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"dstBuildingLocation\"\n          );\n          if(this.state.dstName !== \"Select Destination\"){\n            this.handleSubmit()\n          }else{\n            this.setNavigation(this.state.selectedDstLocation);\n          }\n        }\n      );\n  }\n\n\n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n      <React.Fragment>\n\n        <div hidden={!this.state.showInstructions}>\n          <Instructions\n            dstAddress={this.state.dstAddress}\n            globalTime={this.state.globalTime}\n            globalDistance={this.state.globalDistance}\n            currentLocation={this.state.currentLocation}\n            handleBuildingView={this.handleBuildingView}\n            instructionSet={\n               combineInstructions\n            }\n            buildingView={this.state.buildingView}\n            sourceLocation={this.state.currentLocation}\n            dstLocation={this.state.dstAddress}\n          />\n        </div>\n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView ? (\n            <React.Fragment>\n              <div\n                className=\"source-destination fixed-top\"\n                id=\"src-bar\"\n                style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    {/* <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showStrtMenu: true,\n                          srcReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button> */}\n                    <SourceMenu\n                      srcName = {this.state.srcName}\n                      currentLocation = {this.state.currentLocation}\n                      selectedSrcLocation = {this.state.selectedSrcLocation}\n                      locationList = {this.state.locationList}\n                      srcReadOnly = {this.state.srcReadOnly}\n                      handleBlurr = {()=>{\n                        this.setState({\n                          srcReadOnly:!this.state.srcReadOnly\n                        })\n                      }}\n                      srcFloorList = {this.state.srcFloorList}\n                      dstAddress = {this.state.dstAddress}\n                      showStrtMenu = {() => {\n                        this.setState({ showStrtMenu: false });\n                      }}\n                      destinationActive  = {this.state.destinationActive}\n                      venueChange = {(val)=>{\n                          this.setState({\n                            selectedVenue:val,\n                            destinationActive:false,\n                            showMenu:true\n                          },()=>{\n                            this.getBuildingList(val)\n                          })\n                      }}\n                      selectedVenue = {this.state.selectedVenue}\n                      buildingList = {this.state.buildingList}\n                      showMenu = {this.state.showMenu}\n                      selectedBuilding = {this.state.selectedBuilding}\n                      buildingChange = {( vals )=>{\n                          this.setState({\n                            selectedBuilding:vals\n                          },()=>{\n                            this.handleSourceLocation()\n                          })\n                      }}\n                      venueList = {this.state.venueList}\n                      handleSelectSource = {(e)=>{\n                        if (e.length > 0) {\n                          this.setState(\n                            {\n                              tmpSrcLocation: e[0],\n                            },\n                            () => {\n                              this.handleSrcChange(e);\n                            }\n                          );\n                        }\n                      }}\n                      handleSourceLocation = {(e)=>{\n                        if (e.length > 0) {\n                          this.setState(\n                            {\n                              selectedSrcLocation: e[0],\n                              selectedDstLocation: e[0],\n                              buildingView: false\n                            },\n                            () => {\n                              this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                              })\n                              this.fetchLocation(\n                                e[0].venueName,\n                                e[0].buildingName,\n                                \"srcBuildingLocation\"\n                              );\n                              this.fetchLocation(\n                                e[0].venueName,\n                                e[0].buildingName,\n                                \"dstBuildingLocation\"\n                              );\n                              if(this.state.dstName !== \"Select Destination\"){\n                                this.handleSubmit()\n                              }else{\n                                this.setNavigation(this.state.selectedDstLocation);\n                              }\n                            }\n                          );\n                        }\n                      }}\n                      />\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto\" style={{marginTop:\"50px\"}}>\n                <div className=\"col-2\">\n                <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                </div>\n\n                  <div className=\"col-10 p-0\">\n                    {/* <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          dstReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button> */}\n                     <DestinationMenu\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    dstReadOnly:!this.state.dstReadOnly\n                  })\n                }}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                  this.setState({\n                    selectedDestinationVenue:val,\n                    destinationActive:true,\n                    showMenu:true\n                  },()=>{\n                    this.getBuildingList(val)\n                  })\n                }}\n                selectedVenue = {this.state.selectedDestinationVenue}\n                buildingList = {this.state.buildingList}\n                selectedBuilding = {this.state.selectedDestinationBuilding}\n                buildingChange = {( vals )=>{\n                    this.setState({\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true,\n                      destinationActive:false,\n                      showMenu:false\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      // if (\n                      //   this.state.selectedSrcLocation.venueName ===\n                      //     this.state.selectedDstLocation.venueName &&\n                      //   this.state.selectedSrcLocation.buildingName ===\n                      //     this.state.selectedDstLocation.buildingName\n                      // ) {\n                      //   this.setNavigation(this.state.selectedDstLocation);\n                      // }\n                      if (\n                        this.state.selectedVenue ===\n                          this.state.selectedDestinationVenue &&\n                        this.state.selectedBuilding ===\n                          this.state.selectedDestinationBuilding\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                  </div>\n                </div>\n              </div>\n              {/* {this.state.showStrtMenu && !this.state.buildingView\n                ?  */}\n                \n              {/* {this.state.showDstMenu && !this.state.buildingView\n                ?  */}\n               \n                {/* // : null} */}\n            </React.Fragment>\n          ) : null}\n          {this.state.buildingView ? (\n            <InstructionTab\n              pathCaption={combineInstructions}\n              currentStep={this.state.currentStep}\n              nextButton={()=>this.nextButton()}\n              imgDiv={this.imgDiv}\n            />\n          ) : null}\n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={!this.state.samefloor}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n          { !this.state.instructionReady ? (\n            <GlobalDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation = {this.state.dstBuildingLocation}\n              tmpDstLocation = {this.state.tmpDstLocation}\n              destinationVenue = {this.state.selectedDestinationVenue}\n              destinationBuilding = {this.state.selectedDestinationBuilding}\n              dstfloor = {this.state.dstfloor}\n              dstVal = {this.state.dstVal}\n\n\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              openModal = {this.onOpenModal}\n              closeBuilding = {()=>{\n                this.setState({\n                  buildingView: false\n                });\n              }}\n              // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              instructionSet={\n                combineInstructions\n              }\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            // null\n          ) : (\n            <React.Fragment>\n            <NavigationDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation={this.state.dstBuildingLocation}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              currentStep = {this.state.currentStep}\n              nextButton = {this.nextButton}\n              previousButton = {this.previousButton}\n              instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              playInstruction={(pause)=>{\n                this.playInstruction(pause)\n              }\n              }\n              closeBuilding = {() => {\n                this.setState({\n                  buildingView: false,\n                  instructionReady: false,\n                  zoom: false\n                });\n              }}\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            </React.Fragment>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile:state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n})(Navigation);\n"]},"metadata":{},"sourceType":"module"}