{"ast":null,"code":"function corslite(url, callback, cors) {\n  var sent = false;\n\n  if (typeof window.XMLHttpRequest === 'undefined') {\n    return callback(Error('Browser not supported'));\n  }\n\n  if (typeof cors === 'undefined') {\n    var m = url.match(/^\\s*https?:\\/\\/[^\\/]*/);\n    cors = m && m[0] !== location.protocol + '//' + location.domain + (location.port ? ':' + location.port : '');\n  }\n\n  var x = new window.XMLHttpRequest();\n\n  function isSuccessful(status) {\n    return status >= 200 && status < 300 || status === 304;\n  }\n\n  if (cors && !('withCredentials' in x)) {\n    // IE8-9\n    x = new window.XDomainRequest(); // Ensure callback is never called synchronously, i.e., before\n    // x.send() returns (this has been observed in the wild).\n    // See https://github.com/mapbox/mapbox.js/issues/472\n\n    var original = callback;\n\n    callback = function () {\n      if (sent) {\n        original.apply(this, arguments);\n      } else {\n        var that = this,\n            args = arguments;\n        setTimeout(function () {\n          original.apply(that, args);\n        }, 0);\n      }\n    };\n  }\n\n  function loaded() {\n    if ( // XDomainRequest\n    x.status === undefined || // modern browsers\n    isSuccessful(x.status)) callback.call(x, null, x);else callback.call(x, x, null);\n  } // Both `onreadystatechange` and `onload` can fire. `onreadystatechange`\n  // has [been supported for longer](http://stackoverflow.com/a/9181508/229001).\n\n\n  if ('onload' in x) {\n    x.onload = loaded;\n  } else {\n    x.onreadystatechange = function readystate() {\n      if (x.readyState === 4) {\n        loaded();\n      }\n    };\n  } // Call the callback with the XMLHttpRequest object as an error and prevent\n  // it from ever being called again by reassigning it to `noop`\n\n\n  x.onerror = function error(evt) {\n    // XDomainRequest provides no evt parameter\n    callback.call(this, evt || true, null);\n\n    callback = function () {};\n  }; // IE9 must have onprogress be set to a unique function.\n\n\n  x.onprogress = function () {};\n\n  x.ontimeout = function (evt) {\n    callback.call(this, evt, null);\n\n    callback = function () {};\n  };\n\n  x.onabort = function (evt) {\n    callback.call(this, evt, null);\n\n    callback = function () {};\n  }; // GET is the only supported HTTP Verb by XDomainRequest and is the\n  // only one supported here.\n\n\n  x.open('GET', url, true); // Send the request. Sending data is not supported.\n\n  x.send(null);\n  sent = true;\n  return x;\n}\n\nif (typeof module !== 'undefined') module.exports = corslite;","map":{"version":3,"sources":["/home/jahnavi/navigation/node_modules/corslite/corslite.js"],"names":["corslite","url","callback","cors","sent","window","XMLHttpRequest","Error","m","match","location","protocol","domain","port","x","isSuccessful","status","XDomainRequest","original","apply","arguments","that","args","setTimeout","loaded","undefined","call","onload","onreadystatechange","readystate","readyState","onerror","error","evt","onprogress","ontimeout","onabort","open","send","module","exports"],"mappings":"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","sourcesContent":["function corslite(url, callback, cors) {\n    var sent = false;\n\n    if (typeof window.XMLHttpRequest === 'undefined') {\n        return callback(Error('Browser not supported'));\n    }\n\n    if (typeof cors === 'undefined') {\n        var m = url.match(/^\\s*https?:\\/\\/[^\\/]*/);\n        cors = m && (m[0] !== location.protocol + '//' + location.domain +\n                (location.port ? ':' + location.port : ''));\n    }\n\n    var x = new window.XMLHttpRequest();\n\n    function isSuccessful(status) {\n        return status >= 200 && status < 300 || status === 304;\n    }\n\n    if (cors && !('withCredentials' in x)) {\n        // IE8-9\n        x = new window.XDomainRequest();\n\n        // Ensure callback is never called synchronously, i.e., before\n        // x.send() returns (this has been observed in the wild).\n        // See https://github.com/mapbox/mapbox.js/issues/472\n        var original = callback;\n        callback = function() {\n            if (sent) {\n                original.apply(this, arguments);\n            } else {\n                var that = this, args = arguments;\n                setTimeout(function() {\n                    original.apply(that, args);\n                }, 0);\n            }\n        }\n    }\n\n    function loaded() {\n        if (\n            // XDomainRequest\n            x.status === undefined ||\n            // modern browsers\n            isSuccessful(x.status)) callback.call(x, null, x);\n        else callback.call(x, x, null);\n    }\n\n    // Both `onreadystatechange` and `onload` can fire. `onreadystatechange`\n    // has [been supported for longer](http://stackoverflow.com/a/9181508/229001).\n    if ('onload' in x) {\n        x.onload = loaded;\n    } else {\n        x.onreadystatechange = function readystate() {\n            if (x.readyState === 4) {\n                loaded();\n            }\n        };\n    }\n\n    // Call the callback with the XMLHttpRequest object as an error and prevent\n    // it from ever being called again by reassigning it to `noop`\n    x.onerror = function error(evt) {\n        // XDomainRequest provides no evt parameter\n        callback.call(this, evt || true, null);\n        callback = function() { };\n    };\n\n    // IE9 must have onprogress be set to a unique function.\n    x.onprogress = function() { };\n\n    x.ontimeout = function(evt) {\n        callback.call(this, evt, null);\n        callback = function() { };\n    };\n\n    x.onabort = function(evt) {\n        callback.call(this, evt, null);\n        callback = function() { };\n    };\n\n    // GET is the only supported HTTP Verb by XDomainRequest and is the\n    // only one supported here.\n    x.open('GET', url, true);\n\n    // Send the request. Sending data is not supported.\n    x.send(null);\n    sent = true;\n\n    return x;\n}\n\nif (typeof module !== 'undefined') module.exports = corslite;\n"]},"metadata":{},"sourceType":"script"}