[{"/home/jahnavi/navigation/src/index.js":"1","/home/jahnavi/navigation/src/App.js":"2","/home/jahnavi/navigation/src/reportWebVitals.js":"3","/home/jahnavi/navigation/src/serviceWorkerRegistration.js":"4","/home/jahnavi/navigation/src/store/reducers/index.js":"5","/home/jahnavi/navigation/src/routes.js":"6","/home/jahnavi/navigation/src/store/reducers/userLogin.js":"7","/home/jahnavi/navigation/src/store/reducers/userDetails.js":"8","/home/jahnavi/navigation/src/store/reducers/venueList.js":"9","/home/jahnavi/navigation/src/store/reducers/sendOtp.js":"10","/home/jahnavi/navigation/src/store/reducers/resetPassword.js":"11","/home/jahnavi/navigation/src/store/reducers/buildingList.js":"12","/home/jahnavi/navigation/src/store/reducers/navigationInfo.js":"13","/home/jahnavi/navigation/src/store/reducers/gpsLocation.js":"14","/home/jahnavi/navigation/src/store/reducers/floorList.js":"15","/home/jahnavi/navigation/src/store/reducers/userInformation.js":"16","/home/jahnavi/navigation/src/store/reducers/verifyOtp.js":"17","/home/jahnavi/navigation/src/store/reducers/userPortfolio.js":"18","/home/jahnavi/navigation/src/store/reducers/sendEmailotp.js":"19","/home/jahnavi/navigation/src/store/reducers/updateEmail.js":"20","/home/jahnavi/navigation/src/store/reducers/updatePassword.js":"21","/home/jahnavi/navigation/src/store/reducers/verifyEmailotp.js":"22","/home/jahnavi/navigation/src/store/reducers/updateName.js":"23","/home/jahnavi/navigation/src/store/reducers/userRegister.js":"24","/home/jahnavi/navigation/src/store/reducers/forgotPassword.js":"25","/home/jahnavi/navigation/src/store/reducers/updateMobile.js":"26","/home/jahnavi/navigation/src/store/reducers/androidNavigation.js":"27","/home/jahnavi/navigation/src/store/reducers/saveAddress.js":"28","/home/jahnavi/navigation/src/store/reducers/osmRoutes.js":"29","/home/jahnavi/navigation/src/store/reducers/navContent.js":"30","/home/jahnavi/navigation/src/store/reducers/refPoint.js":"31","/home/jahnavi/navigation/src/store/reducers/globalNavigation.js":"32","/home/jahnavi/navigation/src/store/reducers/portfolio/updateAgegroup.js":"33","/home/jahnavi/navigation/src/store/reducers/portfolio/updateLanguage.js":"34","/home/jahnavi/navigation/src/store/reducers/portfolio/updateWalking.js":"35","/home/jahnavi/navigation/src/store/reducers/portfolio/updateVision.js":"36","/home/jahnavi/navigation/src/store/reducers/portfolio/updateHeight.js":"37","/home/jahnavi/navigation/src/components/landing/Landing.js":"38","/home/jahnavi/navigation/src/components/landing/LanguageSelect.js":"39","/home/jahnavi/navigation/src/components/authentication/Registration.js":"40","/home/jahnavi/navigation/src/components/feedback/ContactSupport.js":"41","/home/jahnavi/navigation/src/components/authentication/ForgotPass.js":"42","/home/jahnavi/navigation/src/components/feedback/CheckMessage.js":"43","/home/jahnavi/navigation/src/components/dashboard/Dashboard.js":"44","/home/jahnavi/navigation/src/components/authentication/ResetPassword.js":"45","/home/jahnavi/navigation/src/components/authentication/UserLogin.js":"46","/home/jahnavi/navigation/src/components/authentication/UserRegistration.js":"47","/home/jahnavi/navigation/src/components/feedback/AllowAccess.js":"48","/home/jahnavi/navigation/src/components/dashboard/global/GlobalView.js":"49","/home/jahnavi/navigation/src/components/dashboard/navigation/Konva.js":"50","/home/jahnavi/navigation/src/components/dashboard/Settings.js":"51","/home/jahnavi/navigation/src/components/dashboard/Landing.js":"52","/home/jahnavi/navigation/src/store/actions/index.js":"53","/home/jahnavi/navigation/src/components/dashboard/NavigationSettings.js":"54","/home/jahnavi/navigation/src/components/dashboard/ProfileSettings.js":"55","/home/jahnavi/navigation/src/config.js":"56","/home/jahnavi/navigation/src/components/dashboard/global/BottomBar.js":"57","/home/jahnavi/navigation/src/components/dashboard/global/Instructions.js":"58","/home/jahnavi/navigation/src/components/dashboard/navigation/InclusiveNavigation.js":"59","/home/jahnavi/navigation/src/components/dashboard/global/module.js":"60","/home/jahnavi/navigation/src/components/dashboard/navigation/Navigation.js":"61","/home/jahnavi/navigation/src/components/dashboard/navigation/NavigationDetails.js":"62","/home/jahnavi/navigation/src/components/dashboard/navigation/Instructions.js":"63","/home/jahnavi/navigation/src/components/dashboard/navigation/GlobalDetails.js":"64","/home/jahnavi/navigation/src/components/dashboard/navigation/InstructionTab.js":"65","/home/jahnavi/navigation/src/components/dashboard/navigation/SourceMenu.js":"66","/home/jahnavi/navigation/src/components/dashboard/navigation/DestinationMenu.js":"67","/home/jahnavi/navigation/src/components/dashboard/navigation/Menu.js":"68","/home/jahnavi/navigation/src/components/dashboard/navigation/SelectSource.js":"69","/home/jahnavi/navigation/src/components/dashboard/navigation/SelectDestination.js":"70"},{"size":1066,"mtime":1627706768000,"results":"71","hashOfConfig":"72"},{"size":351,"mtime":1635782092000,"results":"73","hashOfConfig":"72"},{"size":364,"mtime":1627706768000,"results":"74","hashOfConfig":"72"},{"size":5064,"mtime":1627706768000,"results":"75","hashOfConfig":"72"},{"size":2200,"mtime":1627706768000,"results":"76","hashOfConfig":"72"},{"size":2256,"mtime":1627706768000,"results":"77","hashOfConfig":"72"},{"size":175,"mtime":1627706768000,"results":"78","hashOfConfig":"72"},{"size":177,"mtime":1627706768000,"results":"79","hashOfConfig":"72"},{"size":175,"mtime":1627706768000,"results":"80","hashOfConfig":"72"},{"size":173,"mtime":1627706768000,"results":"81","hashOfConfig":"72"},{"size":179,"mtime":1627706768000,"results":"82","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"83","hashOfConfig":"72"},{"size":179,"mtime":1627706768000,"results":"84","hashOfConfig":"72"},{"size":174,"mtime":1627706768000,"results":"85","hashOfConfig":"72"},{"size":172,"mtime":1627706768000,"results":"86","hashOfConfig":"72"},{"size":181,"mtime":1627706768000,"results":"87","hashOfConfig":"72"},{"size":173,"mtime":1627706768000,"results":"88","hashOfConfig":"72"},{"size":179,"mtime":1627706768000,"results":"89","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"90","hashOfConfig":"72"},{"size":177,"mtime":1627706768000,"results":"91","hashOfConfig":"72"},{"size":180,"mtime":1627706768000,"results":"92","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"93","hashOfConfig":"72"},{"size":176,"mtime":1627706768000,"results":"94","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"95","hashOfConfig":"72"},{"size":180,"mtime":1627706768000,"results":"96","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"97","hashOfConfig":"72"},{"size":183,"mtime":1627706768000,"results":"98","hashOfConfig":"72"},{"size":177,"mtime":1627706768000,"results":"99","hashOfConfig":"72"},{"size":175,"mtime":1627706768000,"results":"100","hashOfConfig":"72"},{"size":176,"mtime":1627706768000,"results":"101","hashOfConfig":"72"},{"size":172,"mtime":1627706768000,"results":"102","hashOfConfig":"72"},{"size":182,"mtime":1627706768000,"results":"103","hashOfConfig":"72"},{"size":180,"mtime":1627706768000,"results":"104","hashOfConfig":"72"},{"size":180,"mtime":1627706768000,"results":"105","hashOfConfig":"72"},{"size":179,"mtime":1627706768000,"results":"106","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"107","hashOfConfig":"72"},{"size":178,"mtime":1627706768000,"results":"108","hashOfConfig":"72"},{"size":1139,"mtime":1627706768000,"results":"109","hashOfConfig":"72"},{"size":1543,"mtime":1627706768000,"results":"110","hashOfConfig":"72"},{"size":1056,"mtime":1627706768000,"results":"111","hashOfConfig":"72"},{"size":3690,"mtime":1627706768000,"results":"112","hashOfConfig":"72"},{"size":4158,"mtime":1627706768000,"results":"113","hashOfConfig":"72"},{"size":1114,"mtime":1627706768000,"results":"114","hashOfConfig":"72"},{"size":4415,"mtime":1635779360000,"results":"115","hashOfConfig":"72"},{"size":8592,"mtime":1627706768000,"results":"116","hashOfConfig":"72"},{"size":7938,"mtime":1627706768000,"results":"117","hashOfConfig":"72"},{"size":19194,"mtime":1627706768000,"results":"118","hashOfConfig":"72"},{"size":1061,"mtime":1627706768000,"results":"119","hashOfConfig":"72"},{"size":107945,"mtime":1662436980103,"results":"120","hashOfConfig":"72"},{"size":121180,"mtime":1627706768000,"results":"121","hashOfConfig":"72"},{"size":2207,"mtime":1635779238000,"results":"122","hashOfConfig":"72"},{"size":9701,"mtime":1635779088000,"results":"123","hashOfConfig":"72"},{"size":10776,"mtime":1627706768000,"results":"124","hashOfConfig":"72"},{"size":16482,"mtime":1635779136000,"results":"125","hashOfConfig":"72"},{"size":33827,"mtime":1627706768000,"results":"126","hashOfConfig":"72"},{"size":3735,"mtime":1627706768000,"results":"127","hashOfConfig":"72"},{"size":11195,"mtime":1654578244471,"results":"128","hashOfConfig":"72"},{"size":10535,"mtime":1651217734000,"results":"129","hashOfConfig":"72"},{"size":119764,"mtime":1641519092000,"results":"130","hashOfConfig":"72"},{"size":27574,"mtime":1662405171483,"results":"131","hashOfConfig":"72"},{"size":137740,"mtime":1627706768000,"results":"132","hashOfConfig":"72"},{"size":7895,"mtime":1627706768000,"results":"133","hashOfConfig":"72"},{"size":10300,"mtime":1627706768000,"results":"134","hashOfConfig":"72"},{"size":10959,"mtime":1627706768000,"results":"135","hashOfConfig":"72"},{"size":9880,"mtime":1627706768000,"results":"136","hashOfConfig":"72"},{"size":23446,"mtime":1627706768000,"results":"137","hashOfConfig":"72"},{"size":19723,"mtime":1627706768000,"results":"138","hashOfConfig":"72"},{"size":15697,"mtime":1627706768000,"results":"139","hashOfConfig":"72"},{"size":32007,"mtime":1627706768000,"results":"140","hashOfConfig":"72"},{"size":28010,"mtime":1627706768000,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"ku68a4",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"144"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"144"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"144"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"144"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"144"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"144"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"144"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"144"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"144"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"144"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"144"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"144"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"144"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"144"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"144"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":113,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":105,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"144"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"144"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"144"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"144"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"144"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"144"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"144"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":94,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"144"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":103,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"144"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"144"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"144"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"144"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"/home/jahnavi/navigation/src/index.js",[],["335","336"],"/home/jahnavi/navigation/src/App.js",[],"/home/jahnavi/navigation/src/reportWebVitals.js",[],"/home/jahnavi/navigation/src/serviceWorkerRegistration.js",[],"/home/jahnavi/navigation/src/store/reducers/index.js",[],"/home/jahnavi/navigation/src/routes.js",["337"],"import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Landing from  './components/landing/Landing';\nimport LanguageSelect from './components/landing/LanguageSelect';\nimport Registration from './components/authentication/Registration';\nimport AllowAccess from './components/feedback/AllowAccess';\nimport ResetPassword from './components/authentication/ResetPassword';\nimport ForgotPass from './components/authentication/ForgotPass';\nimport CheckMessage from './components/feedback/CheckMessage';\nimport ContactSupport from './components/feedback/ContactSupport';\nimport Dashboard from './components/dashboard/Dashboard';\nimport UserRegistration from './components/authentication/UserRegistration';\nimport UserLogin from './components/authentication/UserLogin';\nimport ColoredRect from './components/dashboard/navigation/Konva';\nimport GlobalView from './components/dashboard/global/GlobalView';\n\nconst BaseRouter = ()=>{\n    return(\n    <div>   \n            <Route exact path=\"/\" component={Landing}/>\n            <Route exact path=\"/language-select\" component={LanguageSelect}/>\n            <Route exact path=\"/login\" component={UserLogin}/>\n            <Route exact path=\"/contact\" component={ContactSupport}/>\n            <Route exact path=\"/register\" component={UserRegistration}/>\n            <Route exact path=\"/success\" component={Registration}/>\n            <Route exact path=\"/access\" component={AllowAccess}/>\n            <Route exact path=\"/reset-password\" component={ResetPassword}/>\n            <Route exact path=\"/forgot-password\" component={ForgotPass}/>\n            <Route exact path=\"/check-message\" component={CheckMessage}/>\n            <Route exact path=\"/dashboard\" component={Dashboard}/>\n            <Route exact path=\"/navigate\" component={Dashboard}/>\n            <Route exact path=\"/settings\" component={Dashboard}/>\n            <Route exact path=\"/profile-settings\" component={Dashboard}/>\n            <Route exact path=\"/navigation-settings\" component={Dashboard}/>\n            <Route exact path=\"/konva\" component={ColoredRect}/>\n            <Route exact path=\"/inclusive\" component={Dashboard}/>\n            <Route exact path=\"/global-view\" component={Dashboard}/>\n    </div>)\n}\n\nexport default BaseRouter","/home/jahnavi/navigation/src/store/reducers/userLogin.js",["338"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'USER_LOGIN':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/userDetails.js",["339"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'USER_DETAILS':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/venueList.js",["340"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'VENUE_LIST':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/sendOtp.js",["341"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'SEND_OTP':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/resetPassword.js",["342"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'RESET_PASSWORD':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/buildingList.js",["343"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'BUILDING_LIST':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/navigationInfo.js",["344"],"export default (state=[],action)=>{\n    switch(action.type){\n        case 'NAVIGATION_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","/home/jahnavi/navigation/src/store/reducers/gpsLocation.js",["345"],"export default(state=[],action)=>{\n    switch(action.type){\n        case 'GPS_LOCATION':\n            return action.payload;\n        default:\n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/floorList.js",["346"],"export default(state=[],action)=>{\n    switch(action.type){\n        case 'FLOOR_LIST':\n            return action.payload;\n        default:\n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/userInformation.js",["347"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'USER_INFORMATION':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/verifyOtp.js",["348"],"export default (state=[],action)=>{\n    switch(action.type){\n        case 'VERIFY_OTP':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/userPortfolio.js",["349"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'USER_PORTFOLIO':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/sendEmailotp.js",["350"],"export default (state=[],action)=>{\n    switch(action.type){\n        case 'VERIFY_EMAILOTP':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/updateEmail.js",["351"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_EMAIL':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/updatePassword.js",["352"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_PASSWORD':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/verifyEmailotp.js",["353"],"/home/jahnavi/navigation/src/store/reducers/updateName.js",["354"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_NAME':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/userRegister.js",["355"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'USER_REGISTER':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/forgotPassword.js",["356"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'FORGOT_PASSWORD':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/updateMobile.js",["357"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_MOBILE':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/androidNavigation.js",["358"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'ANDROID_NAVIGATION':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/saveAddress.js",["359"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'SAVE_ADDRESS':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/osmRoutes.js",["360"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'OSM_ROUTES':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/navContent.js",["361"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'NAV_CONTENT':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/refPoint.js",["362"],"export default (state=[],action)=>{\n    switch(action.type){\n        case 'REF_POINT':\n            return  action.payload;\n        default:\n            return state\n    }\n}","/home/jahnavi/navigation/src/store/reducers/globalNavigation.js",["363"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'GLOBAL_NAVIGATION':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/portfolio/updateAgegroup.js",["364"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_AGEGROUP':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/portfolio/updateLanguage.js",["365"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_LANGUAGE':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/portfolio/updateWalking.js",["366"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_WALKING':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/portfolio/updateVision.js",["367"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_VISION':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/store/reducers/portfolio/updateHeight.js",["368"],"export default (state=null,action)=>{\n    switch(action.type){\n        case 'UPDATE_HEIGHT':\n            return action.payload\n        default: \n            return state;\n    }\n}","/home/jahnavi/navigation/src/components/landing/Landing.js",["369"],"import React, { useState } from 'react';\nimport '../styles.css';\n\nexport default function Landing(props) {\n\n  return (\n    <div className=\"landing-height\">\n      <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\n        <div className=\"text-white row \" >\n          <div className=\"col-lg-12 \">\n            <div className=\"text-center\" id=\"content\">\n              <img src=\"/inclunav/assets/images/vertical_logo.svg\" alt=\"Welcome to Inclunav. It will assist you in Indoor Navigation and Wayfinding\" className=\"img-fluid w-75 h-75\"  />\n              <h2 className=\"text-header font-weight-bold mt-1 mb-4\" aria-hidden=\"true\"></h2>\n              <h3 className=\"text-normal mx-auto mb-5\" aria-hidden=\"true\">Assisted Indoor Navigation</h3>\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/language-select')}} > <span aria-hidden=\"true\"> START </span> <span class=\"sr-only\">Double tap to continue</span> </button> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/jahnavi/navigation/src/components/landing/LanguageSelect.js",["370"],"import React, { useState } from 'react';\nimport '../styles.css';\n\nexport default function LanguageSelect(props) {\n\n  return (\n    <div className=\"landing-height\">\n      <div className=\"bg-landing container-fluid d-flex justify-content-center align-items-center h-100\">\n        <div className=\"text-white row\" >\n          <div className=\"col-lg-12\">\n            <div className=\"text-center\" id=\"language-content\">\n              <div className=\"sr-only\"> Welcome to Inclunav Routes, your personal indoor navigation system </div>\n               <h3 className=\"text-normal mx-auto mb-2\"> <span aria-hidden=\"true\" > Choose Your language </span>  <span className=\"sr-only\">Choose your Preferred Language </span> </h3>\n              <h3 className=\"text-normal mx-auto mb-2\" aria-hidden=\"true\" > अपनी भाषा चुिनए </h3>\n            </div>\n          </div>\n          <div className=\"col-lg-12\">\n            <div className=\"text-center\" id=\"language-button\">\n              <button className=\"btn btn-language w-80 btn-default btn-lg font-weight-bold h2 mx-auto\" onClick={()=>{props.history.push('/login')}} ><span aria-hidden=\"true\">English</span>   <span class=\"sr-only\">English</span></button>\n              <button className=\"btn btn-language w-80 btn-default btn-lg font-weight-bold mt-4 h2 mx-auto\" onClick={()=>{props.history.push('/login')}} ><span aria-hidden=\"true\">हिन्दी</span>   <span class=\"sr-only\">Hindi</span></button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/jahnavi/navigation/src/components/authentication/Registration.js",["371"],"import React, { useState } from 'react';\nimport '../styles.css';\n\nexport default function Registration(props) {\n\n  return (\n    <div className=\"landing-height\">\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n        <div className=\"mx-auto\"> REGISTRATION </div>\n    </nav>\n    <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\n        <div className=\"text-white row w-100\" >\n        <div className=\"col-lg-12 \">\n            <div className=\"text-center\" id=\"content\">\n              <h3 className=\"registration-success mx-auto mb-5\" aria-hidden=\"true\">Sign-Up successfull!</h3>\n              {/* onClick={()=>{props.history.push('/access')}} */}\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/dashboard')}} >Proceed to Dashboard <img src=\"/inclunav/assets/images/vector.png\" alt=\"move next page\" /></button> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","/home/jahnavi/navigation/src/components/feedback/ContactSupport.js",["372","373","374","375","376"],"import React, { useState,useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userRegister,sendOtp } from \"../../store/actions\";\nimport '../styles.css';\n\nexport default function ContactSupport(props) {\n    const [name, setName] = useState('');\n    const [mobileNumber, setMobileNumber] = useState('');\n    const [description,  setDescription] = useState('');\n    // const [otpValue,  setOtp] = useState('');\n    // const [errorMsg,  setErrorMsg] = useState('');\n    // const [lenErr,  setLenErr] = useState(false);\n    // const [capsErr,  setCapsErr] = useState(false);\n    // const [numErr,  setnNumErr] = useState(false);\n    // const [otpStatus,  setOtpStatus] = useState(false);\n    // const signupResponse = useSelector(state => state.userRegister);\n    // const otpResponse = useSelector(state => state.sendOtp);\n    // const dispatch = useDispatch();\n\n  return (\n    <div className=\"landing-height\" style={{height:\"100%\"}}>\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n    <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarToggleExternalContent\"\n                    aria-controls=\"navbarToggleExternalContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                    onClick={() => {\n                      props.history.goBack()\n                    }}\n                  >\n                      <img src=\"/inclunav/assets/images/back_arrow.png\" alt=\"back button\"/>\n                  </button>\n        <div className=\"mx-auto\"> CONTACT SUPPORT </div>\n    </nav>\n    <div className=\"bg-landing  container-fluid d-flex h-100\">\n    <div className=\"text-white row  mx-auto w-100\">\n            <div className=\"col-lg-12 mt-3\">\n        <div className=\"text-center  pl-3 pr-3\" id=\"content\">\n                <h3 className=\"support-content text-justify mx-auto mb-5\" aria-hidden=\"true\">In case of any grievance or to report a problem, please fill up this form and we will contact you within 48 hours.</h3>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control text-white text-input\" id=\"exampleInputEmail1\" placeholder=\"Name\" value={name} onChange = {(e)=>{\n                      setName(e.target.value)\n                      }} />\n                  </div>\n                  <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control text-white text-input\" id=\"exampleInputEmail1\" placeholder=\"Mobile Number\" value={mobileNumber} onChange={(e) => {\n                      const re = /^[0-9\\b]+$/;\n                      if ((e.target.value === '' || re.test(e.target.value))) {\n                         setMobileNumber(e.target.value)\n                      } }} />\n                  </div>\n              <React.Fragment>\n                  <div className=\"form-group\">\n                  <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" placeholder=\"description\" value={description} onChange={(e)=>{setDescription(e.target.value)}} rows=\"3\" ></textarea>\n                </div>\n            </React.Fragment>\n                <button className=\"btn btn-language mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2 mb-2\" >Submit</button> \n              <hr className=\"login-hr\" />\n              <h3 className=\"support-content text-justify mx-auto mb-5\" aria-hidden=\"true\">Alternatively, you can call us for any product related emergency using the CONTACT button.</h3>\n            </div>\n            </div>\n            </div>\n      </div>\n    </div>\n  );\n}","/home/jahnavi/navigation/src/components/authentication/ForgotPass.js",["377"],"import React, { useState,useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { forgotPassword } from \"../../store/actions\";\nimport '../styles.css';\n\nexport default function ForgotPass(props) {\n  const [mobileNumber, setButtonText] = useState('');\n  const [errorMsg,  setErrorMsg] = useState('');\n  const forgotPassResponse = useSelector(state => state.forgotPassword);\n  const dispatch = useDispatch();\n\n  const sendLink = ()=>{\n    if(mobileNumber.length ===0 || mobileNumber.length > 11){\n      setErrorMsg('Invalid Mobile Number.');\n      return\n    }else{\n      dispatch(forgotPassword({mobileNumber,mode:'manual'}))\n    }\n  }\n\n  useEffect(\n    () => {\n        return () => {\n            if(forgotPassResponse !== null){\n                if(forgotPassResponse.success === true){\n                  props.history.push('/check-message')\n                }else{\n                  setErrorMsg('Mobile number or password is incorrect. Please try again.')\n                }\n              }\n          }\n    },\n    [forgotPassResponse]\n  );\n\n  return (\n    <div className=\"landing-height\">\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n    <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarToggleExternalContent\"\n                    aria-controls=\"navbarToggleExternalContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                    onClick={() => {\n                      props.history.goBack()\n                    }}\n                  >\n                      <img src=\"/inclunav/assets/images/back_arrow.png\" alt=\"back button\"/>\n                  </button>\n        <div className=\"mx-auto\"> FORGOT PASSWORD </div>\n    </nav>\n    <div className=\"bg-landing container-fluid  h-100\">\n        <div className=\"text-white row  mx-auto w-100\" >\n          <div className=\"col-lg-12 mt-5\">\n            <div className=\"text-center pl-3 pr-3 mt-5\" id=\"content\">\n                  <p>Please provide your registered mobile number below, and we will send you a link via sms to reset your password.</p>\n                  <div className={errorMsg.length>0?\"form-group\":\"form-group \"} id=\"container\" >\n                    <div class=\"input-group\">\n                    <input type=\"text\" className=\"form-control text-white text-input\" aria-describedby=\"emailHelp\" placeholder=\"Mobile Number\" pattern=\"[0-9]\" value={mobileNumber} onChange={(e) => {\n                     const re = /^[0-9\\b]+$/;\n                     if ((e.target.value === '' || re.test(e.target.value)) && mobileNumber.length <= 10) {\n                        setButtonText(e.target.value)\n                     } }} />\n                    </div>\n                </div>\n                {errorMsg.length > 0?<p className='text-error'>{errorMsg}</p>:null}\n              <button className=\"btn btn-language mx-auto btn-block btn-default btn-lg font-weight-bold h2\" \n              onClick={sendLink}\n              >Send Link  <span class=\"sr-only\">Double tap to continue</span></button> \n              <h3 className=\"forgot-pass mx-auto mt-4 mb-4 h-0\" aria-hidden=\"true\">Forgot Password</h3>\n              <hr className=\"login-hr\" />\n              <div className=\"row d-flex justify-content-center align-items-center mt-0\">\n                    <div className=\"col-6 pr-2\">\n                        <button className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-0 h2\" onClick={()=>{props.history.push('/register')}} >Sign-Up  <span class=\"sr-only\">Double tap to continue</span></button> \n                    </div>\n                    <div className=\"col-6 pl-2\">\n                        <button className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-0 h2\" onClick={()=>{props.history.push('/language-select')}} ><img src=\"/inclunav/assets/images/google.png\" alt=\"Sign Up with google\" /></button> \n                    </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","/home/jahnavi/navigation/src/components/feedback/CheckMessage.js",["378"],"import React, { useState } from 'react';\nimport '../styles.css';\n\nexport default function Registration(props) {\n\n  return (\n    <div className=\"landing-height\">\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n        <div className=\"mx-auto\"> REGISTRATION </div>\n    </nav>\n    <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\n        <div className=\"text-white row w-100\" >\n        <div className=\"col-lg-12 \">\n            <div className=\"text-center\" id=\"content\">\n              <h3 className=\"registration-success mx-auto mb-5\" aria-hidden=\"true\">Check SMS!</h3>\n              <h3 className=\"access-content mx-auto mb-5\" aria-hidden=\"true\">Check SMS! A link has been sent to your registered mobile number. Please follow the instructions on the link to reset your password.</h3>\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/login')}} >Back to Sign In</button> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","/home/jahnavi/navigation/src/components/dashboard/Dashboard.js",[],"/home/jahnavi/navigation/src/components/authentication/ResetPassword.js",["379"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userDetails,resetPassword } from \"../../store/actions\";\nimport '../styles.css';\n\nexport default function ResetPassword(props) {\n  const [name, setName] = useState(\"\");\n  const [mobileNumber, setMobileNumber] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [lenErr, setLenErr] = useState(false);\n  const [capsErr, setCapsErr] = useState(false);\n  const [numErr, setnNumErr] = useState(false);\n  const resetResponse = useSelector(state => state.resetPassword);\n  const getDetails = useSelector(state => state.userDetails);\n  const dispatch = useDispatch();\n\n/**\n * @id N1.2.1\n * @author Pankaj Singh\n * @description  Initial Rendering\n */\nuseEffect(() => {\n  let url = window.location.href;\n  let token = url.split(\"?\")[1].split(\"&&\")[0];\n  let id = url.split(\"?\")[1].split(\"&&\")[1];\n  if (!getDetails) {\n    dispatch(userDetails({ id, token }));\n  }\n  if(getDetails){\n      let name = getDetails.data.name;\n      let mobileNumber = getDetails.data.mobileNumber;\n      setName(name);\n      setMobileNumber(mobileNumber);\n    }\n  return ()=>{\n    if(resetResponse !== null){\n      if(resetResponse.success === true){\n        props.history.push('/login')\n      }else{\n        // setErrorMsg('Mobile number or password is incorrect. Please try again.')\n      }\n    }\n  }\n}, [dispatch,getDetails,resetResponse]);\n/**\n * @id N1.2.2\n * @author Pankaj Singh\n * @description  Compare Password\n*/\n  const comparePassword = event => {\n    if (password === confirmPassword) {\n      setErrorMsg(\"\");\n    } else {\n      setErrorMsg(\"Passwords do not match\");\n    }\n  };\n/**\n * @id N1.2.3\n * @author Pankaj Singh\n * @description  Validate Password\n*/\n  const validatePassword = e => {\n    const numPattern = /[0-9]/;\n    if (numPattern.test(password)) {\n      setnNumErr(false);\n    } else {\n      setnNumErr(true);\n    }\n    const capsPattern = /[A-Z]/;\n    if (capsPattern.test(password)) {\n      setCapsErr(false);\n    } else {\n      setCapsErr(true);\n    }\n\n    if (password.length >= 8) {\n      setLenErr(false);\n    } else {\n      setLenErr(true);\n    }\n  };\n/**\n * @id N1.2.4\n * @author Pankaj Singh\n * @description  pass id,password,token to https://inclunav.apps.iitd.ac.in/node/wayfinding/v1/reset-password\n*/\n  const requestReset = () => {\n    let url = window.location.href;\n    let token = url.split(\"?\")[1].split(\"&&\")[0];\n    let id = url.split(\"?\")[1].split(\"&&\")[1];\n    if (name.length === 0) {\n      setErrorMsg(\"Name is empty\");\n      return;\n    } else if (mobileNumber.length === 0 || mobileNumber.length > 10) {\n      setErrorMsg(\"Mobile number is invalid\");\n      return;\n    } else if (lenErr || numErr || capsErr) {\n      setErrorMsg(\"password invalid\");\n      return;\n    } else {\n      dispatch(resetPassword({ id, password, token }));\n    }\n  };\n\n\n  return (\n    <div className=\"landing-height\">\n      <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n      <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarToggleExternalContent\"\n                    aria-controls=\"navbarToggleExternalContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                    onClick={() => {\n                      props.history.goBack()\n                    }}\n                  >\n                      <img src=\"/inclunav/assets/images/back_arrow.png\" alt=\"back button\"/>\n                  </button>\n        <div className=\"mx-auto\"> SIGNUP </div>\n      </nav>\n      <div className=\"bg-landing  container-fluid  h-100\">\n        <div className=\"text-white row  mx-auto w-100\">\n          <div className=\"col-lg-12 mt-3\">\n\n            <div className=\"text-center  pl-3 pr-3\" id=\"content\">\n              <div className=\"form-group row\">\n                <div className=\"col-5\">\n                  <label htmlFor=\"staticEmail\" className=\"col-form-label\">\n                    Username:\n                  </label>\n                </div>\n                <div className=\"col-7 font-weight-bold\">\n                  <label htmlFor=\"staticEmail\" className=\"col-form-label\">\n                    {name}\n                  </label>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <div className=\"col-5\">\n                  <label htmlFor=\"staticEmail\" className=\"col-form-label\">\n                    Phone No:\n                  </label>\n                </div>\n                <div className=\"col-7 font-weight-bold\">\n                  <label htmlFor=\"staticEmail\" className=\"col-form-label\">\n                    {mobileNumber}\n                  </label>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <input\n                  type=\"password\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={e => {\n                    validatePassword(e);\n                    setPassword(e.target.value);\n                  }}\n                  onBlur={validatePassword}\n                />\n              </div>\n              {password.length > 0 ? (\n                <React.Fragment>\n                  <div className=\"col-12\">\n                    <p className=\"mb-0\">Password must contain:</p>{\" \"}\n                  </div>\n                  <div className=\"col-12 text-center\">\n                  8 characters {lenErr ? (\n                          <img\n                            className=\"img-ml-28\"\n                            src=\"/inclunav/assets/images/subtract.png\"\n                            alt=\"error icon\"\n                          />\n                        ) : (\n                          <img\n                            className=\"img-ml-28\"\n                            src=\"/inclunav/assets/images/success.png\"\n                            alt=\"error icon\"\n                          />\n                        )}\n                  </div>\n                  <div className=\"col-12 text-center\">\n                    1 capital letter\n                      {capsErr ? (\n                        <img\n                            className=\"img-ml-23\"\n                            src=\"/inclunav/assets/images/subtract.png\"\n                            alt=\"error icon\"\n                        />\n                      ) : (\n                        <img\n                            className=\"img-ml-23\"\n                            src=\"/inclunav/assets/images/success.png\"\n                            alt=\"error icon\"\n                        />\n                      )}\n                  </div>\n                  <div className=\"col-12 text-center mb-2\">\n                    1 number\n                      {numErr ? (\n                        <img\n                        className=\"img-ml-37\"\n                          src=\"/inclunav/assets/images/subtract.png\"\n                          alt=\"error icon\"\n                        />\n                      ) : (\n                        <img\n                        className=\"img-ml-37\"\n                          src=\"/inclunav/assets/images/success.png\"\n                          alt=\"error icon\"\n                        />\n                      )}\n                  </div>\n                  \n                </React.Fragment>\n              ) : null}\n              {errorMsg.length > 0 ? (\n              <p className=\"text-danger\">{errorMsg}</p>\n            ) : null}\n              <div className=\"form-group\">\n                <input\n                  type=\"password\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Confirm Password\"\n                  value={confirmPassword}\n                  onChange={e => {\n                    setConfirmPassword(e.target.value);\n                  }}\n                  onBlur={comparePassword}\n                />\n              </div>\n              <button\n                className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\"\n                onClick={requestReset}\n              >\n                Reset Password\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/jahnavi/navigation/src/components/authentication/UserLogin.js",[],"/home/jahnavi/navigation/src/components/authentication/UserRegistration.js",["380","381","382","383","384","385","386","387"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userRegister, sendOtp, verifyOtp,sendEmailotp,verifyEmailotp } from \"../../store/actions\";\nimport \"../styles.css\";\nimport { verify } from \"crypto\";\nimport { connect } from \"react-redux\";\n\nclass UserRegistration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      mobileNumber: \"\",\n      password: \"\",\n      otpValue: \"\",\n      emailOtpValue:\"\",\n      errorMsg: \"\",\n      lenErr: false,\n      capsErr: false,\n      numErr: false,\n      otpStatus: false,\n      verifyStatus: false,\n      email:\"\",\n      emailOtpError:null,\n      mobileOtpError:null,\n      verifyEmailotpResponse:null,\n      verifyMobileotpResponse:null,\n      disableOtp:false,\n      disableMobileOtp:false,\n      regErr:true,\n      comparePassword:\"\"\n    };\n  }\n  setName = val => {\n    this.setState({\n      name: val\n    });\n  };\n  setMobileNumber = val => {\n    this.setState({\n      mobileNumber: val\n    });\n  };\n  setPassword = val => {\n    this.setState({\n      password: val\n    });\n  };\n  setOtp = val => {\n    this.setState({\n      otpValue: val\n    });\n  };\n  setErrorMsg = val => {\n    this.setState({\n      errorMsg: val\n    });\n  };\n  setLenErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setCapsErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setnNumErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setOtpStatus = val => {\n    this.setState({\n      otpStatus: val\n    });\n  };\n  setVerifyStatus = val => {\n    this.setState({\n      otpStatus: val\n    });\n  };\n  requestSignup = ()=>{\n      let {name,email,mobileNumber,lenErr,capsErr,numErr,password,verifyEmailotpResponse,verifyMobileotpResponse} = this.state;\n      // verifyEmailotpResponse,\n      // verifyMobileotpResponse\n    if(name.length === 0){\n      console.log(\"click1\")\n      this.setErrorMsg('Name is empty')\n      return\n    }else if((mobileNumber.length === 0 || mobileNumber.length > 10)){\n      console.log(\"click2\")\n      this.setErrorMsg('Mobile number is invalid')\n      return\n    }else if(lenErr || numErr || capsErr){\n      console.log(\"click3\")\n      this.setErrorMsg('password invalid')\n      return\n    }else if(verifyMobileotpResponse === null || verifyMobileotpResponse === false){\n      console.log(\"click4\")\n      this.setState({\n        mobileOtpError:\"Inavlid Mobile OTP\",\n      })\n      return\n    }else if(verifyEmailotpResponse === null || verifyEmailotpResponse === false){\n      console.log(\"click5\")\n      this.setState({\n        emailOtpError:\"Inavlid email OTP\",\n      })\n      return\n    }else{\n      console.log(\"elsed6\")\n     this.props.userRegister({name,email,mobileNumber,password},()=>{\n      console.log(\"elsed\",this.props.signupResponse)\n        \n      if(this.props.signupResponse !== null){\n                if(this.props.signupResponse.success === true){\n                    this.props.history.push('/success')\n                }else{\n                    this.setErrorMsg('Already registered')\n                }\n            }\n        })\n    }\n  }\n\n  sendOtpRequest = ()=>{\n    let {mobileNumber} = this.state;\n    if(mobileNumber.length === 0 || mobileNumber.length > 10){\n      this.setErrorMsg('Mobile number is invalid')\n      return\n    }else{\n      this.props.sendOtp({mobileNumber},()=>{\n        if(this.props.otpResponse.success === true){\n            this.setOtpStatus(true)\n            this.setState({\n              disableMobileOtp:true\n            },()=>{\n              setTimeout(()=>{ this.setState({\n              disableMobileOtp:false\n              }) }, 30000);\n            })\n          }\n      })\n    }\n  }\n\n  verifyMobilOtp = ()=>{\n    let {mobileNumber,otpValue} = this.state;\n    if(otpValue.length === 0 || otpValue.length > 6){\n      this.setErrorMsg('OTP is invalid')\n      return\n    }else{\n      this.props.verifyOtp({mobileNumber,otp:otpValue},()=>{\n        if(this.props.otpVerifyResponse.success === \"approved\"){\n            this.setState({\n                verifyStatus:true\n            })\n          }\n      })\n    }\n  }\n\n  validatePassword = e =>{\n    const numPattern = /[0-9]/;\n    if (numPattern.test(this.state.password)) {\n      this.setnNumErr(false)\n    } else {\n      this.setnNumErr(true)\n    }\n    const capsPattern = /[A-Z]/;\n    if (capsPattern.test(this.state.password)) {\n      this.setCapsErr(false)\n    } else {\n      this.setCapsErr(true)\n    }\n    if (this.state.password.length >= 8) {\n        this.setLenErr(false)\n    } else {\n      this.setLenErr(true)\n    }\n}\n\n  render() {\n    let {\n      otpStatus,\n      name,\n      email,\n      mobileNumber,\n      password,\n      otpValue,\n      errorMsg,\n      lenErr,\n      capsErr,\n      numErr,\n      verifyStatus,\n      emailOtpValue\n    } = this.state;\n    console.log(\"regerr\",this.state.regErr)\n    return (\n      <div style={{height:\"100%\"}}>\n        <nav className=\"navbar navbar-expand-lg nav-bg text-white fixed-top\" >\n                  <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    aria-label=\"Go back\"\n                    onClick={() => {\n                      this.props.history.goBack()\n                    }}\n                  >\n                      <img src=\"/inclunav/assets/images/back_arrow.png\" alt=\"back button\"/>\n                  </button>\n          <div className=\"mx-auto\"> SIGNUP </div>\n        </nav>\n        <div className=\"bg-landing  container-fluid  h-100\" style={{marginTop:\"50px\"}}>\n          <div className=\"text-white row  mx-auto w-100\">\n            <div className=\"col-lg-12 mt-3\">\n              <div className=\"text-center  pl-3 pr-3\" id=\"content\">\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control text-white text-input\"\n                    id=\"exampleInputEmail1\"\n                    placeholder=\"Name\"\n                    value={name}\n                    onChange={e => {\n                      this.setErrorMsg(\"\");\n                      this.setName(e.target.value);\n                    }}\n                  />\n                </div>\n                {/* EMAIL OTP */}\n                <div className=\"form-group\">\n                  <input\n                    type=\"email\"\n                    className=\"form-control text-white text-input\"\n                    id=\"exampleInputEmail1\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={e => {\n                      this.setErrorMsg(\"\");\n                      this.setState({\n                        email:e.target.value\n                      })\n                    }}\n                  />\n                </div>\n                <button\n                    className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2 mb-2\"\n                    onClick={()=>{\n                      this.props.sendEmailotp({email:this.state.email},()=>{\n                        this.setState({\n                          disableOtp:true\n                        },()=>{\n                          setTimeout(()=>{ this.setState({\n                          disableOtp:false\n                          }) }, 30000);\n                        })\n                      })\n                    }}\n                    disabled={this.state.disableOtp}\n                  >\n                    {this.state.disableOtp?\"Sent\":\"Send OTP\"}\n                </button>\n                  <p className=\"text-white text-justify\">\n                  If you do not receive a code within 30 seconds, please press Send OTP.\n                  </p>\n                  {this.state.emailOtpError?<p className=\"text-white text-justify text-error\">\n                  {this.state.emailOtpError}\n                  </p>:null}\n                    <div className=\"form-group\" id=\"container\" >\n                <div class=\"input-group\">\n                <input\n                        type=\"text\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter 6 digit code\"\n                        value={emailOtpValue}\n                        onChange={e => {\n                          this.setState({\n                            emailOtpValue:e.target.value,\n                            emailOtpError:null,\n                            verifyEmailotpResponse:null\n                          })\n                        }}\n                        onBlur={()=>{\n                          if(this.state.emailOtpValue.length === 6){\n                            this.props.verifyEmailotp({email:this.state.email,otp:this.state.emailOtpValue},()=>{\n                              if(this.props.verifyEmailotpResponse.success === \"approved\"){\n                                this.setState({\n                                    verifyEmailotpResponse:true\n                                })\n                              }else{\n                                this.setState({\n                                  emailOtpError:\"Incorrect Code. Please retry by pressing Send OTP.\",\n                                  verifyEmailotpResponse:false\n                              })\n                              }\n                            })\n                          }\n                        }}\n                      />\n                      {\n                        this.state.verifyEmailotpResponse !==null? <div\n                        className=\"show-pass\"\n                      >\n                        {this.state.verifyEmailotpResponse === true ? (\n                          <img\n                            src=\"/inclunav/assets/images/verification_success.svg\"\n                            alt=\"hide password\"\n                          />\n                        ) : (\n                          <img\n                            src=\"/inclunav/assets/images/verification_failed.svg\"\n                            alt=\"show password\"\n                          />\n                        )}\n                      </div>:null\n                      }\n                </div>\n              </div>\n                {/**************/}\n                {/* MOBILE OTP */}\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control text-white text-input\"\n                    id=\"exampleInputEmail1\"\n                    placeholder=\"Mobile Number\"\n                    value={mobileNumber}\n                    onChange={e => {\n                      this.setErrorMsg(\"\");\n                      const re = /^[0-9\\b]+$/;\n                      if (e.target.value === \"\" || re.test(e.target.value)) {\n                        this.setMobileNumber(e.target.value);\n                      }\n                    }}\n                  />\n                </div>\n                <button\n                    className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2 mb-2\"\n                    onClick={this.sendOtpRequest}\n                    disabled={this.state.disableMobileOtp}\n                  >\n                    {this.state.disableMobileOtp?\"Sent\":\"Send OTP\"}\n                  </button>\n                  <p className=\"text-white text-justify\">\n                  If you do not receive a code within 30 seconds, please press Send OTP.\n                  </p>\n                  {this.state.mobileOtpError?<p className=\"text-white text-justify text-error\">\n                  {this.state.mobileOtpError}\n                  </p>:null}\n                  <div className=\"form-group\" id=\"container\" >\n                <div class=\"input-group\">\n                <input\n                        type=\"text\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter 6 digit code\"\n                        value={otpValue}\n                        onChange={e => {\n                          this.setState({\n                            otpValue:e.target.value,\n                            mobileOtpError:null,\n                            otpVerifyResponse:null\n                          })\n                        }}\n                        onBlur={()=>{\n                          if(this.state.otpValue.length === 6){\n                            this.props.verifyOtp({mobileNumber:this.state.mobileNumber,otp:this.state.otpValue},()=>{\n                              console.log(\"verify response\",this.props.otpVerifyResponse)\n                              if(this.props.otpVerifyResponse.success === \"approved\"){\n                                \n                                this.setState({\n                                    verifyMobileotpResponse:true\n                                })\n                              }else{\n                                this.setState({\n                                  mobileOtpError:\"Incorrect Code. Please retry by pressing Send OTP.\",\n                                  verifyMobileotpResponse:false\n                              })\n                              }\n                            })\n                          }\n                        }}\n                      />\n                      {\n                        this.state.verifyMobileotpResponse !==null? <div\n                        className=\"show-pass\"\n                      >\n                        {this.state.verifyMobileotpResponse === true ? (\n                          <img\n                            src=\"/inclunav/assets/images/verification_success.svg\"\n                            alt=\"hide password\"\n                          />\n                        ) : (\n                          <img\n                            src=\"/inclunav/assets/images/verification_failed.svg\"\n                            alt=\"show password\"\n                          />\n                        )}\n                      </div>:null\n                      }\n                </div>\n              </div>\n              {/***********/}\n                  <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={e => {\n                          this.validatePassword(e);\n                          this.setPassword(e.target.value);\n                        }}\n                        onBlur={this.validatePassword}\n                      />\n                    </div>\n                    {password.length > 0 ? (\n                      <React.Fragment>\n                        <div className=\"col-12\">\n                          <p className=\"mb-0\">Password must contain:</p>{\" \"}\n                        </div>\n                        <div className=\"col-12 text-center\">\n                          8 characters{\" \"}\n                          {lenErr ? (\n                            <img\n                              className=\"img-ml-28\"\n                              src=\"/inclunav/assets/images/subtract.png\"\n                              alt=\"error icon\"\n                            />\n                          ) : (\n                            <img\n                              className=\"img-ml-28\"\n                              src=\"/inclunav/assets/images/success.png\"\n                              alt=\"error icon\"\n                            />\n                          )}\n                        </div>\n                        <div className=\"col-12 text-center\">\n                          1 capital letter\n                          {capsErr ? (\n                            <img\n                              className=\"img-ml-23\"\n                              src=\"/inclunav/assets/images/subtract.png\"\n                              alt=\"error icon\"\n                            />\n                          ) : (\n                            <img\n                              className=\"img-ml-23\"\n                              src=\"/inclunav/assets/images/success.png\"\n                              alt=\"error icon\"\n                            />\n                          )}\n                        </div>\n                        <div className=\"col-12 text-center mb-2\">\n                          1 number\n                          {numErr ? (\n                            <img\n                              className=\"img-ml-37\"\n                              src=\"/inclunav/assets/images/subtract.png\"\n                              alt=\"error icon\"\n                            />\n                          ) : (\n                            <img\n                              className=\"img-ml-37\"\n                              src=\"/inclunav/assets/images/success.png\"\n                              alt=\"error icon\"\n                            />\n                          )}\n                        </div>\n                      </React.Fragment>\n                    ) : null}\n                    <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Confirm Password\"\n                        value={this.state.comparePassword}\n                        onChange={e => {\n                        this.setState({\n                          comparePassword:e.target.value\n                        })\n                        }}\n                        onBlur={()=>{\n                          if(this.state.password !== this.state.comparePassword){\n                            this.setState({\n                              compareErr:true\n                            })\n                          }else{\n                            this.setState({\n                              regErr:false\n                            })\n                          }\n                        }}\n                      />\n                    </div>\n                    {this.state.compareErr?<p className=\"text-white text-justify text-error\">\n                    Passwords do not match.\n                  </p>:null}\n                    <button\n                  className=\"btn btn-language  mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\"\n                  onClick={this.requestSignup}\n                  disabled={this.state.regErr}\n                >\n                  SignUp\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    signupResponse: state.userRegister,\n    otpResponse: state.sendOtp,\n    otpVerifyResponse: state.verifyOtp,\n    sendEmailotpResponse:state.sendEmailotp,\n    verifyEmailotpResponse:state.verifyEmailotp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  userRegister,\n  sendOtp,\n  verifyOtp,\n  sendEmailotp,\n  verifyEmailotp\n})(UserRegistration);","/home/jahnavi/navigation/src/components/feedback/AllowAccess.js",["388"],"import React, { useState } from 'react';\nimport '../styles.css';\n\nexport default function AllowAccess(props) {\n\n  return (\n    <div className=\"landing-height\">\n    <nav className=\"navbar navbar-expand-lg nav-bg text-white\">\n        <div className=\"mx-auto\"> REGISTRATION </div>\n    </nav>\n    <div className=\"bg-landing  container-fluid d-flex justify-content-center align-items-center h-100\">\n        <div className=\"text-white row w-100\" >\n        <div className=\"col-lg-12 \">\n            <div className=\"text-center\" id=\"content\">\n              <h3 className=\"access-content mx-auto mb-5\" aria-hidden=\"true\">This application uses GPS and Bluetooth for navigation and geolocation purposes. Please enable Bluetooth and GPS services to continue using this application.</h3>\n              <button className=\"btn btn-landing mx-auto btn-block btn-default btn-lg font-weight-bold mt-4 h2\" onClick={()=>{props.history.push('/language-select')}} > Enable Bluetooth and GPS </button> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/jahnavi/navigation/src/components/dashboard/global/GlobalView.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501"],"/home/jahnavi/navigation/src/components/dashboard/navigation/Konva.js",["502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606"],"import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport {\n    Map as MapContainer,\n    Marker,\n    Popup,\n    TileLayer,\n  } from \"react-leaflet\";\n  import L from \"leaflet\";\n  import \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\n  import config from \"../../../config\";\n  import { connect } from \"react-redux\";\n  import {\n    floorList,\n    imgDetails,\n    getAllBuildingElements,\n    venueList,\n    buildingList,\n    getGpsLocation,\n    androidNavigation,\n    getUserPortfolio\n  } from \"../../../store/actions/index\";\n  import { Typeahead } from \"react-bootstrap-typeahead\";\n  import \"react-bootstrap-typeahead/css/Typeahead.css\";\n  import \"leaflet-routing-machine\";\n  import \"lrm-graphhopper\";\n  import Instructions from \"./Instructions\";\n  import NavigationDetails from './NavigationDetails';\n  import GlobalDetails from './GlobalDetails';\n  import InstructionTab from './InstructionTab';\n  import SourceMenu from \"./SourceMenu\";\n  import DestinationMenu from \"./DestinationMenu\";\n\nimport { Stage, Layer,Star, Rect, Text } from 'react-konva';\nimport Konva from 'konva';\n\nclass Graph {\n    constructor(noOfVertices) {\n      this.noOfVertices = noOfVertices;\n      this.AdjList = new Map();\n      this.Adjweights = new Map();\n    }\n    addVertex(v) {\n      this.AdjList.set(v, []);\n      this.Adjweights.set(v, []);\n    }\n    hasvertex(v) {\n      return this.AdjList.has(v);\n    }\n    edges(v) {\n      return this.AdjList.get(v);\n    }\n    addEdge(v, w, wt, undir) {\n      if (undir) {\n        this.AdjList.get(v).push(w);\n        this.Adjweights.get(v).push(wt);\n        this.AdjList.get(w).push(v);\n        this.Adjweights.get(w).push(wt);\n      } else {\n        this.AdjList.get(v).push(w);\n        this.Adjweights.get(v).push(wt);\n      }\n    }\n  \n    printGraph() {\n      var get_keys = this.AdjList.keys();\n      for (var i of get_keys) {\n        var get_values = this.AdjList.get(i);\n        var val = this.Adjweights.get(i);\n        var conc = \"\";\n        var conc2 = \"\";\n        for (let j of get_values) {\n          conc = conc + j + \" \";\n        }\n        for (let j of val) {\n          conc2 = conc2 + j + \" \";\n        }\n      }\n    }\n  }\n\n\nclass ColoredRect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          center: { lat: 28.6139, lng: 77.209 },\n          currentPos: { lat: 28.6139, lng: 77.209 },\n          gpsLocation: \"\",\n          buildingAddress: \"\",\n          zoomLevel: \"18\",\n          showStrtMenu: false,\n          showDstMenu: false,\n          //\n          buildingName: \"\",\n          srcName: \"Select Source\",\n          srcfloor: \"none\",\n          dstfloor: \"none\",\n          list: [],\n          dstName: \"Select Destination\",\n          srcVal: null,\n          dstVal: null,\n          scale: 2.4,\n          srcfloorL: null,\n          srcfloorB: null,\n          dstfloorL: null,\n          dstfloorB: null,\n          samefloor: true,\n          canvaslist: [],\n          ind: 0,\n          sideDrawerOpen: false,\n          isLoading: false,\n          sidebarLeft: false,\n          imgName: null,\n          value: \"\",\n          suggestions: [],\n          dstValue: \"\",\n          dstSuggestions: [],\n          venueName: \"\",\n          venueList: [],\n          buildingList: [],\n          buildingView: false,\n          pathCaption: [],\n          pathFloor: [],\n          currentStep: 0,\n          srcReadOnly: false,\n          dstReadOnly: false,\n          currentLocation: \"\",\n          locationList: [],\n          selectedSrcLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n          selectedDstLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n          srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n          dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n          srcFloorList: [],\n          dstFloorList: [],\n          selectedDestination: \"Select Destination\",\n          dstAddress: \"Select Destination\",\n          canvasWidth: null,\n          canvasHeight: null,\n          tmpSrcLocation: {},\n          tmpDstLocation: {},\n          floorAngle: 0,\n          pathAngle:0,\n          next: true,\n          showDirections: false,\n          pathArray: [],\n          srtdInstruction: [],\n          srtdFlr: [],\n          toggle: false,\n          osmRoutes: null,\n          globalDistance: 0,\n          globalTime: 0,\n          showInstructions: false,\n          zoom:false,\n          language:'en',\n          visionType:'vision',\n          height:'<5ft',\n          ageGroup:'adult',\n          walkingType:'walk',\n          pause:false,\n          firstFlrInstruction:[],\n          secondFlrInstruction:[],\n          firstFlr:'',\n          secondFlr:'',\n          currentFloor:'',\n          instructionReady:false,\n          color: 'green',\n          pathPoints:[]\n\n        };\n        this.shortestPathVar = [];\n        this.grids_all = [];\n        this.grids = [];\n        this.visited = [];\n        this.shortestpath = [];\n        this.minimumcost = [];\n        this.leaves = [];\n        this.graph = null;\n        this.flrconn = [];\n        this.num_floors = 0;\n        this.animateRef = false;\n        this.instructions = [];\n        this.show = 0;\n        this.actualAngle = 0;\n        this.croppedRegion = {};\n      }\n    \n      componentDidMount() {\n        // if (window.navigator.geolocation) {\n        //   navigator.geolocation.getCurrentPosition(success => {\n          let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n            let coordinates = [success.coords.latitude, success.coords.longitude];\n            this.props.getGpsLocation(\n              { lat: success.coords.latitude, lng: success.coords.longitude },\n              () => {\n                this.getUserDetails()\n                var cvWidth = Math.max(\n                  document.getElementById(\"myCanvassrc\").clientWidth,\n                  window.innerWidth || 0\n                );\n                var cvHeight = Math.max(\n                  document.getElementById(\"myCanvassrc\").clientHeight,\n                  window.innerHeight || 0\n                );\n    \n                var srcBar = document.getElementById(\"src-bar\");\n                var navHeight = document.getElementById(\"nav-height\");\n                var element = document.getElementById(\"myCanvassrc\");\n                var topPos = element.getBoundingClientRect().top;\n                let realHeight =\n                  cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    \n                this.setState(\n                  {\n                    // currentLocation: this.props.gpsLocation.display_name,\n                    currentLocation: \"IIT Delhi\",\n                    canvasWidth: cvWidth,\n                    canvasHeight: realHeight,\n                    center: {\n                      lat: success.coords.latitude,\n                      lng: success.coords.longitude\n                    },\n                    currentPos: {\n                      lat: success.coords.latitude,\n                      lng: success.coords.longitude\n                    }\n                  },\n                  () => {\n                    const map = this.leafletMap.leafletElement;\n                    let lat = success.coords.latitude;\n                    let lng = success.coords.longitude;\n                    map.flyTo(\n                      new L.LatLng(\n                        success.coords.latitude,\n                        success.coords.longitude\n                      ),\n                      map.getZoom(),\n                      {\n                        animate: true,\n                        duration: 0.5\n                      }\n                    );\n                  }\n                );\n              }\n            );\n            this.getVenueList(coordinates);\n        //   });\n        // } else {\n        //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n        // }\n      }\n    \n      getUserDetails = ()=>{\n        let id = localStorage.getItem('id');\n          let token = localStorage.getItem('token');\n          this.props.getUserPortfolio({id,token},()=>{\n            // console.log(\"user profile\",this.props.userProfile)\n            if(this.props.userProfile.success === false){\n              localStorage.clear();\n              this.props.history.push('/')\n            }else{\n              let data = this.props.userProfile.properties\n              this.setState({\n                language:data.language,\n                visionType:data.visionType,\n                height:data.height,\n                ageGroup:data.ageGroup,\n                walkingType:data.navigationMode\n              })          \n            }\n          })\n      }\n    \n      fetchLocation = (venueName, buildingName, point) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          let flrListData = this.props.flrList.data;\n          let prevData = this.state.center;\n          this.setState(\n            {\n              center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n              currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n              [point]: {\n                venueName,\n                buildingName,\n                lat: flrListData[0].lat,\n                lng: flrListData[0].lng,\n                floorAngle:parseInt(flrListData[0].buildingOrientation)\n              }\n            },\n            () => {\n              this.props.getAllBuildingElements(data, () => {\n                const map = this.leafletMap.leafletElement;\n                map.flyTo(\n                  new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n                  map.getZoom(),\n                  {\n                    animate: true,\n                    duration: 0.5\n                  }\n                );\n                let nodes = this.props.navigationInfo;\n                let lists = [];\n                for (let i = 0; i < nodes.length; i++) {\n                  var sel = nodes[i].properties;\n                  lists.push(sel);\n                }\n    \n                const uniqueLists = Array.from(\n                  new Set(\n                    lists.map(o => {\n                      if (o.floorElement === \"Rooms\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"FloorConnection\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"Services\") {\n                        return o.coordinates;\n                      } else if (o.floorElement === \"RestRooms\") {\n                        return o.coordinates;\n                      } else {\n                        // return o.coordinates\n                      }\n                    })\n                  )\n                ).map(id => {\n                  return lists.find(a => a.coordinates === id);\n                });\n                let freeBeacon = uniqueLists.map(r=>{\n                  if(r.floorElement === \"Services\"){\n                    if(r.type === \"Beacons\" ){\n                      return null\n                    }else{\n                      return r\n                    }\n                  }else{\n                    return r\n                  } \n                })\n    \n                let freeData = freeBeacon.filter( (el)=> {\n                  return el != null;\n                });\n                freeData.sort((a, b)=> {\n                  if(a.floorElement === \"Rooms\"){\n                    if(a.roomName !== undefined){\n                      return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n                    }else{\n                      return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n                    }\n                  }else{\n                    return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n                  }\n                });\n                if (point === \"srcBuildingLocation\") {\n                  this.setState({\n                    srcFloorList: freeData\n                  });\n                } else if (point === \"dstBuildingLocation\") {\n                  let me = this;\n                  let srcLat = this.state.srcBuildingLocation.lat;\n                  let srcLng = this.state.srcBuildingLocation.lng;\n                  if (!srcLat && !srcLng){\n                    srcLat = prevData.lat;\n                    srcLng = prevData.lng;\n                  }\n    \n                  map.fitBounds(\n                    L.latLngBounds(\n                      L.latLng(srcLat, srcLng),\n                      L.latLng(flrListData[0].lat, flrListData[0].lng)\n                    )\n                  );\n                  this.setState({\n                    dstFloorList: freeData,\n                    zoomLevel: \"10\"\n                  });\n                }\n              });\n            }\n          );\n        });\n      };\n    \n      getVenueList = (coordinates = null) => {\n        this.props.venueList(() => {\n          this.setState(\n            {\n              venueList: this.props.vnList.data\n            },\n            () => {\n              this.findNearVenue(coordinates);\n            }\n          );\n        });\n      };\n    \n      findNearVenue = coordinates => {\n        let { venueList } = this.state;\n        let distList = venueList.map(r => {\n          return this.getDistance(coordinates, r);\n        });\n        let arr = [];\n        let list = this.state.venueList.map((r, i) => {\n          if (r.buildingList) {\n            let dt = r.buildingList.map(k => {\n              arr.push({\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              });\n              return {\n                venueName: r.venueName,\n                buildingName: k,\n                venueDistance: distList[i].distance\n              };\n            });\n            return dt;\n          } else {\n            arr.push({\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            });\n            return {\n              venueName: r.venueName,\n              buildingName: \"\",\n              venueDistance: distList[i].distance\n            };\n          }\n        });\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n          if (tmp > highest) highest = tmp;\n        }\n        let listArr = this.state.locationList.map(r => {\n          let k = distList.map(d => {\n            if (d.venueName === r.venueName) {\n              return { r, distance: d.distance };\n            }\n          });\n        });\n        let sortedArr = this.quickSort(arr);\n        if (lowest < 1) {\n          this.setState(\n            {\n              currentVenue: nearLocation,\n              locationList: arr\n            },\n            () => {\n              this.getBuildingList(nearLocation.venueName, coordinates);\n            }\n          );\n        } else {\n          this.setState({\n            currentVenue: {\n              address: \"\",\n              coordinates: [],\n              dateCreated: \"\",\n              distance: 2,\n              id: 35,\n              liveStatus: true,\n              organization: \"\",\n              venueName: \"\"\n            },\n            selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n            locationList: arr,\n            currentBuilding: {\n              address: \"\",\n              buildingName: \"\",\n              coordinates: [],\n              distance: 2,\n              lat: 0,\n              lng: 0\n            }\n          });\n        }\n      };\n    \n      quickSort = arr => {\n        if (arr.length < 2) {\n          return arr;\n        }\n        let pivot = arr[0];\n        let lesserVal = [];\n        let greaterVal = [];\n        for (let k = 0; k < arr.length; k++) {\n          if (arr[k].venueDistance < pivot.venueDistance) {\n            lesserVal.push(arr[k]);\n          } else {\n            greaterVal.push(arr[k]);\n          }\n        }\n      };\n    \n      getBuildingList = (venueName, coordinates) => {\n        this.props.buildingList({ venueName: venueName }, () => {\n          this.setState(\n            {\n              buildingList: this.props.bldList.data\n            },\n            () => {\n              if (this.state.buildingList.length > 0) {\n                this.findNearBuilding(coordinates);\n              } else {\n                this.setState({\n                  selectedLocation: { venueName: venueName, buildingName: \"\" }\n                });\n              }\n            }\n          );\n        });\n      };\n    \n      findNearBuilding = coordinates => {\n        let { buildingList } = this.state;\n        let distList = buildingList.map(r => {\n          let p = [r.lat, r.lng];\n          r.coordinates = p;\n          return this.getDistance(coordinates, r);\n        });\n        var lowest = Number.POSITIVE_INFINITY;\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        let nearLocation;\n        for (var i = distList.length - 1; i >= 0; i--) {\n          tmp = distList[i].distance;\n          if (tmp < lowest) {\n            nearLocation = distList[i];\n            lowest = tmp;\n          }\n          if (tmp > highest) highest = tmp;\n        }\n        if (lowest < 50) {\n          this.setState(\n            {\n              currentBuilding: nearLocation,\n              selectedLocation: {\n                venueName: this.state.currentVenue.venueName,\n                buildingName: nearLocation.buildingName\n              }\n            },\n            () => {\n              this.setNavigation(this.state.selectedLocation);\n              this.fetchLocation(\n                this.state.selectedLocation.venueName,\n                this.state.selectedLocation.buildingName\n              );\n            }\n          );\n        }\n      };\n    \n      rad = function(x) {\n        return (x * Math.PI) / 180;\n      };\n    \n      getDistance = function(p1, p2) {\n        var R = 6378137; // Earth’s mean radius in meter\n        var dLat = this.rad(p2.coordinates[0] - p1[0]);\n        var dLong = this.rad(p2.coordinates[1] - p1[1]);\n        var a =\n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.cos(this.rad(p1[0])) *\n            Math.cos(this.rad(p2.coordinates[0])) *\n            Math.sin(dLong / 2) *\n            Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = (R * c) / 1000;\n        p2.distance = d;\n        return p2; // returns the distance in km\n      };\n    \n      setNavigation = data => {\n                                        // this.props.androidNavigation(data, () => {\n                                    // })\n        this.grids_all = [];\n        this.props.getAllBuildingElements(data, () => {\n          let nodes = this.props.navigationInfo;\n          let lists = [];\n          let num_vert = 0;\n          let fc = new Map();\n          for (let i = 0; i < nodes.length; i++) {\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\n              num_vert++;\n              var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              if (fc.has(v) === false) {\n                fc.set(v, [val]);\n              } else {\n                fc.get(v).push(val);\n              }\n            }\n          }\n          this.graph = new Graph(num_vert + 2);\n          for (let i = 0; i < nodes.length; i++) {\n            var sel = nodes[i].properties;\n            lists.push(sel);\n            if (nodes[i].properties.floorElement === \"FloorConnection\") {\n              var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.graph.addVertex(val);\n            }\n    \n            if (nodes[i].properties.floorElement === \"Floor\") {\n              if (nodes[i].properties.length == 8) {\n                var v = nodes[i].properties.frConn[0].split(\",\");\n                var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n                var len = v.length / 2;\n                if (v.length % 2 === 0) {\n                  for (var j = 0; j < v.length; j = j + 2) {\n                    var val =\n                      parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                      parseInt(v[j]);\n                    var vert1 = nodes[i].properties.floor + \",\" + val;\n                    for (var k = j + 2; k < v.length; k = k + 2) {\n                      val =\n                        parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                        parseInt(v[k]);\n                      var vert2 = nodes[i].properties.floor + \",\" + val;\n                      this.graph.addEdge(\n                        vert1,\n                        vert2,\n                        flrmatrix[len * (j / 2) + k / 2],\n                        true\n                      );\n                    }\n                  }\n                } else {\n                }\n              }\n              this.grids_all.push(nodes[i]);\n            }\n          }\n    \n          let getKeys = fc.keys();\n    \n          for (let i of getKeys) {\n            var get_values = fc.get(i);\n            var cnt = 0;\n            var prev = null;\n            for (var j of get_values) {\n              if (cnt > 0) {\n                this.graph.addEdge(prev, j, 0, true);\n                prev = j;\n              }\n              if (cnt === 0) {\n                prev = j;\n              }\n              cnt++;\n            }\n          }\n          // if(this.state.srcfloor === this.state.dstfloor){\n    \n          this.setState({\n            // canvasWidth: cvWidth,\n            // canvasHeight: height_of_canvas,\n            list: lists\n          });\n          // }\n        });\n      };\n    \n      toggle = (type, value) => event => {\n        this.setState(state => {\n          return {\n            [type]: value\n          };\n        });\n      };\n    \n      findFloor = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (array[i].type) {\n              if (array[i].geomtery.type === \"Polygon\") {\n                if (array[i].properties.floor === key) {\n                  return i;\n                }\n              }\n            }\n            if (array[i].floor === key) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n    \n        let { scale } = this.state;\n    \n        if(color === \"red\"){\n          let srcDiv = document.getElementById(\"srcImage\");\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n          context.fillStyle = color;\n          // context.fillRect(pos_x, pos_y, scale, scale);  \n          context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n        }else if(color === \"yellow\"){\n          let lift = document.getElementById(\"lift\");\n          let stairs = document.getElementById(\"stairs\");\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n          \n          let gpx,gpy;\n    \n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n    \n          var rot = (Math.PI / 2) * 3;\n          var x = pos_x;\n          var y = pos_y;\n          var step = Math.PI / 5;\n          let frConnType = \"\";\n          let data = this.props.navigationInfo.map(r => {\n            return r.properties;\n          });\n          for (let k = 0; k < data.length; k++) {\n            if (data[k].node === i) {\n              frConnType = data[k].type;\n            }\n          }\n          if (frConnType === \"Stairs\") {\n            var half_scale = scale / 2;\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n          } else if (frConnType === \"Lift\") {\n            var half_scale = scale / 2;\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n          }\n           \n        }else if(color === \"green\"){\n          let dstDiv = document.getElementById(\"dstImage\");\n          let { scale } = this.state;\n          let canvas = document.getElementById(canvasid);\n          let context = canvas.getContext(\"2d\");\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          let pos_x = gpx * (i % srcfloorL);\n          let pos_y = gpy * parseInt(i / srcfloorL);\n          context.fillStyle = color;\n          // context.fillRect(pos_x, pos_y, scale, scale);  \n          context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n        }\n      };\n    \n      \n      color_canvas = (i, place, color) => {\n        let srcDiv = document.getElementById(\"srcImage\");\n        let dstDiv = document.getElementById(\"dstImage\");\n        if (place === \"srcmap\") {\n          let { srcfloorL, scale } = this.state;\n          var canvas = document.getElementById(\"myCanvassrc\");\n          var context = canvas.getContext(\"2d\");\n          // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n          // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n    \n          var wrh = this.state.srcfloorL / this.state.srcfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n    \n          let gpx = newWidth / this.state.srcfloorL;\n          let gpy = newHeight / this.state.srcfloorB;\n    \n          var posX = gpx * (i % srcfloorL);\n          var posY = gpy * parseInt(i / srcfloorL);\n          var halfScale = scale / 2;\n          posX = posX + halfScale;\n          posY = posY + halfScale;\n          if (color === \"green\") {\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.globalAlpha = 1;\n            context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n          }else if(color === \"#bdbdbd\"){\n            let { dstfloorL, scale } = this.state;\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.fillStyle = color;\n            context.globalAlpha = 1;\n            context.fillRect(posX, posY, scale, scale);  \n          } else {\n            var half_scale = scale / 2;\n            posX = posX + half_scale;\n            posY = posY + half_scale;\n            context.globalAlpha = 1;\n            context.drawImage(srcDiv, posX-9,posY, 15, 15);\n          }\n        } else {\n          let { dstfloorL, scale } = this.state;\n          let canvas = document.getElementById(\"myCanvasdst\");\n          let context = canvas.getContext(\"2d\");\n          let posX = scale * (i % dstfloorL);\n          let posY = scale * parseInt(i / dstfloorL);\n          context.fillStyle = color;\n          context.fillRect(posX, posY, scale, scale);\n        }\n      };\n    \n      find = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (parseInt(array[i].node) === key) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      find_fl = (key, array) => {\n        if (array !== undefined) {\n          for (let i = 0; i < array.length; i++) {\n            if (\n              parseInt(array[i].node) === key &&\n              array[i].floor == \"floorconnection\"\n            ) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    \n      handleSubmit = () => {\n        let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n        if (srcVal != null && dstVal != null) {\n          var divimg = document.getElementById(\"mydiv1\");\n          var divcan = document.getElementById(\"mydiv\");\n          var len = divimg.childNodes.length;\n          for (var i = 0; i < len; i++) {\n            var elem = divimg.childNodes[0].remove();\n          }\n    \n          len = divcan.childNodes.length;\n          for (var i = 0; i < len; i++) {\n            var elem = divcan.childNodes[0].remove();\n          }\n    \n          if (srcfloor === dstfloor) {\n            var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n            let ratio = cvWidth / dstfloorL;\n            let height_of_canvas = ratio * dstfloorB;\n            let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n    \n            this.setState({\n              samefloor: true,\n              scale:factor\n            });\n            \n            var img1 = new Image();\n            var img = document.getElementById(\"myImage\");\n            img1.src = img.src;\n            img1.hidden = true;\n            var color_canvas = this.color_canvas;\n            var me = this;\n            var dest_x = this.state.dstVal % this.state.dstfloorL;\n            var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n            let imgDiv = document.getElementById(\"myImage\");\n            this.imgDiv = imgDiv;\n            let angle = 0;\n    \n      // status of the pointer(s)\n      let pointerangle;\n    \n            var canvas = window.d3.select(\"canvas\").call(\n                window.d3\n                  .zoom()\n                  .scaleExtent([1, 8])\n                  .on(\"zoom\", zoom)\n              ),\n              context = canvas.node().getContext(\"2d\"),\n              width = canvas.property(\"width\"),\n              height = canvas.property(\"height\");\n            var active = window.d3.select(null);\n            var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n            var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n            function zoom() {\n              me.setState(\n                {\n                  animation: false,\n                  // pathCaption: [],\n                  pathFloor: [],\n                  pathArray: [],\n                  currentStep: 0,\n                  zoom: true\n                },\n                () => {\n                  var transform = window.d3.event.transform;\n                  context.save();\n                  context.clearRect(0, 0, width, height);\n                  context.translate(transform.x, transform.y);\n                  context.scale(transform.k, transform.k);\n                  draw();\n                  context.restore();\n                }\n              );\n            }\n            function draw() {\n              if (active.node() === this) return reset();\n              active.classed(\"active\", false);\n              active = window.d3.select(this).classed(\"active\", true);\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              context.rotate(angle);\n              context.globalAlpha = 0.2;\n              context.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              // me.loadNonwalkable(\"myCanvassrc\")\n              me.callwhile(\n                me.state.srcfloor,\n                me.state.srcVal,\n                me.state.srcfloorL,\n                me.state.srcfloorB,\n                dest_x,\n                dest_y,\n                true,\n                \"myCanvassrc\"\n              );\n              color_canvas(srcVal, \"srcmap\", \"red\");\n              color_canvas(dstVal, \"srcmap\", \"green\");\n            }\n    \n            function reset() {\n              active.classed(\"active\", false);\n              active = window.d3.select(null);\n              canvas\n                .transition()\n                .duration(750)\n                .call(zoom1.transform, initialTransform);\n            }\n            function timer(ms) {\n              return new Promise(res => setTimeout(res, ms));\n            }\n    \n            function zoomTo() {\n              let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n              let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              let gpx = newWidth / me.state.srcfloorL;\n              let gpy = newHeight / me.state.srcfloorB;\n              let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n              //Zoomed\n              let distX =\n                width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n              let distY =\n                height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n              var transform = window.d3.zoomIdentity.translate(distX, distY);\n              // .scale(1.2)\n              // .translate(-4*X,-4*Y)\n              canvas\n                .transition()\n                .duration(750)\n                .call(zoom1.transform, transform);\n            }\n            img1.onload = function() {\n              draw();\n              zoomTo();\n            };\n          } else {\n            this.setState({\n              samefloor: false,\n              buildingView:true\n            });\n            this.findpath();\n          }\n        } else {\n        }\n      };\n    \n      loadNonwalkable = () => {\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n        let navInfo = this.props.androidNav;\n        let floorData = navInfo.filter(r=>{\n          return r.floor === srcfloor\n        })\n        let polygons = floorData[0].properties.clickedPoints;\n        for (let i = 0; i < polygons.length; i++) {\n          let nodes = polygons[i].split(\",\");\n          var start = nodes[0];\n          for (let j = 1; j < nodes.length; j++) {\n            this.oldpath(start, nodes[j]);\n            this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n            start = nodes[j];\n          }\n          this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n        }\n      }\n    \n      loadMultiFloorNonwalkable = (id) => {\n        let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n        let navInfo = this.props.androidNav;\n        let floorData\n    \n        if(id ===\" canvas0\"){\n          floorData = navInfo.filter(r=>{\n            return r.floor === srcfloor\n          })\n        }else{\n          floorData = navInfo.filter(r=>{\n            return r.floor === dstfloor\n          })\n        }\n    \n        let polygons = floorData[0].properties.clickedPoints;\n        for (let i = 0; i < polygons.length; i++) {\n          let nodes = polygons[i].split(\",\");\n          var start = nodes[0];\n          for (let j = 1; j < nodes.length; j++) {\n            this.oldpathMulti(start, nodes[j],id);\n            // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n            start = nodes[j];\n          }\n          // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n        }\n      }\n    \n      oldpath = (x, y) => {\n        // x = coord_val  y=coord_val in normal\n        var a, b, c, d, e, f, g;\n        let { dstfloorL } = this.state;\n    \n        a = parseInt(x / dstfloorL);\n        b = x % dstfloorL;\n    \n        c = parseInt(y / dstfloorL);\n        d = y % dstfloorL;\n    \n        e = Math.floor((a + c) / 2);\n        f = Math.floor((b + d) / 2);\n        if ((e === a) & (f === b)) {\n          g = dstfloorL * c + b;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n        } else if ((e === c) & (f === d)) {\n          g = dstfloorL * a + d;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n        } else {\n          g = dstfloorL * e + f;\n          this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n          this.oldpath(g, x);\n          this.oldpath(g, y);\n        }\n      };\n    \n      color = (i,color,canvasid)=>{\n          let posX,posY,gpx,gpy\n          if(canvasid === \"canvas0\"){\n            let wrh = this.state.srcfloorL / this.state.srcfloorB;\n            let newWidth = this.state.canvasWidth;\n            let newHeight = newWidth / wrh;\n            if (newHeight > this.state.canvasHeight) {\n              newHeight = this.state.canvasHeight;\n              newWidth = newHeight * wrh;\n            }\n      \n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;\n      \n            posX = gpx * (i % this.state.srcfloorL);\n            posY = gpy * parseInt(i / this.state.srcfloorL);\n          }else{\n            let wrh = this.state.dstfloorL / this.state.dstfloorB;\n            let newWidth = this.state.canvasWidth;\n            let newHeight = newWidth / wrh;\n            if (newHeight > this.state.canvasHeight) {\n              newHeight = this.state.canvasHeight;\n              newWidth = newHeight * wrh;\n            }\n      \n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n      \n            posX = gpx * (i % this.state.srcfloorL);\n            posY = gpy * parseInt(i / this.state.srcfloorL);\n          }\n    \n          let canvas1 = document.getElementById(canvasid);\n          let context1 = canvas1.getContext(\"2d\");\n          context1.fillStyle = color;\n          context1.fillRect(posX, posY, 5, 5);  \n      }\n    \n      oldpathMulti = (x, y,id) => {\n        var a, b, c, d, e, f, g;\n        let { dstfloorL } = this.state;\n    \n        a = parseInt(x / dstfloorL);\n        b = x % dstfloorL;\n    \n        c = parseInt(y / dstfloorL);\n        d = y % dstfloorL;\n    \n        e = Math.floor((a + c) / 2);\n        f = Math.floor((b + d) / 2);\n        if ((e === a) & (f === b)) {\n          g = dstfloorL * c + b;\n          this.color(g,\"#bdbdbd\",id);\n        } else if ((e === c) & (f === d)) {\n          g = dstfloorL * a + d;\n          this.color(g,\"#bdbdbd\",id);\n        } else {\n          g = dstfloorL * e + f;\n          this.color(g,\"#bdbdbd\",id);\n          this.oldpathMulti(g, x,id);\n          this.oldpathMulti(g, y,id);\n        }\n      };\n    \n      findpath() {\n        var srcvert =\n          this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n        var dstvert =\n          this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n        if (this.graph.hasvertex(srcvert)) {\n        } else {\n          this.graph.addVertex(srcvert);\n          let nodes = this.props.navigationInfo;\n          this.flrconn = [];\n          for (var i = 0; i < nodes.length; i++) {\n            if (\n              nodes[i].properties.floor == this.state.srcfloor &&\n              nodes[i].properties.floorElement === \"FloorConnection\"\n            ) {\n              var coord = nodes[i].properties.coordinates.split(\",\");\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.flrconn.push([coord[0], coord[1], vert]);\n            }\n          }\n          this.callwhile(\n            this.state.srcfloor,\n            this.state.srcVal,\n            this.state.srcfloorL,\n            this.state.srcfloorB,\n            null,\n            null,\n            false,\n            null\n          );\n        }\n    \n        if (this.graph.hasvertex(dstvert)) {\n        } else {\n          this.graph.addVertex(dstvert);\n          let nodes = this.props.navigationInfo;\n          this.flrconn = [];\n          for (var i = 0; i < nodes.length; i++) {\n            if (\n              nodes[i].properties.floor === this.state.dstfloor &&\n              nodes[i].properties.floorElement == \"FloorConnection\"\n            ) {\n              var coord = nodes[i].properties.coordinates.split(\",\");\n              var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n              this.flrconn.push([coord[0], coord[1], vert]);\n            }\n          }\n          this.callwhile(\n            this.state.dstfloor,\n            this.state.dstVal,\n            this.state.dstfloorL,\n            this.state.dstfloorB,\n            null,\n            null,\n            false,\n            null\n          );\n        }\n        this.specialcallwhile(\n          this.state.srcfloor,\n          srcvert,\n          this.state.dstfloor,\n          dstvert\n        );\n      }\n    \n      specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n        var min = Number.MAX_VALUE;\n        var minleave = null;\n        var var_i;\n        var notthere;\n        let shortestpath = new Map();\n        let visited = new Map();\n        let minimumcost = new Map();\n        let leaves = [];\n        var get_keys = this.graph.AdjList.keys();\n        for (var i of get_keys) {\n          minimumcost.set(i, min);\n          visited.set(i, false);\n        }\n    \n        leaves.push(srcvert);\n        shortestpath.set(srcvert, [srcvert]);\n        minimumcost.set(srcvert, 0);\n        this.graph.printGraph();\n        while (leaves.length > 0) {\n          min = Number.MAX_VALUE;\n          for (let i = 0; i < leaves.length; i++) {\n            if (min > minimumcost.get(leaves[i])) {\n              min = minimumcost.get(leaves[i]);\n              minleave = leaves[i];\n              var_i = i;\n            }\n          }\n          visited.set(minleave, true);\n    \n          if (minleave === dstvert) {\n            // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n            break;\n          }\n          leaves.splice(var_i, 1);\n          var get_values = this.graph.AdjList.get(minleave);\n          var get_dist = this.graph.Adjweights.get(minleave);\n          for (var jj = 0; jj < get_values.length; jj++) {\n            var j = get_values[jj];\n            var l = j.split(\",\");\n    \n            var neighbour = false;\n            if (l.length == 2) {\n              neighbour = true;\n            } else if (l.length == 3) {\n              if (j == dstvert) {\n                neighbour = true;\n              }\n            }\n            if (visited.get(j) == false && neighbour) {\n              if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n                minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n                var dum = [];\n                dum = shortestpath.get(minleave);\n                dum = dum.concat([j]);\n                shortestpath.set(j, dum);\n                notthere = 1;\n                for (var p = 0; p < leaves.length; p++) {\n                  if (leaves[p] == j) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  leaves.push(j);\n                }\n              }\n            }\n          }\n        }\n        this.createcanvas(shortestpath.get(dstvert), false);\n      }\n      createcanvas(list, samefloor) {\n        if (samefloor === false) {\n          let ans = new Map();\n          for (var i = 0; i < list.length; i++) {\n            var e = list[i].split(\",\");\n    \n            if (ans.has(e[0])) {\n              ans.get(e[0]).push(e[1]);\n            } else {\n              ans.set(e[0], [e[1]]);\n            }\n          }\n          var get_keys = ans.keys();\n          let clist = [];\n          let floorLlist = [];\n          var cnt = 0;\n          for (var i of get_keys) {\n            var ind1 = this.findFloor(i, this.props.flrList);\n            var ind = this.findFloor(i, this.grids_all);\n            floorLlist.push(this.grids_all[ind].properties.length);\n            clist.push({\n              id: cnt,\n              scale: 10,\n              floorL: this.grids_all[ind].properties.length,\n              floorB: this.grids_all[ind].properties.breadth,\n              fileName: this.grids_all[ind].properties.fileName,\n              floor: this.grids_all[ind].properties.floor\n            });\n            cnt++;\n          }\n          this.setState({\n            canvaslist: clist\n          });\n          this.callimage(0, ans, cnt, clist, floorLlist);\n        }\n      }\n    \n      callmark(ans, floorLlist) {\n        var get_keys = ans.keys();\n        var cnt = 0;\n        for (var i of get_keys) {\n          var canvasid = \"canvas\" + cnt;\n          var get_val = ans.get(i);\n          for (var j of get_val) {\n            this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n          }\n          cnt++;\n        }\n      }\n    \n      callimage(cnt, ans, count, clist, floorLlist) {\n        let floorList = [this.state.srcfloor, this.state.dstfloor];\n        for (let jj = 0; jj < floorList.length; jj++) {\n          for (let ii = 0; ii < clist.length; ii++) {\n            if (floorList[jj] === clist[ii].floor) {\n              let i = clist[ii].floor;\n              let ind = this.findFloor(i, this.props.fList);\n              let ratio = this.state.canvasWidth / clist[ii].floorL;\n              let height_of_canvas = ratio * clist[ii].floorB;\n              let dsp;\n              if (clist[ii].floor === this.state.dstfloor) {\n                dsp = \"none\";\n              } else {\n                dsp = \"block\";\n              }\n              let canvas = window.d3\n                .select(\"#mydiv\")\n                .append(\"canvas\")\n                .attr(\"id\", \"canvas\" + ii)\n                .attr(\"style\", `border:1px solid;display:${dsp};`)\n                .attr(\"width\", this.state.canvasWidth)\n                .attr(\"height\", this.state.canvasHeight)\n                .call(\n                  window.d3\n                    .zoom()\n                    .scaleExtent([1, 8])\n                    .on(\"zoom\", multiCanvasZoom)\n                );\n    \n              let width = canvas.property(\"width\");\n              let height = canvas.property(\"height\");\n              let active = window.d3.select(null);\n              let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n              let initialTransform = window.d3.zoomIdentity\n                .translate(0, 0)\n                .scale(1);\n              let ctx = canvas.node().getContext(\"2d\");\n              let div = document.getElementById(\"mydiv1\");\n              let img1 = new Image();\n              img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n    \n              img1.hidden = true;\n              div.appendChild(img1);\n              let me = this;\n              let get_val = ans.get(i);\n              let loaded = false;\n              img1.onload = function() {\n                multiCanvas();\n                zoomTo()\n              };\n    \n              function multiCanvasZoom() {\n                me.setState(\n                  {\n                    zoom: true,\n                    // pathCaption: []\n                  },\n                  () => {\n                    var transform = window.d3.event.transform;\n                    ctx.save();\n                    ctx.clearRect(0, 0, width, height);\n                    ctx.translate(transform.x, transform.y);\n                    ctx.scale(transform.k, transform.k);\n                    loaded = false;\n                    multiCanvas();\n                    ctx.restore();\n                  }\n                );\n              }\n    \n              function multiCanvas() {\n                if (loaded === false) {\n                  var wrh = me.state.dstfloorL / me.state.dstfloorB;\n                  var newWidth = width;\n                  var newHeight = newWidth / wrh;\n                  if (newHeight > height) {\n                    newHeight = height;\n                    newWidth = newHeight * wrh;\n                  }\n                  ctx.globalAlpha = 0.2;\n    \n                  ctx.drawImage(\n                    img1,\n                    0,\n                    0,\n                    img1.width,\n                    img1.height,\n                    0,\n                    0,\n                    newWidth,\n                    newHeight\n                  );\n                  var id = \"canvas\" + ii;\n                  // me.loadMultiFloorNonwalkable(id)\n                  var index = me.findFloor(i, me.grids_all);\n                  var m = parseInt(me.grids_all[index].properties.length);\n                  var n = parseInt(me.grids_all[index].properties.breadth);\n                  for (var j = 0; j < get_val.length - 1; j++) {\n                    var dest_x = get_val[j + 1] % m;\n                    var dest_y = parseInt(get_val[j + 1] / m);\n                    me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n                  }\n                  var node_count = 0;\n                  for (var j of get_val) {\n                    if (ii === count - 1) {\n                      if (node_count === get_val.length - 1) {\n                        me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                      } else {\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                      }\n                    } else {\n                      if (node_count === 0 && ii === 0) {\n                        me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                      } else {\n                        me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                      }\n                    }\n                    node_count++;\n                  }\n                  loaded = true;\n                }\n              }\n    \n              function zoomTo() {\n                let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n                let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n                var wrh = me.state.dstfloorL / me.state.dstfloorB;\n                var newWidth = width;\n                var newHeight = newWidth / wrh;\n                if (newHeight > height) {\n                  newHeight = height;\n                  newWidth = newHeight * wrh;\n                }\n                let gpx = newWidth / me.state.srcfloorL;\n                let gpy = newHeight / me.state.srcfloorB;\n                let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n                //Zoomed\n                let distX =\n                  width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n                let distY =\n                  height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n                var transform = window.d3.zoomIdentity.translate(distX, distY);\n                // .scale(1.2)\n                // .translate(-4*X,-4*Y)\n                canvas\n                  .transition()\n                  .duration(750)\n                  .call(zoom1.transform, transform);\n              }\n            }\n          }\n        }\n      }\n    \n      callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n        var min = Number.MAX_VALUE;\n        var minleave = [];\n        var var_i;\n        var notthere;\n        for (let i = 0; i < m; i++) {\n          var row = [],\n            row1 = [],\n            row3 = [],\n            row4 = [];\n          for (let j = 0; j < n; j++) {\n            row.push(1);\n            row1.push(-1);\n            row3.push(Number.MAX_VALUE);\n            var row5 = [];\n            row4.push(row5);\n          }\n          this.shortestpath.push(row4);\n          this.grids.push(row);\n          this.visited.push(row1);\n          this.minimumcost.push(row3);\n        }\n        var ind1 = this.findFloor(srcfloor, this.grids_all);\n        if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n          for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n            var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n            for (let j = 0; j < nodes.length; j++) {\n              var val = nodes[j];\n              var x = val % m;\n              var y = parseInt(val / m);\n              this.grids[x][y] = 0;\n            }\n          }\n        }\n        var src_x = srcVal % m;\n        var src_y = parseInt(srcVal / m);\n        this.leaves.push([src_x, src_y]);\n        this.shortestpath[src_x][src_y].push([src_x, src_y]);\n        this.minimumcost[src_x][src_y] = 0;\n    \n        while (this.leaves.length > 0) {\n          min = Number.MAX_VALUE;\n          for (let i = 0; i < this.leaves.length; i++) {\n            if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n              min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n              minleave = this.leaves[i];\n              var_i = i;\n            }\n          }\n          this.visited[minleave[0]][minleave[1]] = 1;\n          if (single == true) {\n            if (minleave[0] == dest_x && minleave[1] == dest_y) {\n              break;\n            }\n          } else {\n            var check = true;\n            for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n              if (\n                this.visited[parseInt(this.flrconn[ch][0])][\n                  parseInt(this.flrconn[ch][1])\n                ] == 1\n              ) {\n              } else {\n                check = false;\n              }\n            }\n            if (check == true) {\n              for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n                var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n                this.graph.addEdge(\n                  vert,\n                  this.flrconn[ch][2],\n                  this.minimumcost[parseInt(this.flrconn[ch][0])][\n                    parseInt(this.flrconn[ch][1])\n                  ],\n                  true\n                );\n              }\n              this.reset_var();\n              break;\n            }\n          }\n          this.leaves.splice(var_i, 1);\n          for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n            for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n              if (j >= 0 && j < m && k >= 0 && k < n) {\n                if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n                  if (\n                    this.minimumcost[j][k] >\n                    this.minimumcost[minleave[0]][minleave[1]] +\n                      Math.sqrt(\n                        (minleave[0] - j) * (minleave[0] - j) +\n                          (minleave[1] - k) * (minleave[1] - k)\n                      )\n                  ) {\n                    this.minimumcost[j][k] =\n                      this.minimumcost[minleave[0]][minleave[1]] +\n                      Math.sqrt(\n                        (minleave[0] - j) * (minleave[0] - j) +\n                          (minleave[1] - k) * (minleave[1] - k)\n                      );\n                    this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                      minleave[1]\n                    ].concat([[j, k]]);\n                    notthere = 1;\n                    for (var p = 0; p < this.leaves.length; p++) {\n                      if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                        notthere = 0;\n                      }\n                    }\n                    if (notthere == 1) {\n                      this.leaves.push([j, k]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (single == true) {\n          let { scale } = this.state;\n    \n          var wrh = this.state.dstfloorL / this.state.dstfloorB;\n          var newWidth = this.state.canvasWidth;\n          var newHeight = newWidth / wrh;\n          if (newHeight > this.state.canvasHeight) {\n            newHeight = this.state.canvasHeight;\n            newWidth = newHeight * wrh;\n          }\n          let gpx,gpy;\n          if(canvasid === \"canvas0\"){\n            gpx = newWidth / this.state.srcfloorL;\n            gpy = newHeight / this.state.srcfloorB;  \n          }else{\n            gpx = newWidth / this.state.dstfloorL;\n            gpy = newHeight / this.state.dstfloorB;\n          }\n    \n          var canvas = document.getElementById(canvasid);\n          var context = canvas.getContext(\"2d\");\n    \n          if (canvas !== null) {\n            var context = canvas.getContext(\"2d\");\n          }\n    \n          let sp = this.shortestpath[dest_x][dest_y];\n    \n          let mypoints = sp.map(r => {\n            return { x: r[0], y: r[1] };\n          });\n          var refinedpaths = this.simplifyPath(mypoints, 2);\n          let allElements = this.props.navigationInfo;\n          let allNodes = [];\n          for (let i = 0; i < allElements.length; i++) {\n            allNodes.push(allElements[i].properties);\n          }\n          // if (\n          //   this.state.srcBuildingLocation.venueName ===\n          //     this.state.dstBuildingLocation.venueName &&\n          //   this.state.srcBuildingLocation.buildingName ===\n          //     this.state.dstBuildingLocation.buildingName\n          // ) {\n    \n            // if (this.state.zoom === false) {\n              if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n                this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n              }else{\n                this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n              }\n            // }\n            // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n          // } else if (this.state.dstBuildingLocation) {\n          //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n          // }\n          \n          var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n            return { x: row[0], index: i };\n          });\n          var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n            return { y: row[1], index: i };\n          });\n          let minRowX = rowX.reduce((prev, current) =>\n            prev.x < current.x ? prev : current\n          );\n          let maxRowX = rowX.reduce((prev, current) =>\n            prev.x > current.x ? prev : current\n          );\n          let minRowY = rowY.reduce((prev, current) =>\n            prev.y < current.y ? prev : current\n          );\n          let maxRowY = rowY.reduce((prev, current) =>\n            prev.y > current.y ? prev : current\n          );\n    \n          this.croppedRegion = {\n            minX: [minRowX.x, rowY[minRowX.index].y],\n            maxX: [maxRowX.x, rowY[maxRowX.index].y],\n            minY: [rowX[minRowY.index].x, minRowY.y],\n            maxY: [rowX[maxRowY.index].x, maxRowY.y]\n          };\n          // var max = Math.max.apply(null, maxRow);\n          this.setState({\n            pathPoints:this.shortestpath[dest_x][dest_y]\n          })    \n          for (var i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n            context.globalAlpha = 1;\n            context.beginPath();\n            var half_scale = scale / 2;\n            var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n            var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n            pos_x = pos_x + half_scale;\n            pos_y = pos_y + half_scale;\n            context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n            context.fill();\n            context.fillStyle = \"#2d9cdb\";\n            context.strokeStyle = \"#2d9cdb\";\n            context.stroke();\n          }\n          this.reset_var();\n        }\n      }\n    \n      interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n        let resultpath = [];\n        if (turningPointsPath.length === 1) {\n          resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n          return resultpath;\n        }\n        for (let i = 0; i < turningPointsPath.length - 1; i++) {\n          let points = this.interpolatePoints(\n            turningPointsPath[i],\n            turningPointsPath[i + 1],\n            seperationGap,\n            gpx,\n            gpy\n          );\n          for (let k = 0; k < points.length; k++) {\n            resultpath.push(points[k]);\n          }\n          // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n        }\n        return resultpath;\n      };\n    \n      interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n        let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n        let result = [];\n        result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n        let counter = seperationGap;\n        while (counter < d) {\n          let x = p1.x + (counter / d) * (p2.x - p1.x);\n          let y = p1.y + (counter / d) * (p2.y - p1.y);\n          result.push({ x: parseInt(x), y: parseInt(y) });\n          counter += 1 * seperationGap;\n        }\n        return result;\n      }\n    \n      simplifyPath = (points, tolerance) => {\n        // helper classes\n        var Vector = function(x, y) {\n          this.x = x;\n          this.y = y;\n        };\n        var Line = function(p1, p2) {\n          this.p1 = p1;\n          this.p2 = p2;\n          this.distanceToPoint = function(point) {\n            // slope\n            var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n              // y offset\n              b = this.p1.y - m * this.p1.x,\n              d = [];\n            // distance to the linear equation\n            d.push(\n              Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n            );\n            // distance to p1\n            d.push(\n              Math.sqrt(\n                Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n              )\n            );\n            // distance to p2\n            d.push(\n              Math.sqrt(\n                Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n              )\n            );\n            // return the smallest distance\n            return d.sort(function(a, b) {\n              return a - b; //causes an array to be sorted numerically and ascending\n            })[0];\n          };\n        };\n    \n        var douglasPeucker = function(points, tolerance) {\n          if (points.length <= 2) {\n            return [points[0]];\n          }\n          var returnPoints = [],\n            // make line from start to end\n            line = new Line(points[0], points[points.length - 1]),\n            // find the largest distance from intermediate poitns to this line\n            maxDistance = 0,\n            maxDistanceIndex = 0,\n            p;\n          for (var i = 1; i <= points.length - 2; i++) {\n            var distance = line.distanceToPoint(points[i]);\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxDistanceIndex = i;\n            }\n          }\n          // check if the max distance is greater than our tollerance allows\n          if (maxDistance >= tolerance) {\n            p = points[maxDistanceIndex];\n            line.distanceToPoint(p, true);\n            // include this point in the output\n            returnPoints = returnPoints.concat(\n              douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n            );\n            // returnPoints.push( points[maxDistanceIndex] );\n            returnPoints = returnPoints.concat(\n              douglasPeucker(\n                points.slice(maxDistanceIndex, points.length),\n                tolerance\n              )\n            );\n          } else {\n            // ditching this point\n            p = points[maxDistanceIndex];\n            line.distanceToPoint(p, true);\n            returnPoints = [points[0]];\n          }\n          return returnPoints;\n        };\n        var arr = douglasPeucker(points, tolerance);\n        // always have to push the very last point on so it doesn't get left off\n        arr.push(points[points.length - 1]);\n        return arr;\n      };\n    \n      find_angle = (p0, p1, c) => {\n        var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n        var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n        return (\n          (Math.atan2(\n            cp1.y * p0c.x - cp1.x * p0c.y,\n            p0c.x * cp1.x + p0c.y * cp1.y\n          ) *\n            180) /\n          Math.PI\n        );\n      };\n    \n      //Module for finding the direction's equivalent commands\n    \n      findDirectionword = angle => {\n        if (angle >= 75 && angle <= 105) return \"Turn Right\";\n    \n        if (angle <= -75 && angle >= -105) return \"Turn Left\";\n    \n        if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n          return \"Go Straight\";\n        if (angle < 0) {\n          if (Math.round((360 + angle) / 30) === 9) {\n            return \"Turn Left\";\n          }\n          return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n        }\n    \n        if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n        return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n      };\n    \n      // find the error component in the iteration and leaves it for the next iteration\n      findErrorInAngle = angle => {\n        if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n        return angle - Math.round(angle / 30) * 30;\n      };\n      //same as above but in abbreviated form\n    \n      findDirectionAbbreviation = angle => {\n        if (angle > 0) return \"Right\";\n    \n        return \"Left\";\n      };\n    \n      findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n        //length of refined and non refined paths\n        var nRefined = refinedPoints.length;\n        var nNonRefined = nonRefinedPoints.length;\n        //converting the mapElements to ordered map for ease of access\n        var ElementMap = new Map();\n        var includedSet = new Set();\n        var word;\n        //for iteration purpose\n        var currentNRPoint = 0;\n        var currentRPoint = 0;\n        var flagList = [];\n        var i = 0;\n        var j = 0;\n        //radius defines what range to cover in a path\n        var radius = 3;\n    \n        //adding the elements to map\n        for (i = 0; i < mapElements.length; i++) {\n          let props = mapElements[i].properties;\n          if (props.floorElement === \"Rooms\") {\n            if (\n              props.floor === floor &&\n              props.roomName !== \"undefined\" &&\n              props.coordinates !== undefined\n            ){\n              Object.keys(props).map(id => {\n                if(id === 'roomName'){\n                  props[`name`] = [...props[id]].join('');\n                  delete props[id];  \n                }\n              });\n    \n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n            }\n          } else if (props.floorElement === \"FloorConnection\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            ){\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n            }\n          } else if (props.floorElement === \"Services\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            )\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          } else if (props.floorElement === \"RestRooms\") {\n            if (\n              props.floor === floor &&\n              props.name !== \"undefined\" &&\n              props.coordinates !== undefined\n            )\n              ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n          } else {\n          }\n        }\n        //finding the indices of the\n        while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n          if (\n            nonRefinedPoints[currentNRPoint][0] ===\n              refinedPoints[currentRPoint].x &&\n            nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n          ) {\n            flagList.push(currentNRPoint);\n            currentRPoint++;\n          }\n          currentNRPoint++;\n        }\n    \n        // Generating the direction and elaborated results\n        var DirectionResults = [];\n        var ElaboratedResults = [];\n    \n        //entry point insertion to the list\n        DirectionResults.push(\n          \"You are at \" +\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n              .name\n        );\n        ElaboratedResults.push(\n          \"You are at \" +\n            ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n              .name\n        );\n        includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n        includedSet.add(\n          refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n        );\n        //iterate and /finding the desired results\n        var error = 0;\n        for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n          var angle = 0;\n          var coordinates;\n          // this.actualAngle = 155\n          if (currentRPoint === 0) {\n            angle = this.find_angle(\n              {\n                x: refinedPoints[currentRPoint].x,\n                y: refinedPoints[currentRPoint].y + 1\n              },\n              refinedPoints[currentRPoint + 1],\n              refinedPoints[currentRPoint]\n            );\n            let path_angle = angle;\n            let floorangle = this.state.floorAngle;\n            let diff = 360 - floorangle;\n            // let CurrentDirection = 60;\n            let CurrentDirection = this.actualAngle;\n            // rotateDirection\n            this.setState({\n              pathAngle:path_angle\n            })\n    \n            let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n    \n            angle = gn;\n\n          } else\n            angle = this.find_angle(\n              refinedPoints[currentRPoint - 1],\n              refinedPoints[currentRPoint + 1],\n              refinedPoints[currentRPoint]\n            );\n          angle = angle + error;\n    \n          error = this.findErrorInAngle(angle);\n          if (currentRPoint == nRefined - 2) {\n            word = this.findDirectionword(angle);\n            DirectionResults.push(word);\n            DirectionResults.push(\n              \"Move \" +\n                Math.round(\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n                ) +\n                \" steps forward\"\n            );\n            ElaboratedResults.push(word);\n            ElaboratedResults.push(\n              \"Move \" +\n                Math.round(\n                  0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n                ) +\n                \" steps forward\"\n            );\n            DirectionResults.push(\n              \"You are about to reach:\" +\n                ElementMap.get(\n                  refinedPoints[nRefined - 1].x +\n                    \"@\" +\n                    refinedPoints[nRefined - 1].y\n                ).name +\n                \" on your \" +\n                this.findDirectionAbbreviation(angle)\n            );\n            ElaboratedResults.push(\n              \"You are about to reach:\" +\n                ElementMap.get(\n                  refinedPoints[nRefined - 1].x +\n                    \"@\" +\n                    refinedPoints[nRefined - 1].y\n                ).name +\n                \" on your \" +\n                this.findDirectionAbbreviation(angle)\n            );\n            break;\n          }\n          word = this.findDirectionword(angle);\n          DirectionResults.push(word);\n          DirectionResults.push(\n            \"Move \" +\n              Math.round(\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n              ) +\n              \" steps forward\"\n          );\n          ElaboratedResults.push(word);\n          ElaboratedResults.push(\n            \"Move \" +\n              Math.round(\n                0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n              ) +\n              \" steps forward\"\n          );\n    \n          //this part of code handles the intermediate importatnt rooms\n          var begin = flagList[currentRPoint] + 1;\n          var end = flagList[currentRPoint + 1];\n    \n          while (begin < end) {\n            var currpoint = nonRefinedPoints[begin];\n            for (\n              i = Math.max(0, currpoint[0] - radius);\n              i < currpoint[0] + radius;\n              i++\n            ) {\n              for (\n                j = Math.max(0, currpoint[1] - radius);\n                j < currpoint[1] + radius;\n                j++\n              ) {\n                if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n                  var tempAngle = this.find_angle(\n                    {\n                      x: nonRefinedPoints[begin - 1][0],\n                      y: nonRefinedPoints[begin - 1][1]\n                    },\n                    { x: i, y: j },\n                    { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n                  );\n                  ElaboratedResults.push(\n                    ElementMap.get(i + \"@\" + j).roomName +\n                      \" on your \" +\n                      this.findDirectionAbbreviation(tempAngle)\n                  );\n                  includedSet.add(i + \"@\" + j);\n                }\n              }\n            }\n            begin++;\n          }\n        }\n    \n        DirectionResults.push(\n          \"You will reach \" +\n            ElementMap.get(\n              \"\" +\n                refinedPoints[nRefined - 1].x +\n                \"@\" +\n                refinedPoints[nRefined - 1].y\n            ).name\n        );\n        // \"You have reached \" +\n        //   ElementMap.get(\n        //     \"\" +\n        //       refinedPoints[nRefined - 1].x +\n        //       \"@\" +\n        //       refinedPoints[nRefined - 1].y\n        //   ).roomName\n    \n        ElaboratedResults.push(\n          \"You have reached \" +\n            ElementMap.get(\n              \"\" +\n                refinedPoints[nRefined - 1].x +\n                \"@\" +\n                refinedPoints[nRefined - 1].y\n            ).name\n        );\n        let resultMap = DirectionResults.map(r => {\n          return { instruction: r, floor: floor };\n        });\n        resultMap.forEach(element => {\n          this.setState(prevState => ({\n            pathFloor: [...prevState.pathFloor, element]\n          }));\n        });\n        let step = DirectionResults[0];\n        if(this.state.srcfloor === this.state.dstfloor){\n          if(this.state.zoom === false){\n          this.setState(\n            prevState => ({\n              pathArray: [...prevState.pathArray, DirectionResults],\n              srtdFlr: [...prevState.srtdFlr, floor],\n              instructionReady:true\n    \n            }),\n            () => {\n              let flrArry = [this.state.srcfloor, this.state.dstfloor];\n              if (this.state.pathArray.length === 2) {\n                for (let k = 0; k < flrArry.length; k++) {\n                  if (this.state.srtdFlr[k] === flrArry[k]) {\n                    const merge3 = this.state.pathArray.flat(1);\n                    this.setState({\n                      pathCaption: merge3\n                    });\n                  }\n                }\n              } else {\n                for (let k = 0; k < DirectionResults.length; k++) {\n                  this.setState(prevState => ({\n                    pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n                  }));\n                }\n              }\n            }\n          );\n        }\n    \n        }else{\n            if(this.state.srcfloor === floor){\n              this.setState({\n                firstFlrInstruction:DirectionResults,\n                firstFlr:floor,\n                currentFloor:floor,\n                // instructionReady:true\n              })\n            }else{\n              this.setState({\n                secondFlrInstruction:DirectionResults,\n                secondFlr:floor,\n                instructionReady:true\n              })\n            }\n        }\n          \n      };\n    \n      calculatePath = (path_angle, diff, CurrentDirection) => {\n        let pathGN, rotateDirection, path_angleN;\n        if (path_angle >= 0 && path_angle < 106) {\n          pathGN = 360 - (diff - path_angle);\n          rotateDirection = pathGN - CurrentDirection;\n        } else if (path_angle > 105 && path_angle <= 180) {\n          pathGN = path_angle - diff;\n          rotateDirection = pathGN - CurrentDirection;\n        } else if (path_angle <= -1 && path_angle >= -180) {\n          path_angleN = 180 + path_angle;\n          pathGN = path_angleN + 180 - diff;\n          rotateDirection = pathGN - CurrentDirection;\n        }\n        return rotateDirection;\n      };\n    \n      reset_var() {\n        this.grids = [];\n        this.visited = [];\n        this.shortestpath = [];\n        this.minimumcost = [];\n        this.leaves = [];\n      }\n    \n      /* NAVIGATION DRAWER */\n      drawerToggleClickHandler = () => {\n        this.setState(prevState => {\n          return { sideDrawerOpen: !prevState.sideDrawerOpen };\n        });\n      };\n    \n      backdropClickHandler = () => {\n        this.setState({ sideDrawerOpen: false });\n      };\n      incCanvas = () => {\n        let { scale } = this.state;\n        if (scale < 30) {\n          this.setState(\n            {\n              scale: scale + 1\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n      decCanvas = () => {\n        let { scale } = this.state;\n        if (scale > 2) {\n          this.setState(\n            {\n              scale: scale - 1\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n    \n      handleDstChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        if (e.length > 0) {\n          for (let i = 0; i < navInfo.length; i++) {\n            if (e[0].floorElement === \"Rooms\") {\n              resp = `${e[0].roomName}(${e[0].floor})`;\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.roomName;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n            } else if (e[0].floorElement === \"FloorConnection\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.name;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].name}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"Services\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.type;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].type}(${e[0].floor})`;\n            } else if (e[0].floorElement === \"RestRooms\") {\n              if (e[0].node === navInfo[i].properties.node) {\n                name = navInfo[i].properties.type;\n                floor = navInfo[i].properties.floor;\n                val = navInfo[i].properties.node;\n              }\n              resp = `${e[0].type} Washroom (${e[0].floor})`;\n            } else {\n            }\n          }\n          var ind = this.findFloor(floor, this.props.flrList.data);\n          this.setState(\n            {\n              dstName: name,\n              dstfloor: floor,\n              dstVal: parseInt(val),\n              dstfloorL: this.props.flrList.data[ind].floorL,\n              dstfloorB: this.props.flrList.data[ind].floorB,\n              imgName: this.props.flrList.data[ind].fileName,\n              buildingView: true,\n              showDstMenu: false,\n              dstReadOnly: true,\n              pathCaption: [],\n              selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`\n            },\n            () => {\n              this.handleSubmit();\n            }\n          );\n        }\n      };\n    \n      dstChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e.floorElement === \"Rooms\") {\n            resp = `${e.roomName}(${e.floor})`;\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e.floorElement === \"FloorConnection\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.name}(${e.floor})`;\n          } else if (e.floorElement === \"Services\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type}(${e.floor})`;\n          } else if (e.floorElement === \"RestRooms\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type} Washroom (${e.floor})`;\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            dstName: name,\n            dstfloor: floor,\n            dstVal: parseInt(val),\n            dstfloorL: this.props.flrList.data[ind].floorL,\n            dstfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName\n          },\n          () => {\n            this.handleSubmit();\n          }\n        );\n      };\n    \n      handleSrcChange = e => {\n        let { srcBuildingLocation } = this.state;\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            resp = `${e[0].roomName}(${e[0].floor})`;\n            if (e[0].node === navInfo[i].properties.node) {\n    \n              name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].name}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].type}(${e[0].floor})`;\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e[0].type} Washroom (${e[0].floor})`;\n          } else {\n          }\n        }\n    \n        var ind = this.findFloor(floor, this.props.flrList.data);\n    \n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName,\n            showStrtMenu: false,\n            srcReadOnly: true,\n            zoomLevel: \"18\",\n            pathCaption: [],\n            currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`\n          },\n          () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(\n                this.props.flrList.data[0].lat,\n                this.props.flrList.data[0].lng\n              ),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 2\n              }\n            );\n            console.log(\"called\")\n            // setTimeout(() => {\n              this.handleSubmit();\n            // }, \"2000\");\n          }\n        );\n      };\n    \n      srcChange = e => {\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e.floorElement === \"Rooms\") {\n            resp = `${e.roomName}(${e.floor})`;\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e.floorElement === \"FloorConnection\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.name}(${e.floor})`;\n          } else if (e.floorElement === \"Services\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n            resp = `${e.type}(${e.floor})`;\n          } else if (e.floorElement === \"RestRooms\") {\n            if (e.node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = navInfo[i].properties.floor;\n              val = navInfo[i].properties.node;\n            }\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName\n          },\n          () => {\n            this.handleSubmit();\n          }\n        );\n      };\n    \n      onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          suggestions: this.getSuggestions(value)\n        });\n      };\n    \n      onDstSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          dstSuggestions: this.getDstSuggestions(value)\n        });\n      };\n      // Autosuggest will call this function every time you need to clear suggestions.\n      onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n    \n      onDstSuggestionsClearRequested = () => {\n        this.setState({\n          dstSuggestions: []\n        });\n      };\n    \n      getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n        return inputLength === 0\n          ? []\n          : this.state.list.filter(lang => {\n              let resp = \"\";\n              if (lang.floorElement === \"Rooms\") {\n                resp = `${lang.roomName}(${lang.floor})`;\n              } else if (lang.floorElement === \"FloorConnection\") {\n                resp = `${lang.name}(${lang.floor})`;\n              } else if (lang.floorElement === \"Services\") {\n                resp = `${lang.type}(${lang.floor})`;\n              } else if (lang.floorElement === \"RestRooms\") {\n                resp = `${lang.type} Washroom (${lang.floor})`;\n              } else {\n              }\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\n            });\n      };\n    \n      getDstSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n        return inputLength === 0\n          ? []\n          : this.state.list.filter(lang => {\n              let resp = \"\";\n              if (lang.floorElement === \"Rooms\") {\n                resp = `${lang.roomName}(${lang.floor})`;\n              } else if (lang.floorElement === \"FloorConnection\") {\n                resp = `${lang.name}(${lang.floor})`;\n              } else if (lang.floorElement === \"Services\") {\n                resp = `${lang.type}(${lang.floor})`;\n              } else if (lang.floorElement === \"RestRooms\") {\n                resp = `${lang.type} Washroom (${lang.floor})`;\n              } else {\n              }\n              return resp.toLowerCase().slice(0, inputLength) === inputValue;\n            });\n      };\n    \n      getSuggestionValue = suggestion => {\n        this.srcChange(suggestion);\n        if (suggestion.floorElement === \"Rooms\") {\n          return suggestion.roomName;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          return suggestion.name;\n        } else if (suggestion.floorElement === \"Services\") {\n          return suggestion.type;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          return suggestion.type;\n        } else {\n        }\n      };\n    \n      getDstSuggestionValue = suggestion => {\n        this.dstChange(suggestion);\n        if (suggestion.floorElement === \"Rooms\") {\n          return suggestion.roomName;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          return suggestion.name;\n        } else if (suggestion.floorElement === \"Services\") {\n          return suggestion.type;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          return suggestion.type;\n        } else {\n        }\n      };\n    \n      renderSuggestion = suggestion => {\n        let resp = \"\";\n        if (suggestion.floorElement === \"Rooms\") {\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          resp = `${suggestion.name}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"Services\") {\n          resp = `${suggestion.type}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n        } else {\n        }\n        return <div style={{ color: \"white\" }}>{resp}</div>;\n      };\n    \n      renderDstSuggestion = suggestion => {\n        let resp = \"\";\n        if (suggestion.floorElement === \"Rooms\") {\n          resp = `${suggestion.roomName}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"FloorConnection\") {\n          resp = `${suggestion.name}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"Services\") {\n          resp = `${suggestion.type}(${suggestion.floor})`;\n        } else if (suggestion.floorElement === \"RestRooms\") {\n          resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n        } else {\n        }\n        return <div style={{ color: \"white\" }}>{resp}</div>;\n      };\n    \n      onChange = (event, { newValue }) => {\n        this.setState({\n          value: newValue\n        });\n      };\n    \n      onSrcChange = (event, { newValue }) => {\n        this.setState({\n          dstValue: newValue\n        });\n      };\n    \n      nvgtSrcBld = () => {\n        let { tmpSrcLocation } = this.state;\n        let e = [tmpSrcLocation];\n        this.fetchSrcBldLocation(\n          e,\n          tmpSrcLocation.venueName,\n          tmpSrcLocation.buildingName,\n          \"srcBuildingLocation\",\n          k => {\n            this.handleDstChange(k);\n          }\n        );\n      };\n    \n      nvgtDstBld = () => {\n        let { tmpDstLocation } = this.state;\n        let e = [tmpDstLocation];\n        this.fetchDstBldLocation(\n          e,\n          tmpDstLocation.venueName,\n          tmpDstLocation.buildingName,\n          \"dstBuildingLocation\",\n          k => {\n            this.handleDstChange(e);\n          }\n        );\n      };\n    \n      fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          this.props.getAllBuildingElements(data, () => {\n            let navInfo = this.props.navigationInfo;\n            for (let i = 0; i < navInfo.length; i++) {\n              if (\n                navInfo[i].properties.floorElement === \"Rooms\" &&\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n              ) {\n                this.srcBldDstPointChange(e, () => {\n                  let k = [navInfo[i].properties];\n                  this.setNavigation(this.state.selectedSrcLocation);\n                  cb(k);\n                });\n              }\n            }\n          });\n        });\n      };\n    \n      fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n        let data = { venueName, buildingName };\n        this.props.floorList(data, () => {\n          this.props.getAllBuildingElements(data, () => {\n            let navInfo = this.props.navigationInfo;\n            for (let i = 0; i < navInfo.length; i++) {\n              if (\n                navInfo[i].properties.floorElement === \"Rooms\" &&\n                navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n              ) {\n                let props = [navInfo[i].properties];\n                this.srcBldDstPointChange(props, () => {\n                  let k = [navInfo[i].properties];\n                  this.setNavigation(this.state.selectedSrcLocation);\n                  cb(k);\n                });\n              }\n            }\n          });\n        });\n      };\n    \n      srcBldDstPointChange = (e, cb) => {\n        let { srcBuildingLocation } = this.state;\n        let name = null;\n        let val = null;\n        let floor = null;\n        let resp = \"\";\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (e[0].floorElement === \"Rooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.roomName;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"FloorConnection\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.name;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"Services\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else if (e[0].floorElement === \"RestRooms\") {\n            if (e[0].node === navInfo[i].properties.node) {\n              name = navInfo[i].properties.type;\n              floor = e[0].floor;\n              val = navInfo[i].properties.node;\n            }\n          } else {\n          }\n        }\n        var ind = this.findFloor(floor, this.props.flrList.data);\n        this.setState(\n          {\n            srcName: name,\n            srcfloor: floor,\n            srcVal: parseInt(val),\n            srcfloorL: this.props.flrList.data[ind].floorL,\n            srcfloorB: this.props.flrList.data[ind].floorB,\n            imgName: this.props.flrList.data[ind].fileName,\n            showStrtMenu: false,\n            srcReadOnly: true,\n            zoomLevel: \"18\"\n          },\n          () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(\n                this.props.flrList.data[0].lat,\n                this.props.flrList.data[0].lng\n              ),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 2\n              }\n            );\n            setTimeout(() => {\n              this.handleSubmit();\n            }, \"2000\");\n          }\n        );\n        cb();\n      };\n    \n      navigateNext = () => {\n        let div = document.getElementById(\"mydiv\").children;\n        div[0].style.display = \"none\";\n        div[1].style.display = \"block\";\n        this.setState({\n          next: false,\n          currentFloor: this.state.dstfloor\n        });\n      };\n    \n      navigatePrevious = () => {\n        let div = document.getElementById(\"mydiv\").children;\n        div[1].style.display = \"none\";\n        div[0].style.display = \"block\";\n        this.setState({\n          next: true,\n          currentFloor: this.state.srcfloor\n        });\n      };\n    \n      handleBuildingView = () => {\n        this.setState({\n          showInstructions: false,\n        });\n      };\n    \n      previousButton() {\n        let currentStep = this.state.currentStep;\n        if (currentStep !== 0) {\n          return (\n            <button\n              className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\n              type=\"button\"\n              onClick={this._prev}\n            >\n              Previous\n            </button>\n          );\n        }\n        return null;\n      }\n    \n      nextButton() {\n        let currentStep = this.state.currentStep;\n        if (currentStep < this.state.pathCaption.length) {\n          this._next();\n        }\n        return null;\n      }\n    \n      _next = () => {\n        let currentStep = this.state.currentStep;\n        currentStep =\n          currentStep >= this.state.pathCaption.length - 1\n            ? this.state.pathCaption.length\n            : currentStep + 1;\n        if (this.state.pathCaption[currentStep]) {\n          let step = this.state.pathCaption[currentStep];\n          var utter = new window.SpeechSynthesisUtterance(step);\n          let lang = localStorage.getItem(\"Language\");\n          if (lang === \"Hindi\") {\n            utter.lang = \"hi-IN\";\n          } else {\n            utter.lang = \"en-US\";\n          }\n          window.speechSynthesis.cancel();\n          window.speechSynthesis.speak(utter);\n        }\n        if (\n          this.state.pathFloor[currentStep] !== undefined &&\n          this.state.pathFloor[currentStep].floor !==\n            this.state.pathFloor[currentStep - 1].floor\n        ) {\n          this.navigateNext();\n        }\n    \n        this.setState({\n          currentStep: currentStep\n        });\n      };\n    \n      _prev = () => {\n        let currentStep = this.state.currentStep;\n        currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n        if (this.state.pathFloor[currentStep + 1] !== undefined) {\n          if (\n            this.state.pathFloor[currentStep + 1].floor !==\n            this.state.pathFloor[currentStep].floor\n          ) {\n            this.navigatePrevious();\n          }\n        }\n        this.setState({\n          currentStep: currentStep\n        });\n      };\n    \n      playInstruction = (pause)=>{\n        var synth = window.speechSynthesis;\n        synth.cancel();\n        if(pause === true){\n          synth.pause();\n        }else{\n          synth.resume();\n        }\n        // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n        // synth.speak(utterance);\n        // synth.resume()\n        let instruction = this.filterInstruction()\n    \n        instruction.forEach(r=>{\n          var utterance1 = new SpeechSynthesisUtterance(r);\n          synth.speak(utterance1);\n        })\n      }\n    \n      filterInstruction = ()=>{\n        var instructions = [];\n        var stepsCount = [];\n        let instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n        instructions = instruction &&  instruction.map((r, i) => {\n                            if (\n                              r.includes(\"right\") ||\n                              r.includes(\"Right\")\n                            ) {\n                              return r \n                            } else if (\n                              r.includes(\"left\") ||\n                              r.includes(\"Left\")\n                            ) {\n                              return r \n                            } else if (\n                              r.includes(\"forward\")\n                            ) {\n                              let theNum  = r.match(/\\d+/)[0]\n                              stepsCount.push(parseInt(theNum))\n                              return r \n                            } else if (\n                              r.includes(\"Turn 1 O' Clock\") ||\n                              r.includes(\"Turn 2 O' Clock\") ||\n                              r.includes(\"Turn 3 O' Clock\") \n                            ) {\n                              return'Turn slight right' \n                            }else if(  \n                              r.includes(\"Turn 4 O' Clock\") ||\n                              r.includes(\"Turn 5 O' Clock\")){\n                                return 'Turn back and then turn slight left' \n                            } else if (\n                              r.includes(\"Turn 7 O' Clock\") ||\n                              r.includes(\"Turn 8 O' Clock\") ||\n                              r.includes(\"Turn 9 O' Clock\") \n                            ) {\n                              return 'turn slight left'\n                            }else if(                        \n                              r.includes(\"Turn 10 O' Clock\") ||\n                              r.includes(\"Turn 11 O' Clock\")){\n                                return 'Turn back and then turn slight left'\n                            } else if (\n                              r.includes(\"Turn 6 O' Clock\")\n                            ) {\n                              return 'Turn back'\n                            } else if (r.includes(\"You are at\")) {\n                              return r\n                            } else if (r.includes(\"reached\")) {\n                              return r\n                            } else if (\n                              r.includes(\"Turn 0 O' Clock\") ||\n                              r.includes(\"Turn 12 O' Clock\")\n                            ) {\n                              return null \n                            }else{\n                              return r\n                            }\n        })\n        var distance\n    \n        if(instructions){\n          const add = arr => arr.reduce((a, b) => a + b, 0);\n          distance = add(stepsCount);\n          instructions = instructions.filter( (el)=> {\n            return el != null;\n          });\n        }\n        instructions.splice(instructions.length-2, 1);\n        return instructions;\n      }\n\n  state = {\n  };\n  \n  handleClick = () => {\n    this.setState({\n            color: Konva.Util.getRandomColor()\n        });\n    };\n  \n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n        // <React.Fragment>\n        \n        // </React.Fragment>\n        <React.Fragment>\n         \n            \n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView ? (\n            <React.Fragment>\n\n              <div\n                className=\"source-destination fixed-top\"\n                id=\"src-bar\"\n                style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showStrtMenu: true,\n                          srcReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button>\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-10 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          dstReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button>\n                  </div>\n                  <div className=\"col-2\"></div>\n                </div>\n              </div>\n              {this.state.showStrtMenu && !this.state.buildingView\n                ? \n                <SourceMenu\n                srcName = {this.state.srcName}\n                currentLocation = {this.state.currentLocation}\n                selectedSrcLocation = {this.state.selectedSrcLocation}\n                locationList = {this.state.locationList}\n                srcReadOnly = {this.state.srcReadOnly}\n                srcFloorList = {this.state.srcFloorList}\n                showStrtMenu = {()=>{\n                  this.setState({ showStrtMenu: false });\n                }}\n                handleSelectSource = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        tmpSrcLocation: e[0]\n                      },\n                      () => {\n                        this.handleSrcChange(e);\n                      }\n                    );\n                  }\n                }}\n                handleSourceLocation = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        selectedSrcLocation: e[0],\n                        selectedDstLocation: e[0],\n                        buildingView: false\n                      },\n                      () => {\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                        })\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"srcBuildingLocation\"\n                        );\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"dstBuildingLocation\"\n                        );\n                        if(this.state.dstName !== \"Select Destination\"){\n                          this.handleSubmit()\n                        }else{\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      }\n                    );\n                  }\n                }}\n                />\n                : null}\n              {this.state.showDstMenu && !this.state.buildingView\n                ? \n                <DestinationMenu\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      if (\n                        this.state.selectedSrcLocation.venueName ===\n                          this.state.selectedDstLocation.venueName &&\n                        this.state.selectedSrcLocation.buildingName ===\n                          this.state.selectedDstLocation.buildingName\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                : null}\n            </React.Fragment>\n          ) : null}\n         \n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n             \n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n              <Stage\n                width={500} \n                height={500}\n            >\n                <Layer>\n                {this.state.pathPoints.map((star,id) => (\n                  <Star\n                    key={id}\n                    id={id}\n                    x = {star[0]}\n                    y = {star[1]}\n                    numPoints={5}\n                    innerRadius = {20}\n                    outerRadius = {40}\n                    fill=\"#89b717\"\n                    opacity={0.8}\n                    draggable\n                    // rotation={star.rotation}\n                    shadowColor=\"black\"\n                    shadowBlur={10}\n                    shadowOpacity = {0.6}\n                  />\n                ))}\n                </Layer>\n            </Stage>\n\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={true}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      getImage: state.imgDetails,\n      allNodes: state.getAllElem,\n      flrList: state.floorList,\n      userProfile:state.userPortfolio,\n      navigationInfo: state.navigationInfo,\n      vnList: state.venueList,\n      bldList: state.buildingList,\n      gpsLocation: state.gpsLocation,\n      androidNav: state.androidNavigation\n    };\n  };\n  \n  export default connect(mapStateToProps, {\n    floorList,\n    imgDetails,\n    getAllBuildingElements,\n    venueList,\n    buildingList,\n    getGpsLocation,\n    androidNavigation,\n    getUserPortfolio\n  })(ColoredRect);","/home/jahnavi/navigation/src/components/dashboard/Settings.js",["607","608"],"import React from 'react';\n class Settings extends React.Component{\n     render(){\n         return (\n           <div className=\"bg-settings container-fluid\" style={{height:\"100vh\"}}>\n             <div className=\"text-white row mt-5 pt-2\">\n               <div className=\"col-lg-12 \">\n                 <div className=\"text-center\" id=\"content\">\n                   <button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default  h2 button-text\" onClick={()=>{\n                     this.props.history.push('/profile-settings')\n                   }} >\n                     <img\n                       className=\"float-left\"\n                       src=\"/inclunav/assets/images/user_profile.svg\"\n                     />\n                     Profile Settings\n                   </button>\n                   <button\n                     className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default h2 button-text\"\n                     onClick={() => {\n                      this.props.history.push('/navigation-settings')\n                     }}\n                   >\n                     <img\n                       className=\"float-left\"\n                       src=\"/inclunav/assets/images/navigate.png\"\n                     />\n                     Navigate\n                   </button>\n\n                   {/* <button\n                     className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default h2 button-text\"\n                     onClick={() => {\n                       sessionStorage.clear();\n                      this.props.history.push('/')\n                     }}\n                   >\n                     <img\n                       className=\"float-left\"\n                       src=\"/inclunav/assets/images/navigate.png\"\n                     /> */}\n                    <div\n                       onClick={() => {\n                        localStorage.clear();\n                       this.props.history.push('/')\n                      }}\n                    > Logout </div> \n                   {/* </button> */}\n\n                 </div>\n               </div>\n             </div>\n           </div>\n         );\n     }\n }\n\nexport default Settings\n","/home/jahnavi/navigation/src/components/dashboard/Landing.js",["609","610","611","612","613","614","615","616","617","618","619","620","621"],"import React from \"react\";\nimport { css } from \"@emotion/css\";\nimport Drawer from \"react-drag-drawer\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./css/dashboard.css\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation\n} from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Navigation from \"./navigation/Navigation\";\nimport { Link, Route } from \"react-router-dom\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nconst routes = [\n  {\n    path: \"/test\",\n    component: Navigation\n  }\n];\n\nconst center = { lat: 28.6139, lng: 77.209 };\n\nconst Card = css`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  margin: 40px auto;\n  @media (min-width: 768px) {\n    border-radius: 0;\n  }\n  button {\n    margin-top: 50px;\n  }\n`;\n\nconst Toggle = css`\n  background-color: #d50152;\n  border-radius: 4px;\n  color: white;\n  border: 0;\n  padding: 10px;\n  font-size: 16px;\n  cursor: pointer;\n  outline: none;\n  margin-left: 50%;\n  margin-top: 0px !important;\n  transition: all 0.25s linear;\n  &:active {\n    transform: scale(0.9);\n  }\n`;\n\nconst modal = css`\n  position: absolute;\n  top: 30px;\n  background-color: white;\n  width: 100%;\n  max-width: 700px;\n  min-height: 100%;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n`;\n\nconst Sidebar = css`\n  ${modal} top: 0;\n  max-width: 300px;\n  border-radius: 0;\n  left: 0;\n  background: linear-gradient(to bottom, #09203f, #1d4a6d);\n`;\n\nclass Landing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sidebarLeft: false,\n      gpsLocation: \"\",\n      currentLocation: \"\",\n      currentVenue: {\n        address: \"\",\n        coordinates: [],\n        dateCreated: \"\",\n        distance: 2,\n        id: 0,\n        liveStatus: true,\n        organization: \"\",\n        venueName: \"\"\n      },\n      currentBuilding: {\n        address: \"\",\n        buildingName: \"\",\n        coordinates: [],\n        distance: 2,\n        lat: 0,\n        lng: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (window.navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success => {\n        let coordinates = [success.coords.latitude, success.coords.longitude];\n        const geocoder = L.Control.Geocoder.nominatim();\n        let lat = coordinates[0];\n        let lng = coordinates[1];\n        this.props.getGpsLocation({ lat, lng }, () => {\n          console.log(\"gps location\", this.props.gpsLocation);\n          this.setState({\n            currentLocation: this.props.gpsLocation.display_name\n          });\n        });\n        this.getVenueList(coordinates);\n      });\n    } else {\n      // x.innerHTML = \"Geolocation is not supported by this browser.\";\n    }\n  }\n\n  getVenueList = coordinates => {\n    this.props.venueList(() => {\n      this.setState(\n        {\n          venueList: this.props.vnList.data\n        },\n        () => {\n          this.findNearVenue(coordinates);\n        }\n      );\n    });\n  };\n\n  findNearVenue = coordinates => {\n    let { venueList } = this.state;\n    let distList = venueList.map(r => {\n      return this.getDistance(coordinates, r);\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    if (lowest < 1) {\n      this.setState(\n        {\n          gpsLocation: nearLocation.address,\n          currentVenue: nearLocation\n        },\n        () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        }\n      );\n    }\n  };\n\n  getBuildingList = (venueName, coordinates) => {\n    this.props.buildingList({ venueName: \"IITCampusCheck\" }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data\n        },\n        () => {\n          if (this.state.buildingList.length > 0) {\n            this.findNearBuilding(coordinates);\n          }\n        }\n      );\n    });\n  };\n\n  findNearBuilding = coordinates => {\n    let { buildingList } = this.state;\n    let distList = buildingList.map(r => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      return this.getDistance(coordinates, r);\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    console.log(\"current buildingh\", nearLocation);\n    if (lowest < 0.1) {\n      this.setState(\n        {\n          gpsLocation: nearLocation.address,\n          currentBuilding: nearLocation\n        },\n        () => {\n          console.log(\"building list\", this.state.currentBuilding);\n          // this.getBuildingList(nearLocation.venueName,coordinates)\n        }\n      );\n    }\n  };\n\n  rad = function(x) {\n    return (x * Math.PI) / 180;\n  };\n\n  getDistance = function(p1, p2) {\n    // console.log(\"p1 and p2\",p1,p2)\n    var R = 6378137; // Earth’s mean radius in meter\n    var dLat = this.rad(p2.coordinates[0] - p1[0]);\n    var dLong = this.rad(p2.coordinates[1] - p1[1]);\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.rad(p1[0])) *\n        Math.cos(this.rad(p2.coordinates[0])) *\n        Math.sin(dLong / 2) *\n        Math.sin(dLong / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = (R * c) / 1000;\n    p2.distance = d;\n    return p2; // returns the distance in km\n  };\n\n  render() {\n    const { sidebarLeft } = this.state;\n\n    const routeComponents = routes.map(({ path, component, i }) => (\n      <Route path={path} component={component} key={i} />\n    ));\n\n    return (\n      <React.Fragment>\n        {this.state.gpsLocation.length > 0 ? (\n          <div className=\"row w-100\" style={{ position: \"absolute\" }}>\n            <div className=\"col-11 pr-0\">\n              <div className=\"gps-location text-white\">\n                <img\n                  className=\"float-left ml-2 mt-3\"\n                  src=\"/inclunav/assets/images/user_location.png\"\n                  alt=\"current location\"\n                />\n                <p className=\"text-justify w-75 mx-auto my-auto\">\n                  {this.state.currentLocation}\n                </p>\n              </div>\n            </div>\n            <div className=\"col-1 \">\n              <button className=\"ellipse\">\n                <img\n                  className=\"mx-auto my-auto\"\n                  src=\"/inclunav/assets/images/share.png\"\n                />\n              </button>\n            </div>\n          </div>\n        ) : null}\n        <div\n          className=\"bg-dashboard container-fluid d-flex justify-content-center align-items-center h-95\"\n          style={{ marginTop: \"50px\" }}\n        >\n          <div className=\"text-white row \">\n            <div className=\"col-lg-12 \">\n              <div className=\"text-center\" id=\"content\">\n                <button\n                  className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\"\n                  onClick={() => {\n                    this.props.history.push({\n                      pathname: \"/navigate\",\n                      search: `${this.state.currentVenue.venueName}&&${this.state.currentBuilding.buildingName}`\n                    });\n                  }}\n                >\n                  <img\n                    className=\"float-left\"\n                    src=\"/inclunav/assets/images/navigate.png\"\n                    alt=\"navigate button\"\n                  />\n                    <span aria-hidden=\"true\" > Navigate </span> <span class=\"sr-only\">Double tap to continue</span>\n                </button>\n                <button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold  h2\">\n                  <img\n                    className=\"float-left\"\n                    src=\"/inclunav/assets/images/explore.png\"\n                    alt=\"explore button\"\n                  />\n                   <span aria-hidden=\"true\" > Explore </span>  <span class=\"sr-only\">Double tap to continue</span>\n                </button>\n                <button className=\"btn btn-dashboard  mx-auto btn-block btn-default font-weight-bold  h2\">\n                  <img\n                    className=\"float-left\"\n                    src=\"/inclunav/assets/images/location_info.png\"\n                    alt=\"location information button\"\n                  />\n                  <p className=\"btn-dashboard-text-location\">\n                  <span aria-hidden=\"true\" > Location Information </span>  <span class=\"sr-only\">Double tap to continue</span> \n                  </p>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    //   bList: state.buildingList,\n    flrList: state.floorList,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation\n})(Landing);\n","/home/jahnavi/navigation/src/store/actions/index.js",["622","623","624","625"],"import axios from 'axios';\nimport config from '../../config';\n\nexport const userLogin = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.login}`,data);\n    const getDetails = response.data;\n    dispatch({type:'USER_LOGIN',payload:getDetails})\n    cb()\n}\n\nexport const userRegister = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.register}`,data);\n    const getDetails = response.data;\n    dispatch({type:'USER_REGISTER',payload:getDetails})\n    cb()\n}\n\nexport const sendOtp = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.sendOtp}`,data);\n    const getDetails = response.data;\n    dispatch({type:'SEND_OTP',payload:getDetails})\n    cb()\n}\n\nexport const verifyOtp = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.verifyOtp}`,data);\n    const getDetails = response.data;\n    dispatch({type:'VERIFY_OTP',payload:getDetails})\n    cb()\n}\n\nexport const sendEmailotp = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.sendEmailOtp}`,data);\n    const getDetails = response.data;\n    dispatch({type:'SEND_EMAILOTP',payload:getDetails})\n    cb()\n}\n\nexport const verifyEmailotp = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(`${config.verifyEmailOtp}`,data);\n    const getDetails = response.data;\n    dispatch({type:'VERIFY_EMAILOTP',payload:getDetails})\n    cb()\n}\n\nexport const forgotPassword = (data)=> async (dispatch)=>{\n    const response = await axios.post(`${config.forgotPassword}`,data);\n    const getDetails = response.data;\n    dispatch({type:'FORGOT_PASSWORD',payload:getDetails})\n\n}\n\nexport const userDetails = (data)=> async (dispatch)=>{\n    const response = await axios.post(config.userDetails,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'USER_DETAILS',payload:getDetails})\n}\n\nexport const resetPassword = (data)=> async (dispatch)=>{\n    const response = await axios.post(config.resetPassword,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'RESET_PASSWORD',payload:getDetails})\n}\n\n// export const venueList = (data)=> async (dispatch)=>{\n//     const response = await axios.post(config.venueList,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n//     const getDetails = response.data;\n//     dispatch({type:'RESET_PASSWORD',payload:getDetails})\n// }\n\nexport const getAllBuildingElements = (data,next)=> async (dispatch)=>{\n    const response = await axios.get(`${config.navigationData}/${data.venueName}/${data.buildingName}/null`);\n    const responseData = response.data;\n    dispatch({type:'NAVIGATION_INFO',payload:responseData})\n    next(); \n}\n\nexport const androidNavigation = (data,next)=> async (dispatch)=>{\n    const response = await axios.get(`${config.androidNavigation}/${data.venueName}/${data.buildingName}/null`);\n    const responseData = response.data;\n    let arra = [];\n    for (let i = 0; i < responseData.length; i++) {\n      if (responseData[i].element.type === \"Floor\") {\n          arra.push(responseData[i])\n    }\n    }\n    dispatch({type:'ANDROID_NAVIGATION',payload:arra})\n    next(); \n}\n\nexport const globalNavigation = (data,next)=> async (dispatch)=>{\n    const response = await axios.get(`${config.androidNavigation}/${data.venueName}/${data.buildingName}/null`);\n    console.log(\"data\",data,response)\n    const responseData = response.data;\n    dispatch({type:'GLOBAL_NAVIGATION',payload:responseData})\n    next(); \n}\n\nexport const imgDetails = (venue,buildingname,floor,file,cb)=> async  (dispatch)=>{\n    const response = await axios.get(`${config.imgDetails}${venue}/${buildingname}/${floor}/${file}`)\n    const pathResponse = response.data;\n    dispatch({type:'FETCH_IMAGE',payload: pathResponse});\n    cb();\n}\n\nexport const refPoint =  (venue,building,floor,cb) => async (dispatch) => {\n    const response = await axios.get(`${config.globalRef}${venue}/${building}/${floor}`);\n    const responseData = response.data;\n    console.log(\"response\",responseData,venue,building,floor)\n    dispatch({type:'REF_POINT',payload:responseData})\n    cb()\n}\n\nexport const floorList = (buildingName,next)=> async (dispatch)=>{\n    const response = await axios.post(config.floorList,{buildingName:buildingName});\n    const allFloors = response.data;\n    dispatch({type:'FLOOR_LIST',payload: allFloors})\n    next()\n}\n\nexport const venueList = (next)=> async (dispatch)=>{\n    const response = await axios.post(config.venueList);\n    const getDetails = response.data;\n    dispatch({type:'VENUE_LIST',payload:getDetails});\n    next();\n}\n\n// export const buildingList = (data)=> async (dispatch)=>{\n//     const response = await axios.post(config.buildingList,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n//     const getDetails = response.data;\n//     dispatch({type:'BUILDING_LIST',payload:getDetails})\n// }\n\nexport const buildingList = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.buildingList,data);\n    const getDetails = response.data;\n    dispatch({type:'BUILDING_LIST',payload:getDetails})\n    cb()\n}\n\nexport const getGpsLocation = (data,cb)=> async (dispatch)=>{\n    let latitude = data.lat.toString()\n    let longitude = data.lng.toString()\n    let url = `https://forward-reverse-geocoding.p.rapidapi.com/v1/reverse?lat=${latitude}&lon=${longitude}&format=json&accept-language=en&polygon_threshold=0.0`\n    let resp = await fetch(url,{\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"23d4e05de9msh6374022ee59c78ap1c8dfdjsn43be9985d2e1\",\n        \"x-rapidapi-host\": \"forward-reverse-geocoding.p.rapidapi.com\",\n        \"useQueryString\": true\n      }\n    })\n    let dt = await resp.json()\n    dispatch({type:'GPS_LOCATION',payload:dt})\n    cb()\n}\n\n//Settings section\nexport const getUserInformation = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.userInformation,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'USER_INFORMATION',payload:getDetails})\n    cb()\n}\n\nexport const getUserPortfolio = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.userPortfolio,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'USER_PORTFOLIO',payload:getDetails})\n    cb()\n}\n\nexport const updateName = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateName,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_NAME',payload:getDetails})\n    cb()\n}\n\nexport const updatePassword = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updatePassword,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_PASSWORD',payload:getDetails})\n    cb()\n}\n\nexport const updateMobile = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateMobile,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_MOBILE',payload:getDetails})\n    cb()\n}\n\nexport const updateEmail = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateEmail,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    console.log(\"update email response\",response)\n    dispatch({type:'UPDATE_EMAIL',payload:getDetails})\n    cb()\n}\n///\nexport const updateLanguage = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateLanguage,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_LANGUAGE',payload:getDetails})\n    cb()\n}\n\nexport const updateVision = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateVision,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n\n    dispatch({type:'UPDATE_VISION',payload:getDetails})\n    cb()\n}\n\nexport const updateHeight = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateHeight,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_HEIGHT',payload:getDetails})\n    cb()\n}\n\nexport const updateAgegroup = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateAgegroup,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_AGEGROUP',payload:getDetails})\n    cb()\n}\n\nexport const updateWalking = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.updateWalking,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'UPDATE_WALKING',payload:getDetails})\n    cb()\n}\n\nexport const saveAddress = (data,cb)=> async (dispatch)=>{\n    const response = await axios.post(config.saveAddress,data,{headers:{ 'Content-Type': 'application/json', 'Authorization': `${data.token}` }});\n    const getDetails = response.data;\n    dispatch({type:'SAVE_ADDRESS',payload:getDetails})\n    cb()\n}\n\nexport const osmRoutes = (data,cb)=> async (dispatch)=>{\n    let srcLat = data.srcLat;\n    let srcLng = data.srcLng;\n    let dstLat = data.dstLat;\n    let dstLng = data.dstLng;\n    // console.log(\"ww\",`${config.osmRoutes}start=${srcLat},${srcLng}&end=${dstLat},${dstLng}`)\n    // const response = await axios.get(`${config.osmRoutes}${srcLat},${srcLng};${dstLat},${dstLng}?overview=false`);\n    // const getDetails = response.data;\n    const getDetails = [];\n    dispatch({type:'OSM_ROUTES',payload:getDetails})\n    cb()\n}\n\nexport const pickupPoints = (data,cb)=> async (dispatch)=>{\n    const response = await axios.get(`${config.pickUpPoints}/${data.venue}/${data.building}`);\n    const getDetails = response.data;\n    dispatch({type:'PICKUP_POINTS',payload:getDetails})\n    cb()\n}\n\nexport const navContent = (data,cb)=> async (dispatch)=>{\n    dispatch({type:'NAV_CONTENT',payload:data})\n    cb()\n}","/home/jahnavi/navigation/src/components/dashboard/NavigationSettings.js",[],"/home/jahnavi/navigation/src/components/dashboard/ProfileSettings.js",["626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655"],"import React from 'react';\nimport { getUserInformation,updateName, sendOtp, verifyOtp,updatePassword,updateMobile,updateEmail } from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport userInformation from '../../store/reducers/userInformation';\n\n class ProfileSettings extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      newName:\"\",\n      mobileNumber: \"\",\n      newMobileNumber:\"\",\n      password: \"\",\n      oldPassword:\"\",\n      email:\"\",\n      newEmail:\"\",\n      otpValue: \"\",\n      emailOtpValue:\"\",\n      errorMsg: \"\",\n      lenErr: false,\n      capsErr: false,\n      numErr: false,\n      otpStatus: false,\n      verifyStatus: false,\n      emailOtpError:null,\n      mobileOtpError:null,\n      verifyEmailotpResponse:null,\n      verifyMobileotpResponse:null,\n      disableOtp:false,\n      disableMobileOtp:false,\n      regErr:true,\n      comparePassword:\"\",\n      updateName:false,\n      changeName:false,\n      updatePassword:false,\n      changePassword:false,\n      updateMobileNumber:false,\n      changeMobileNumber:false,\n      updateEmail:false,\n      changeEmail:false,\n      click:false,\n      nameChangeSuccess:false,\n      passwordChangeSuccess:false,\n      mobileChangeSuccess:false,\n      emailChangeSuccess:false\n    };\n  }\n\n  setName = val => {\n    this.setState({\n      name: val\n    });\n  };\n  setMobileNumber = val => {\n    this.setState({\n      mobileNumber: val\n    });\n  };\n  setPassword = val => {\n    this.setState({\n      password: val\n    });\n  };\n  setOtp = val => {\n    this.setState({\n      otpValue: val\n    });\n  };\n  setErrorMsg = val => {\n    this.setState({\n      errorMsg: val\n    });\n  };\n  setLenErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setCapsErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setnNumErr = val => {\n    this.setState({\n      lenErr: val\n    });\n  };\n  setOtpStatus = val => {\n    this.setState({\n      otpStatus: val\n    });\n  };\n  setVerifyStatus = val => {\n    this.setState({\n      otpStatus: val\n    });\n  };\n\n  componentDidMount(){\n    let token = localStorage.getItem('token');\n    let id = localStorage.getItem('id');\n      this.props.getUserInformation({id,token},()=>{\n        let data  = this.props.userInformation;\n        this.setState({\n          name:data.name,\n          email:data.email,\n          mobileNumber:data.mobileNumber\n        })\n      })\n  }\n\n    confirmButton = (type)=>{\n      let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      return (<div className=\"row w-100\">\n      <div className=\"col-6\">\n      <button className=\"btn btn-confirm btn-confirm-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n        if(type === \"name\"){\n          this.props.updateName({mobileNumber:this.state.mobileNumber,newName:this.state.newName,id:id,token:token},()=>{\n            if(this.props.nameChange.success === true){\n              this.setState({\n                nameChangeSuccess:true\n              })\n            }else{\n              this.setState({\n                nameChangeSuccess:false\n              })\n            }\n          })\n        }else if(type === \"password\"){\n          this.props.updatePassword({mobileNumber:this.state.mobileNumber,oldPassword:this.state.oldPassword,password:this.state.password,id:id,token:token},()=>{\n            console.log(\"this.props.passwordChange\",this.props.passwordChange)\n            if(this.props.passwordChange.success === true){\n              this.setState({\n                passwordChangeSuccess:true\n              })\n            }else{\n              this.setState({\n                passwordChangeSuccess:false\n              })\n            }\n          })\n        }else if(type === \"mobile\"){\n          this.props.updateMobile({mobileNumber:this.state.mobileNumber,newMobileNumber:this.state.newMobileNumber,password:this.state.password,id:id,token:token},()=>{\n            console.log(\"this.props.passwordChange\",this.props.mobileChange)\n            if(this.props.mobileChange.success === true){\n              this.setState({\n                mobileChangeSuccess:true\n              })\n            }else{\n              this.setState({\n                mobileChangeSuccess:false\n              })\n            }\n          })\n        }else if(type === \"email\"){\n          this.props.updateEmail({email:this.state.email,newEmail:this.state.newEmail,password:this.state.password,id:id,token:token},()=>{\n            console.log(\"this.props.passwordChange\",this.props.emailChange)\n            if(this.props.emailChange.success === true){\n              this.setState({\n                emailChangeSuccess:true\n              })\n            }else{\n              this.setState({\n                emailChangeSuccess:false\n              })\n            }\n          })\n        }\n        }} \n      > CONFIRM CHANGE</button> \n      </div>\n      <div className=\"col-6\">\n        <button className=\"btn btn-cancel btn-cancel-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n            this.setState({\n              updateName:false,\n              changeName:false,\n              updatePassword:false,\n              changePassword:false,\n              updateMobileNumber:false,\n              changeMobileNumber:false,\n              updateEmail:false,\n              changeEmail:false\n            })\n          }} \n        > CANCEL</button> \n      </div>\n      </div>)\n    }\n\n    changeName = ()=>{\n      if(!this.state.nameChangeSuccess){\n        return (     \n        <React.Fragment>\n          {!this.state.changeName?<button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n          this.setState({\n            changeName:true\n          })\n        }} \n        style={{fontFamily: \"Noto Sans\",\n          fontStyle: \"normal\",\n          fontWeight: \"bold\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          textAlign: \"center\"\n        }}\n        > CHANGE NAME</button>:null} \n        <hr className=\"hr-line\" />\n        {this.state.changeName?\n        <React.Fragment>\n        <div className=\"row w-100\">\n        <div className=\"form-group col-12\">\n                <input\n                  type=\"text\"\n                  className=\"form-control text-white text-input\"\n                  aria-describedby=\"emailHelp\"\n                  placeholder=\"Mobile Number\"\n                  pattern=\"[0-9]\"\n                  value = {this.state.mobileNumber}\n                  onChange={(e)=>{\n                    this.setState({\n                      mobileNumber:e.target.value\n                    })\n                  }}\n                />\n              </div>\n        </div>\n        <div className=\"row w-100\">\n        <div className=\"form-group col-12\">\n                <input\n                  type=\"text\"\n                  className=\"form-control text-white text-input\"\n                  aria-describedby=\"emailHelp\"\n                  placeholder=\"Enter New Name\"\n                  value = {this.state.newName}\n                  onChange={(e)=>{\n                    this.setState({\n                      newName:e.target.value\n                    })\n                  }}\n                />\n              </div>\n      </div>\n      {this.confirmButton(\"name\")}\n      </React.Fragment>:null}</React.Fragment>)}else{\n        return <React.Fragment>\n           <div className=\"d-flex-column justify-content-center\" > \n            <p style={{\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"24px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              color: \"#2FC8AD\",\n            }}>Name changed! </p>\n            <p className=\"text-white\" > The name registered with this account has been changed from {this.state.name} to {this.state.newName} </p> \n           </div>\n      </React.Fragment>}\n    }\n\n    sendOtpRequest = ()=>{\n      let {mobileNumber} = this.state;\n      if(mobileNumber.length === 0 || mobileNumber.length > 10){\n        this.setErrorMsg('Mobile number is invalid')\n        return\n      }else{\n        this.props.sendOtp({mobileNumber},()=>{\n          if(this.props.otpResponse.success === true){\n              this.setState({\n                disableMobileOtp:true\n              },()=>{\n                setTimeout(()=>{ this.setState({\n                disableMobileOtp:false\n                }) }, 30000);\n              })\n            }\n        })\n      }\n    }\n\n    validatePassword = e =>{\n      const numPattern = /[0-9]/;\n      if (numPattern.test(this.state.password)) {\n        this.setnNumErr(false)\n      } else {\n        this.setnNumErr(true)\n      }\n      const capsPattern = /[A-Z]/;\n      if (capsPattern.test(this.state.password)) {\n        this.setCapsErr(false)\n      } else {\n        this.setCapsErr(true)\n      }\n      if (this.state.password.length >= 8) {\n          this.setLenErr(false)\n      } else {\n        this.setLenErr(true)\n      }\n  }\n\n    changePassword = ()=>{\n      let {\n        otpStatus,\n        name,\n        email,\n        mobileNumber,\n        password,\n        otpValue,\n        errorMsg,\n        lenErr,\n        capsErr,\n        numErr,\n        verifyStatus,\n        emailOtpValue\n      } = this.state;\n\n            if(!this.state.passwordChangeSuccess){\n        return (     \n        <React.Fragment>\n          {!this.state.changePassword?<button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n            this.setState({\n              changePassword:true\n            })\n          }} \n          style={{fontFamily: \"Noto Sans\",\n          fontStyle: \"normal\",\n          fontWeight: \"bold\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          textAlign: \"center\"\n        }}\n        > RESET PASSWORD</button> :null} \n        <hr className=\"hr-line\" />\n        {this.state.changePassword?\n        <React.Fragment>\n        \n        <div className=\"form-group\">\n                <input\n                  type=\"password\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Enter Current Password\"\n                  value={this.state.oldPassword}\n                  onChange={e => {\n                    this.validatePassword(e);\n                    this.setState({\n                      oldPassword:e.target.value\n                    })\n                  }}\n                  onBlur={this.validatePassword}\n                />\n              </div>\n        <div className=\"form-group\">\n                <input\n                  type=\"password\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={e => {\n                    this.validatePassword(e);\n                    this.setPassword(e.target.value);\n                  }}\n                  onBlur={this.validatePassword}\n                />\n              </div>\n              {password.length > 0 ? (\n                <React.Fragment>\n                  <div className=\"col-12\">\n                    <p className=\"mb-0\">Password must contain:</p>{\" \"}\n                  </div>\n                  <div className=\"col-12 text-center\">\n                    8 characters{\" \"}\n                    {lenErr ? (\n                      <img\n                        className=\"img-ml-28\"\n                        src=\"/inclunav/assets/images/subtract.png\"\n                        alt=\"error icon\"\n                      />\n                    ) : (\n                      <img\n                        className=\"img-ml-28\"\n                        src=\"/inclunav/assets/images/success.png\"\n                        alt=\"error icon\"\n                      />\n                    )}\n                  </div>\n                  <div className=\"col-12 text-center\">\n                    1 capital letter\n                    {capsErr ? (\n                      <img\n                        className=\"img-ml-23\"\n                        src=\"/inclunav/assets/images/subtract.png\"\n                        alt=\"error icon\"\n                      />\n                    ) : (\n                      <img\n                        className=\"img-ml-23\"\n                        src=\"/inclunav/assets/images/success.png\"\n                        alt=\"error icon\"\n                      />\n                    )}\n                  </div>\n                  <div className=\"col-12 text-center mb-2\">\n                    1 number\n                    {numErr ? (\n                      <img\n                        className=\"img-ml-37\"\n                        src=\"/inclunav/assets/images/subtract.png\"\n                        alt=\"error icon\"\n                      />\n                    ) : (\n                      <img\n                        className=\"img-ml-37\"\n                        src=\"/inclunav/assets/images/success.png\"\n                        alt=\"error icon\"\n                      />\n                    )}\n                  </div>\n                </React.Fragment>\n              ) : null}\n              <div className=\"form-group\">\n                <input\n                  type=\"password\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Confirm Password\"\n                  value={this.state.comparePassword}\n                  onChange={e => {\n                  this.setState({\n                    comparePassword:e.target.value\n                  })\n                  }}\n                  onBlur={()=>{\n                    if(this.state.password !== this.state.comparePassword){\n                      this.setState({\n                        compareErr:true\n                      })\n                    }else{\n                      this.setState({\n                        regErr:false\n                      })\n                    }\n                  }}\n                />\n              </div>\n              {this.state.compareErr?<p className=\"text-white text-justify text-error\">\n              Passwords do\n               not match.\n            </p>:null}\n            <button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n            this.sendOtpRequest()\n          }} \n          style={{fontFamily: \"Noto Sans\",\n          fontStyle: \"normal\",\n          fontWeight: \"bold\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          textAlign: \"center\"\n        }}\n        disabled={this.state.disableMobileOtp}\n        > SEND OTP</button>\n        <p className=\"text-white text-justify\">\n            If you do not receive a code within 30 seconds, please press Send OTP.\n            </p>\n            <div className=\"form-group\" id=\"container\" >\n          <div class=\"input-group\">\n          <input\n                  type=\"text\"\n                  className=\"form-control text-input\"\n                  id=\"exampleInputPassword1\"\n                  placeholder=\"Enter 6 digit code\"\n                  value={emailOtpValue}\n                  onChange={e => {\n                    this.setState({\n                      emailOtpValue:e.target.value,\n                      emailOtpError:null,\n                      verifyEmailotpResponse:null\n                    })\n                  }}\n                  onBlur={()=>{\n                    if(this.state.emailOtpValue.length === 6){\n                      this.props.verifyOtp({mobileNumber:this.state.mobileNumber,otp:this.state.otpValue},()=>{\n                        if(this.props.verifyEmailotpResponse.success === \"approved\"){\n                          this.setState({\n                              verifyEmailotpResponse:true\n                          })\n                        }else{\n                          this.setState({\n                            emailOtpError:\"Incorrect Code. Please retry by pressing Send OTP.\",\n                            verifyEmailotpResponse:false\n                        })\n                        }\n                      })\n                    }\n                  }}\n                />\n                {\n                  this.state.verifyEmailotpResponse !==null? <div\n                  className=\"show-pass\"\n                >\n                  {this.state.verifyEmailotpResponse === true ? (\n                    <img\n                      src=\"/inclunav/assets/images/verification_success.svg\"\n                      alt=\"hide password\"\n                    />\n                  ) : (\n                    <img\n                      src=\"/inclunav/assets/images/verification_failed.svg\"\n                      alt=\"show password\"\n                    />\n                  )}\n                </div>:null\n                }\n          </div>\n        </div>\n        {this.confirmButton(\"password\")}\n        </React.Fragment>:null}</React.Fragment>)}else{\n        return <React.Fragment>\n           <div className=\"d-flex-column justify-content-center\" > \n            <p style={{\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"24px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              color: \"#2FC8AD\",\n            }}>Password changed! </p>\n            <p className=\"text-white\" > The name registered with this account has been changed from {this.state.name} to {this.state.newName} </p> \n           </div>\n      </React.Fragment>}\n    }\n\n    changeMobileNumber = ()=>{\n      let {\n        otpStatus,\n        name,\n        email,\n        mobileNumber,\n        password,\n        otpValue,\n        errorMsg,\n        lenErr,\n        capsErr,\n        numErr,\n        verifyStatus,\n        emailOtpValue\n      } = this.state;\n\n      if(!this.state.mobileChangeSuccess){\n        return (     \n        <React.Fragment>\n          {!this.state.changeMobileNumber?<button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n            this.setState({\n              changeMobileNumber:true\n            })\n          }} \n          style={{fontFamily: \"Noto Sans\",\n          fontStyle: \"normal\",\n          fontWeight: \"bold\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          textAlign: \"center\"\n        }}\n        > CHANGE MOBILE NUMBER</button> :null} \n        <hr className=\"hr-line\" />\n        {this.state.changeMobileNumber?\n        <React.Fragment>\n        <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter your Password\"\n                        value={password}\n                        onChange={e => {\n                          this.validatePassword(e);\n                          this.setPassword(e.target.value);\n                        }}\n                        onBlur={this.validatePassword}\n                      />\n                    </div>\n                    <p className=\"text-white\" >New Mobile Number</p>\n                    <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"New Mobile Number\"\n                        value={this.state.newMobileNumber}\n                        onChange={e => {\n                          this.setState({\n                            newMobileNumber:e.target.value\n                          })\n                        }}\n                      />\n                    </div>\n                    <button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n                  this.props.history.push({  pathname:'/navigate',search:`${this.state.currentVenue.venueName}&&${this.state.currentBuilding.buildingName}`})\n                }} \n                style={{fontFamily: \"Noto Sans\",\n                fontStyle: \"normal\",\n                fontWeight: \"bold\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                textAlign: \"center\"\n              }}\n              > SEND OTP</button>\n              <p className=\"text-white\" > Please check your registered e-mail ID for the OTP. If you do not receive a code within 1 minute, please press Send OTP again. </p>\n              <div className=\"form-group\" id=\"container\" >\n                <div class=\"input-group\">\n                <input\n                        type=\"text\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter 6 digit code\"\n                        value={emailOtpValue}\n                        onChange={e => {\n                          this.setState({\n                            emailOtpValue:e.target.value,\n                            emailOtpError:null,\n                            verifyEmailotpResponse:null\n                          })\n                        }}\n                        onBlur={()=>{\n                          if(this.state.emailOtpValue.length === 6){\n                            this.props.verifyEmailotp({email:this.state.email,otp:this.state.emailOtpValue},()=>{\n                              if(this.props.verifyEmailotpResponse.success === \"approved\"){\n                                this.setState({\n                                    verifyEmailotpResponse:true\n                                })\n                              }else{\n                                this.setState({\n                                  emailOtpError:\"Incorrect Code. Please retry by pressing Send OTP.\",\n                                  verifyEmailotpResponse:false\n                              })\n                              }\n                            })\n                          }\n                        }}\n                      />\n                      {\n                        this.state.verifyEmailotpResponse !==null? <div\n                        className=\"show-pass\"\n                      >\n                        {this.state.verifyEmailotpResponse === true ? (\n                          <img\n                            src=\"/inclunav/assets/images/verification_success.svg\"\n                            alt=\"hide password\"\n                          />\n                        ) : (\n                          <img\n                            src=\"/inclunav/assets/images/verification_failed.svg\"\n                            alt=\"show password\"\n                          />\n                        )}\n                      </div>:null\n                      }\n                </div>\n              </div>\n              {this.confirmButton(\"mobile\")}\n        </React.Fragment>:null}</React.Fragment>)}else{\n          return <React.Fragment>\n           <div className=\"d-flex-column justify-content-center\" > \n            <p style={{\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"24px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              color: \"#2FC8AD\",\n            }}>Mobile Number changed! </p>\n            <p className=\"text-white\" > The name registered with this account has been changed from {this.state.name} to {this.state.newName} </p> \n           </div>\n      </React.Fragment>}\n    }\n\n    changeEmail = ()=>{\n      let {\n        password,\n        emailOtpValue\n      } = this.state;\n      \n\n      if(!this.state.emailChangeSuccess){\n        return (     \n        <React.Fragment>\n          {!this.state.changeEmail?<button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n            this.setState({\n              changeEmail:true\n            })\n          }} \n          style={{fontFamily: \"Noto Sans\",\n          fontStyle: \"normal\",\n          fontWeight: \"bold\",\n          fontSize: \"16px\",\n          lineHeight: \"24px\",\n          textAlign: \"center\"\n        }}\n        > CHANGE EMAIL ID</button> :null} \n        <hr className=\"hr-line\" />\n        {this.state.changeEmail?\n        <React.Fragment>\n              <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter your Password\"\n                        value={password}\n                        onChange={e => {\n                          this.validatePassword(e);\n                          this.setPassword(e.target.value);\n                        }}\n                        onBlur={this.validatePassword}\n                      />\n                    </div>\n                    <p className=\"text-white\" >New Email Id</p>\n                    <div className=\"form-group\">\n                      <input\n                        type=\"email\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"New Email ID\"\n                        style={{\n                          color:\"white\"\n                        }}\n                        value={this.state.newEmail}\n                        onChange={e => {\n                          this.setState({\n                            newEmail:e.target.value\n                          })\n                        }}\n                        onBlur={this.validatePassword}\n                      />\n                    </div>\n                    <button className=\"btn btn-dashboard btn-dashboard-text mx-auto btn-block btn-default font-weight-bold h2\" onClick={()=>{\n                  this.props.history.push({  pathname:'/navigate',search:`${this.state.currentVenue.venueName}&&${this.state.currentBuilding.buildingName}`})\n                }} \n                style={{fontFamily: \"Noto Sans\",\n                fontStyle: \"normal\",\n                fontWeight: \"bold\",\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n                textAlign: \"center\"\n              }}\n              > SEND OTP</button>\n              <p className=\"text-white\" > Please check your registered e-mail ID for the OTP. If you do not receive a code within 1 minute, please press Send OTP again. </p>\n              <div className=\"form-group\" id=\"container\" >\n                <div class=\"input-group\">\n                <input\n                        type=\"text\"\n                        className=\"form-control text-input\"\n                        id=\"exampleInputPassword1\"\n                        placeholder=\"Enter 6 digit code\"\n                        value={emailOtpValue}\n                        onChange={e => {\n                          this.setState({\n                            emailOtpValue:e.target.value,\n                            emailOtpError:null,\n                            verifyEmailotpResponse:null\n                          })\n                        }}\n                        onBlur={()=>{\n                          if(this.state.emailOtpValue.length === 6){\n                            this.props.verifyEmailotp({email:this.state.email,otp:this.state.emailOtpValue},()=>{\n                              if(this.props.verifyEmailotpResponse.success === \"approved\"){\n                                this.setState({\n                                    verifyEmailotpResponse:true\n                                })\n                              }else{\n                                this.setState({\n                                  emailOtpError:\"Incorrect Code. Please retry by pressing Send OTP.\",\n                                  verifyEmailotpResponse:false\n                              })\n                              }\n                            })\n                          }\n                        }}\n                      />\n                      {\n                        this.state.verifyEmailotpResponse !==null? <div\n                        className=\"show-pass\"\n                      >\n                        {this.state.verifyEmailotpResponse === true ? (\n                          <img\n                            src=\"/inclunav/assets/images/verification_success.svg\"\n                            alt=\"hide password\"\n                          />\n                        ) : (\n                          <img\n                            src=\"/inclunav/assets/images/verification_failed.svg\"\n                            alt=\"show password\"\n                          />\n                        )}\n                      </div>:null\n                      }\n                </div>\n              </div>\n              {this.confirmButton(\"email\")}\n        </React.Fragment>:null}</React.Fragment>)}else{\n          return <React.Fragment>\n           <div className=\"d-flex-column justify-content-center\" > \n            <p style={{\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"24px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              color: \"#2FC8AD\",\n            }}>Email Id changed! </p>\n            <p className=\"text-white\" > The name registered with this account has been changed from {this.state.name} to {this.state.newName} </p> \n           </div>\n      </React.Fragment>}\n    }\n\n     render(){\n      let {\n        otpStatus,\n        name,\n        email,\n        mobileNumber,\n        password,\n        otpValue,\n        errorMsg,\n        lenErr,\n        capsErr,\n        numErr,\n        verifyStatus,\n        emailOtpValue\n      } = this.state;\n         return (\n           <div className=\"bg-settings container-fluid\" style={{height:this.state.click?\"100%\":\"100vh\"}}>\n             <div className=\"text-white row mt-5\">\n               <div className=\"col-lg-12 text-center\">\n                     <img\n                       className=\"mt-1\"\n                       src=\"/inclunav/assets/images/user_profile_inverted.svg\"\n                       alt=\"user profile\"\n                     />\n               </div>\n             </div>\n\n             <div className=\"text-white row mt-5\" onClick={()=>{this.setState({\n               updateName:!this.state.updateName,\n               click:false\n             })}} >\n               <div className=\"col-10 \">\n                   Name:  {this.state.name}\n               </div>\n               <div className=\"col-2 \">\n                    <img\n                       className=\"mt-1\"\n                       src=\"/inclunav/assets/images/pen.svg\"\n                       alt=\"user profile\"\n                    />\n               </div>\n             </div>\n             \n             {this.state.updateName?\n             <React.Fragment>\n               {this.changeName()}\n               </React.Fragment>\n             :null}\n             <div className=\"text-white row mt-5\" onClick={()=>{this.setState({\n               updatePassword:!this.state.updatePassword,\n               click:!this.state.click\n             })}} >\n               <div className=\"col-10 \">\n                   Password:  *********\n               </div>\n               <div className=\"col-2 \">\n                    <img\n                       className=\"mt-1\"\n                       src=\"/inclunav/assets/images/pen.svg\"\n                       alt=\"user profile\"\n                    />\n               </div>\n             </div>\n             {this.state.updatePassword?\n             <React.Fragment>\n               {this.changePassword()}\n               </React.Fragment>\n             :null}\n              <div className=\"text-white row mt-5\" onClick={()=>{this.setState({\n               updateMobileNumber:!this.state.updateMobileNumber,\n               click:!this.state.click\n             })}} >\n                <div className=\"col-10 \">\n                    Mobile Number:  {this.state.mobileNumber}\n                </div>\n                <div className=\"col-2 \">\n                     <img\n                        className=\"mt-1\"\n                        src=\"/inclunav/assets/images/pen.svg\"\n                        alt=\"user profile\"\n                     />\n                </div>\n              </div>\n              {this.state.updateMobileNumber?\n             <React.Fragment>\n               {this.changeMobileNumber()}\n               </React.Fragment>\n             :null}\n              <div className=\"text-white row mt-5\" onClick={()=>{this.setState({\n               updateEmail:!this.state.updateEmail,\n               click:!this.state.click\n\n             })}} >\n                <div className=\"col-10 \">\n                    Email:  {this.state.email}\n                </div>\n                <div className=\"col-2 \">\n                     <img\n                        className=\"mt-1\"\n                        src=\"/inclunav/assets/images/pen.svg\"\n                        alt=\"user profile\"\n                     />\n                </div>\n              </div>\n              {this.state.updateEmail?\n             <React.Fragment>\n               {this.changeEmail()}\n               </React.Fragment>\n             :null}\n           </div>\n         );\n     }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userInformation: state.userInformation,\n    nameChange:state.updateName,\n    passwordChange:state.updatePassword,\n    mobileChange:state.updateMobile,\n    emailChange:state.updateEmail,\n    otpResponse: state.sendOtp,\n    otpVerifyResponse: state.verifyOtp,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getUserInformation,\n  updateName,\n  updatePassword,\n  updateMobile,\n  updateEmail,\n  sendOtp, \n  verifyOtp\n})(ProfileSettings);\n","/home/jahnavi/navigation/src/config.js",[],"/home/jahnavi/navigation/src/components/dashboard/global/BottomBar.js",["656","657","658","659","660"],"import React from \"react\";\nimport Modal from \"react-modal\";\nimport { saveAddress } from \"../../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    background: \"#27282D\",\n    width: \"75%\"\n  },\n  overlay: { zIndex: 9999 }\n};\nclass BottomBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      type: \"\",\n      showOption: false,\n      toggle: false,\n      click:false\n    };\n  }\n\n  componentDidMount(){\n  }\n\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    let {toggle} = this.state;\n    if((this.props.dstName !== \"Destination\") && !this.state.click){\n        toggle  = true\n    }\n\n    return (\n      <div>\n        <Modal\n          isOpen={this.state.open}\n          // onAfterOpen = {afterOpenModal}\n          onRequestClose={this.onCloseModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n          // open = {this.state.open} onClose={this.onCloseModal}\n        >\n          <div className=\"row\">\n            <div className=\"col-12 text-center mt-4\">\n              <img\n                width=\"25\"\n                height=\"25\"\n                src=\"assets/images/saved_address.svg\"\n                alt=\"vew details\"\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 text-white text-center\">\n              {this.props.destinationVenue}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 text-white text-center font-weight-bold\">\n              <p className=\"h4\"> Save Location as? </p>\n            </div>\n          </div>\n\n          {this.state.showOption ? (\n            <div\n              className=\"d-flex-column justify-content-center bg-white rounded\"\n              style={{ padding: \"1px\" }}\n            >\n              <div\n                className=\"save-address-box row text-white mt-1 mb-2 ml-1 row\"\n                onClick={() => {\n                  this.setState({\n                    type: \"Home\"\n                  });\n                }}\n              >\n                <div className=\"col-2 my-auto\">\n                  <img\n                    width=\"25\"\n                    height=\"25\"\n                    src=\"assets/images/home.svg\"\n                    alt=\"vew details\"\n                  />\n                </div>\n                <div className=\"col-10 my-auto\">Home Address</div>\n              </div>\n              <div\n                className=\"save-address-box row text-white mb-2 ml-1\"\n                onClick={() => {\n                  this.setState({\n                    type: \"Home\"\n                  });\n                }}\n              >\n                <div className=\"col-2 my-auto\">\n                  <img\n                    width=\"25\"\n                    height=\"25\"\n                    src=\"assets/images/work.svg\"\n                    alt=\"vew details\"\n                  />\n                </div>\n                <div className=\"col-10 my-auto\">Work Address</div>\n              </div>\n              <div\n                className=\"save-address-box row text-white mb-2 ml-1\"\n                onClick={() => {\n                  this.setState({\n                    showOption: false\n                  });\n                }}\n              >\n                <div className=\"col-2 my-auto\">\n                  <img\n                    width=\"25\"\n                    height=\"25\"\n                    src=\"assets/images/saved_address.svg\"\n                    alt=\"vew details\"\n                  />\n                </div>\n                <div className=\"col-10 my-auto\">Custom Address</div>\n              </div>\n            </div>\n          ) : (\n            <input\n              type=\"text\"\n              className=\"form-control w-100\"\n              placeholder=\"Enter Custom Name\"\n              value={this.state.type}\n              onChange={e => {\n                this.setState({\n                  type: e.target.value\n                });\n              }}\n            />\n          )}\n\n          <div className=\"row w-100 m-0 pb-5 mt-2\">\n            <div className=\"col-6\">\n              <button\n                className={\n                  \"btn btn-language-setting btn-confirm-text mx-auto btn-block btn-default font-weight-bold h2\"\n                }\n                onClick={() => {\n                  let array = this.props.destinationVenue.split(\",\");\n                  let name = array[0];\n                  let floor = array[1].split(\" \");\n                  let buildingName = array[2];\n                  let venueName = array[3];\n                }}\n                style={{\n                  width: \"75px\",\n                  height: \"48px\",\n                  float: \"left\"\n                }}\n              >\n                SAVE\n              </button>\n            </div>\n            <div className=\"col-6\">\n              <button\n                className={\n                  \"btn btn-language-dark btn-cancel-text mx-auto btn-block btn-default font-weight-bold h2\"\n                }\n                onClick={() => {\n                  this.onCloseModal();\n                }}\n                style={{\n                  width: \"84px\",\n                  height: \"48px\",\n                  float: \"right\"\n                }}\n              >\n                CANCEL\n              </button>\n            </div>\n          </div>\n        </Modal>\n        <div\n          className={`d-flex-column ${\n            toggle ? \"bottom-barbtn\" : \"bottom-barbtn-toggle\"\n          }`}\n        >\n          <div\n            style={{ textAlign: \"center\" }}\n            onClick={() => {\n              this.setState({ toggle: !this.state.toggle,click:true });\n            }}\n          >\n            <img src=\"assets/images/viewDetails.svg\" alt=\"vew details\" />\n          </div>\n          {toggle ? (\n            <div className=\"bg-dark\">\n              <div className=\"row w-100  mx-auto mb-2\">\n                <div className=\"col-2\">\n                  <img\n                    className=\"float-left mt-2 mr-2\"\n                    src=\"/inclunav/assets/images/dst_navigate.png\"\n                    alt=\"select destination\"\n                  />\n                </div>\n                <div className=\"col-10\">\n\n                    <div className=\"row\">\n                  <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \"> {this.props.srcName} </p>\n                </div>\n                <div\n                  className=\"col-2\"\n                  onClick={() => {\n                  }}\n                >\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/way.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n                <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \">\n                  {this.props.dstName} \n                  </p>\n                </div>\n                  </div>\n\n                </div>\n                {/* <div className=\"col-2\">\n                  <div className=\"direction-text\">\n                    <div className=\"text-white\">\n                      5000\n                    </div>\n                    <div className=\"text-white strt-txt text-justify\"></div>\n                  </div>\n                </div> */}\n              </div>\n\n\n\n              \n              <div className=\"row w-100  mx-auto\">\n                <div className=\"col-6\">\n                  <button\n                    className=\"btn btn-direction  mx-auto btn-block btn-default btn-lg font-weight-bold  h2\"\n                    onClick={() => {\n                        this.props.handleInstr()\n                      // this.props.handleShowInstructions();\n                    }}\n                  >\n                    Directions\n                  </button>\n                </div>\n                <div className=\"col-2\">\n                  <button\n                    className=\"ellipse\"\n                    onClick={() => {\n                      // this.onOpenModal();\n                    }}\n                  >\n                    <img\n                      className=\"mx-auto my-auto\"\n                      src=\"/inclunav/assets/images/save_marker.svg\"\n                      alt=\"save marker\"\n                    />\n                  </button>\n                </div>\n                <div className=\"col-2\">\n                    <button\n                      className=\"ellipse\"\n                      onClick={(e)=>{\n                        if (String(this.props.dstData.properties.url) === \"null\") {\n                            /*to handle null values*/\n                            e.preventDefault();\n                            alert(` No website associated`);\n                          } else {\n                            window.open(this.props.dstData.properties.url, \"_blank\" /*Open in a new window.*/);\n                          }\n                      }}\n                    >\n                      <i class=\"mx-auto my-auto text-white fa fa-globe\"></i>\n                    </button>\n                </div>\n                <div className=\"col-2\">\n                  <button className=\"ellipse\">\n                    <img\n                      className=\"mx-auto my-auto\"\n                      src=\"/inclunav/assets/images/telephone.svg\"\n                      alt=\"save marker\"\n                    />\n                  </button>\n                </div>\n              </div>\n\n\n              {/* <div className=\"row w-100  mx-auto bottom-div mb-2 p-2\">\n                <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \">Building Entrance</p>\n                </div>\n                <div\n                  className=\"col-2\"\n                  onClick={() => {\n                  }}\n                >\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/way.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n                <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \">\n                  </p>\n                </div>\n                <div\n                  className=\"col-2\"\n                  onClick={() => {\n                    // this.props.handleShowInstructions();\n                    // this.setState({ showInstructions: true });\n                  }}\n                >\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/toggle_menu.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n              </div> */}\n\n\n\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    saveAddr: state.saveAddress\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveAddress\n})(BottomBar);\n","/home/jahnavi/navigation/src/components/dashboard/global/Instructions.js",["661"],"import React from 'react';\n\nexport default function Instructions (props) {\n  var instructions = [];\n  var stepsCount = [];\n  instructions = props.instructionSet &&  props.instructionSet.map((r, i) => {\n                    // if(!props.buildingView){\n                    //   if (\n                    //     r.text.includes(\"right\") ||\n                    //     r.text.includes(\"Right\")\n                    //   ) {\n                    //     return {src:\"assets/images/turn_right.svg\",text:r.text} \n                    //   } else if (\n                    //     r.text.includes(\"left\") ||\n                    //     r.text.includes(\"Left\")\n                    //   ) {\n                    //     return {src:\"assets/images/turn_left.svg\" ,text:r.text} \n                    //   } else if (\n                    //     r.text.includes(\"forward\") ||\n                    //     r.text.includes(\"Turn 12 O' Clock\")\n                    //   ) {\n                    //     return {src:\"assets/images/go_straight.svg\" ,text:r.text} \n                    //   } else if (\n                    //     r.text.includes(\"Turn 1 O' Clock\") ||\n                    //     r.text.includes(\"Turn 2 O' Clock\") ||\n                    //     r.text.includes(\"Turn 3 O' Clock\") ||\n                    //     r.text.includes(\"Turn 4 O' Clock\") ||\n                    //     r.text.includes(\"Turn 5 O' Clock\")\n                    //   ) {\n                    //     return {src:\"assets/images/slight_right.svg\",text:r.text} \n                    //   } else if (\n                    //     r.text.includes(\"Turn 7 O' Clock\") ||\n                    //     r.text.includes(\"Turn 8 O' Clock\") ||\n                    //     r.text.includes(\"Turn 9 O' Clock\") ||\n                    //     r.text.includes(\"Turn 10 O' Clock\") ||\n                    //     r.text.includes(\"Turn 11 O' Clock\")\n                    //   ) {\n                    //     return {src:\"assets/images/left.svg\" ,text:r.text}\n                    //   } else if (\n                    //     r.text.includes(\"Turn 6 O' Clock\")\n                    //   ) {\n                    //     return {src:\"assets/images/uturn.svg\" ,text:r.text}\n                    //   } else if (r.text.includes(\"You are at\")) {\n                    //     return {src:\"assets/images/live_location.svg\" ,text:r.text}\n                    //   } else if (r.text.includes(\"reached\")) {\n                    //     return {src:\"assets/images/reached.svg\" ,text:r.text}\n                    //   }else{\n                    //     return {src:\"assets/images/question_mark.svg\" ,text:r.text}\n                    //   }\n                    // }else{\n                      if (\n                        r.includes(\"right\") ||\n                        r.includes(\"Right\")\n                      ) {\n                        return {src:\"assets/images/turn_right.svg\",text:r} \n                      } else if (\n                        r.includes(\"left\") ||\n                        r.includes(\"Left\")\n                      ) {\n                        return {src:\"assets/images/turn_left.svg\" ,text:r} \n                      }else if (\n                        r.includes(\"Lift\") \n                      ) {\n                        return {src:\"assets/images/lift.svg\" ,text:r} \n                      }else if (\n                        r.includes(\"Stairs\") \n                      ) {\n                        return {src:\"assets/images/stairs.svg\" ,text:r} \n                      } else if (\n                        r.includes(\"forward\")\n                      ) {\n                        let theNum  = r.match(/\\d+/)\n                        if(theNum!=null){\n                        stepsCount.push(parseInt(theNum[0]))}\n                        return {src:\"assets/images/go_straight.svg\" ,text:r} \n                      }else if(r.includes(\"Turn 3 O' Clock\")){\n                        return {src:\"assets/images/right.svg\",text:'Turn right'} \n                      }else if(r.includes(\"Turn 9 O' Clock\")){\n                        return {src:\"assets/images/turn_left.svg\",text:'Turn left'} \n                      } else if (\n                        r.includes(\"Turn 1 O' Clock\") ||\n                        r.includes(\"Turn 2 O' Clock\")\n                      ) {\n                        return {src:\"assets/images/slight_right.svg\",text:'Turn slight right'} \n                      }else if(  \n                        r.includes(\"Turn 4 O' Clock\") ||\n                        r.includes(\"Turn 5 O' Clock\")){\n                          return {src:\"assets/images/uturn_right.svg\",text:'Turn back and then turn slight left'} \n                      } else if (\n                        r.includes(\"Turn 7 O' Clock\") ||\n                        r.includes(\"Turn 8 O' Clock\")\n                      ) {\n                        return {src:\"assets/images/slight_left.svg\" ,text:'turn slight left'}\n                      }else if(                        \n                        r.includes(\"Turn 10 O' Clock\") ||\n                        r.includes(\"Turn 11 O' Clock\")){\n                          return {src:\"assets/images/turn_left.svg\" ,text:'then turn slight left'}\n                      } else if (\n                        r.includes(\"Turn 6 O' Clock\")\n                      ) {\n                        return {src:\"assets/images/question_mark.svg\" ,text:'Turn back'}\n                      } else if (r.includes(\"You are at\")) {\n                        return {src:\"assets/images/source.svg\" ,text:r}\n                      } else if (r.includes(\"reach\")) {\n                        return {src:\"assets/images/destination2.svg\" ,text:r}\n                      } else if (\n                        r.includes(\"Turn 0 O' Clock\") ||\n                        r.includes(\"Turn 12 O' Clock\")\n                      ) {\n                        return {src:\"assets/images/go_straight.svg\" ,text:null} \n                      }else{\n                        return {src:\"assets/images/question_mark.svg\" ,text:r}\n                      }\n                    // }        \n  })\n  var distance\n\n  if(instructions){\n    const add = arr => arr.reduce((a, b) => a + b, 0);\n    distance = add(stepsCount);\n    instructions = instructions.filter( (el)=> {\n      return el.text != null;\n    });\n  }\n\n\n  return(\n    <React.Fragment>\n            <div className=\"bg-landing  container-fluid\" style={{marginTop:\"57px\",height:\"100vh\",position:\"fixed\"}} >\n              <div\n                className=\"row w-100\"\n                onClick={() => {\n                  props.handleInstr()\n                  // props.handleBuildingView();\n                }}\n              >\n                <div className=\"col-2\">\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/cross.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n                <div className=\"col-8\">\n                  <p className=\"direction-text text-white text-center\">\n                  {/* {parseInt(distance*0.6)} Meter */}\n                  {/* {parseFloat(props.globalDistance/1000).toFixed(3)} Km */}\n                  </p>\n                  <p className=\"strt-text text-white text-center\">\n                  {/* {props.buildingView?'via Walking':null} */}\n                  </p>\n                </div>\n                <div className=\"col-2\">\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/switch.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n              </div>\n              <div className=\"row w-100  mx-auto bottom-div mb-2 p-2\">\n                <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \">\n                    {props.srcName}\n                    {/* {props.sourceLocation.split(/(?=[A-Z])/).join(\" \")} */}\n                  </p>\n                </div>\n                <div className=\"col-4\">\n                  <img\n                    className=\"ml-2\"\n                    src=\"/inclunav/assets/images/way.svg\"\n                    alt=\"share location\"\n                  />\n                </div>\n                <div className=\"col-4\">\n                  <p className=\"strt-txt text-justify \">\n                  {props.dstName}\n\n                    {/* {props.dstAddress.split(/(?=[A-Z])/).join(\" \")} */}\n                  </p>\n                </div>\n               \n              </div>\n              <hr className=\"instructions-hr\" />\n              <div\n                className=\"row w-100\"\n                onClick={() => {\n                  // props.handleBuildingView();\n                }}\n              >\n                <div className=\"col-12\">\n                  <p className=\"steps\">Steps</p>\n                </div>\n              </div>\n              <div style={{\n                height:\"65%\",\n                overflow:\"scroll\"\n              }}>\n              { instructions&&instructions.map((r, i) => {\n                return  <React.Fragment>\n                    <hr className=\"instructions-hr\" />\n                    <div\n                      className=\"row w-100\"\n                      onClick={() => {\n                        props.handleBuildingView();\n                      }}\n                    >\n                      <div className=\"col-2\">\n                        <img src={r.src} alt=\"direction icon\"/>\n                      </div>\n                      <div className=\"col-10\">\n                        <p className=\"strt-text text-white\">{r.text}</p>\n                      </div>\n                    </div>          \n                  </React.Fragment>\n                })}\n                </div>\n                {/* {props.buildingView && instructions&&instructions.map((r, i) => {\n                console.log(\"dd\",r)\n                return  <React.Fragment>\n                    <hr className=\"instructions-hr\" />\n                    <div\n                      className=\"row w-100\"\n                      onClick={() => {\n                        props.handleBuildingView();\n                      }}\n                    >\n                      <div className=\"col-2\">\n                        <img src={r.src} alt=\"direction icon\"/>\n                      </div>\n                      <div className=\"col-10\">\n                        <p className=\"strt-text text-white\">{r}</p>\n                      </div>\n                    </div>          \n                  </React.Fragment>\n                })} */}\n            </div>\n      </React.Fragment>\n  )\n}\n\n","/home/jahnavi/navigation/src/components/dashboard/navigation/InclusiveNavigation.js",["662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755"],"import React from \"react\";\nimport {\n  Map as MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n} from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\n// import \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\n\nconst center = { lat: 28.6139, lng: 77.209 };\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n}\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: { lat: 28.6139, lng: 77.209 },\n      currentPos: { lat: 28.6139, lng: 77.209 },\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Select Source\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n      selectedDstLocation: { buildingName: \"Building\", venueName: \"Venue\" },\n      srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle:0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom:false,\n      language:'en',\n      visionType:'vision',\n      height:'<5ft',\n      ageGroup:'adult',\n      walkingType:'walk',\n      pause:false,\n      firstFlrInstruction:[],\n      secondFlrInstruction:[],\n      firstFlr:'',\n      secondFlr:'',\n      currentFloor:'',\n      instructionReady:false,\n      selectedVenue:'Select Venue',\n      selectedDestinationVenue:'Select destination venue',\n      selectedBuilding:'Select building',\n      selectedDestinationBuilding:'Select destination building',\n      destinationActive:false,\n      open:false,\n      showMenu:false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.forwardStep = 0;\n    this.lastStep = 0;\n    this.pathTune = [];\n  }\n\n  componentDidMount() {\n      let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n        let coordinates = [success.coords.latitude, success.coords.longitude];\n        this.props.getGpsLocation(\n          { lat: success.coords.latitude, lng: success.coords.longitude },\n          () => {\n            this.getUserDetails()\n            this.setCanvasregion(success)\n          }\n        );\n        this.getVenueList(coordinates);\n  }\n\n  getUserDetails = ()=>{\n    let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({id,token},()=>{\n        if(this.props.userProfile.success === false){\n          localStorage.clear();\n          this.props.history.push('/')\n        }else{\n          let data = this.props.userProfile.properties\n          this.setState({\n            language:data.language,\n            visionType:data.visionType,\n            height:data.height,\n            ageGroup:data.ageGroup,\n            walkingType:data.navigationMode\n          })          \n        }\n      })\n  }\n\n  setCanvasregion = (success)=>{\n    var cvWidth = Math.max(\n      document.getElementById(\"myCanvassrc\").clientWidth,\n      window.innerWidth || 0\n    );\n    var cvHeight = Math.max(\n      document.getElementById(\"myCanvassrc\").clientHeight,\n      window.innerHeight || 0\n    );\n    var srcBar = document.getElementById(\"src-bar\");\n    var navHeight = document.getElementById(\"nav-height\");\n    let realHeight = cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    this.setState(\n      {\n        currentLocation: \"IIT Delhi\",\n        selectedVenue:\"IIT Delhi\",\n        canvasWidth: cvWidth,\n        canvasHeight: realHeight,\n        center: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        },\n        currentPos: {\n          lat: success.coords.latitude,\n          lng: success.coords.longitude\n        }\n      },\n      () => {\n        this.mapAnimation(success)\n      }\n    );\n  }\n\n  mapAnimation = (success)=>{\n   const map = this.leafletMap.leafletElement;\n   map.flyTo(\n     new L.LatLng(\n       success.coords.latitude,\n       success.coords.longitude\n     ),\n     map.getZoom(),\n     {\n       animate: true,\n       duration: 0.5\n     }\n   );\n  }\n\n  getVenueList = (coordinates = null) => {\n    this.props.venueList(() => {\n      this.setState(\n        {\n          venueList: this.props.vnList.data\n        },\n        () => {\n          this.findNearVenue(coordinates);\n        }\n      );\n    });\n  };\n\n  fetchLocation = (venueName, buildingName, point) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      let flrListData = this.props.flrList.data;\n      let prevData = this.state.center;\n      this.setState(\n        {\n          center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle:parseInt(flrListData[0].buildingOrientation)\n          }\n        },\n        () => {\n          this.getAllBuildingElements(data,flrListData,point,prevData)\n        }\n      );\n    });\n  };\n\n  getAllBuildingElements = (data,flrListData,point,prevData)=>{\n    this.props.getAllBuildingElements(data, () => {\n      const map = this.leafletMap.leafletElement;\n      map.flyTo(\n        new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n        map.getZoom(),\n        {\n          animate: true,\n          duration: 0.5\n        }\n      );\n      this.dataFilter(data,flrListData,point,prevData,map);\n    });\n  }\n\n  dataFilter = (flrListData,point,prevData,map)=>{\n    let nodes = this.props.navigationInfo;\n    let lists = [];\n    for (let i = 0; i < nodes.length; i++) {\n      var sel = nodes[i].properties;\n      lists.push(sel);\n    }\n    const uniqueLists = Array.from(\n      new Set(\n        lists.map(o => {\n          if (o.floorElement === \"Rooms\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"FloorConnection\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"Services\") {\n            return o.coordinates;\n          } else if (o.floorElement === \"RestRooms\") {\n            return o.coordinates;\n          } else {\n            // return o.coordinates\n          }\n        })\n      )\n    ).map(id => {\n      return lists.find(a => a.coordinates === id);\n    });\n    let freeBeacon = uniqueLists.map(r=>{\n      if(r.floorElement === \"Services\"){\n        if(r.type === \"Beacons\" ){\n          return null\n        }else{\n          return r\n        }\n      }else{\n        return r\n      } \n    })\n\n    let freeData = freeBeacon.filter( (el)=> {\n      return el != null;\n    });\n    freeData.sort((a, b)=> {\n      if(a.floorElement === \"Rooms\"){\n        if(a.roomName !== undefined){\n          return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n        }else{\n          return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n        }\n      }else{\n        return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n      }\n    });\n    // if (point === \"srcBuildingLocation\") {\n    //   this.setState({\n    //     srcFloorList: freeData\n    //   });\n    // } else if (point === \"dstBuildingLocation\") {\n    //   let me = this;\n    //   let srcLat = this.state.srcBuildingLocation.lat;\n    //   let srcLng = this.state.srcBuildingLocation.lng;\n    //   if (!srcLat && !srcLng){\n    //     srcLat = prevData.lat;\n    //     srcLng = prevData.lng;\n    //   }\n    //   map.fitBounds(\n    //     L.latLngBounds(\n    //       L.latLng(srcLat, srcLng),\n    //       L.latLng(flrListData[0].lat, flrListData[0].lng)\n    //     )\n    //   );\n    //   this.setState({\n    //     dstFloorList: freeData,\n    //     zoomLevel: \"10\"\n    //   });\n    // }\n  }\n\n  findNearVenue = coordinates => {\n    let { venueList } = this.state;\n    let distList = venueList.map(r => {\n      return this.getDistance(coordinates, r);\n    });\n    let arr = [];\n    let list = this.state.venueList.map((r, i) => {\n      if (r.buildingList) {\n        let dt = r.buildingList.map(k => {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          };\n        });\n        return dt;\n      } else {\n        arr.push({\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        });\n        return {\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        };\n      }\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    let listArr = this.state.locationList.map(r => {\n      let k = distList.map(d => {\n        if (d.venueName === r.venueName) {\n          return { r, distance: d.distance };\n        }\n      });\n    });\n    let sortedArr = this.quickSort(arr);\n    if (lowest < 1) {\n      this.setState(\n        {\n          currentVenue: nearLocation,\n          locationList: arr\n        },\n        () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        }\n      );\n    } else {\n      this.setState({\n        currentVenue: {\n          address: \"\",\n          coordinates: [],\n          dateCreated: \"\",\n          distance: 2,\n          id: 35,\n          liveStatus: true,\n          organization: \"\",\n          venueName: \"\"\n        },\n        selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n        locationList: arr,\n        currentBuilding: {\n          address: \"\",\n          buildingName: \"\",\n          coordinates: [],\n          distance: 2,\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n  };\n\n  quickSort = arr => {\n    if (arr.length < 2) {\n      return arr;\n    }\n    let pivot = arr[0];\n    let lesserVal = [];\n    let greaterVal = [];\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k].venueDistance < pivot.venueDistance) {\n        lesserVal.push(arr[k]);\n      } else {\n        greaterVal.push(arr[k]);\n      }\n    }\n  };\n\n  getBuildingList = (venueName, coordinates = null) => {\n    this.props.buildingList({ venueName: venueName }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data\n        },\n        () => {\n          if (this.state.buildingList.length > 0) {\n            if(coordinates !== null){\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: { venueName: venueName, buildingName: \"\" }\n            });\n          }\n        }\n      );\n    });\n  };\n\n  findNearBuilding = coordinates => {\n    let { buildingList } = this.state;\n    let distList = buildingList.map(r => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      return this.getDistance(coordinates, r);\n    });\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    if (lowest < 50) {\n      this.setState(\n        {\n          currentBuilding: nearLocation,\n          selectedLocation: {\n            venueName: this.state.currentVenue.venueName,\n            buildingName: nearLocation.buildingName\n          }\n        },\n        () => {\n          this.setNavigation(this.state.selectedLocation);\n          this.fetchLocation(\n            this.state.selectedLocation.venueName,\n            this.state.selectedLocation.buildingName\n          );\n        }\n      );\n    }\n  };\n\n  rad = function(x) {\n    return (x * Math.PI) / 180;\n  };\n\n  getDistance = function(p1, p2) {\n    var R = 6378137; // Earth’s mean radius in meter\n    var dLat = this.rad(p2.coordinates[0] - p1[0]);\n    var dLong = this.rad(p2.coordinates[1] - p1[1]);\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.rad(p1[0])) *\n        Math.cos(this.rad(p2.coordinates[0])) *\n        Math.sin(dLong / 2) *\n        Math.sin(dLong / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = (R * c) / 1000;\n    p2.distance = d;\n    return p2; // returns the distance in km\n  };\n\n  setNavigation = data => {\n    this.props.getAllBuildingElements({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding} , () => {\n      let nodes = this.props.navigationInfo;\n    this.grids_all = [];\n      let lists = [];\n      let num_vert = 0;\n      let fc = new Map();\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          num_vert++;\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          if (fc.has(v) === false) {\n            fc.set(v, [val]);\n          } else {\n            fc.get(v).push(val);\n          }\n        }\n      }\n      this.graph = new Graph(num_vert + 2);\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.graph.addVertex(val);\n        }\n\n        if (nodes[i].properties.floorElement === \"Floor\") {\n          if (nodes[i].properties.length == 8) {\n            var v = nodes[i].properties.frConn[0].split(\",\");\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n            var len = v.length / 2;\n            if (v.length % 2 === 0) {\n              for (var j = 0; j < v.length; j = j + 2) {\n                var val =\n                  parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                  parseInt(v[j]);\n                var vert1 = nodes[i].properties.floor + \",\" + val;\n                for (var k = j + 2; k < v.length; k = k + 2) {\n                  val =\n                    parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                    parseInt(v[k]);\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\n                  this.graph.addEdge(\n                    vert1,\n                    vert2,\n                    flrmatrix[len * (j / 2) + k / 2],\n                    true\n                  );\n                }\n              }\n            } else {\n            }\n          }\n          this.grids_all.push(nodes[i]);\n        }\n      }\n\n      let getKeys = fc.keys();\n\n      for (let i of getKeys) {\n        var get_values = fc.get(i);\n        var cnt = 0;\n        var prev = null;\n        for (var j of get_values) {\n          if (cnt > 0) {\n            this.graph.addEdge(prev, j, 0, true);\n            prev = j;\n          }\n          if (cnt === 0) {\n            prev = j;\n          }\n          cnt++;\n        }\n      }\n\n      this.setState({\n        list: lists\n      });\n    });\n  };\n\n  toggle = (type, value) => event => {\n    this.setState(state => {\n      return {\n        [type]: value\n      };\n    });\n  };\n\n  findFloor = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].type) {\n          if (array[i].geomtery.type === \"Polygon\") {\n            if (array[i].properties.floor === key) {\n              return i;\n            }\n          }\n        }\n        if (array[i].floor === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n\n    let { scale } = this.state;\n\n    if(color === \"red\"){\n      let srcDiv = document.getElementById(\"srcImage\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n    }else if(color === \"yellow\"){\n      let lift = document.getElementById(\"lift\");\n      let stairs = document.getElementById(\"stairs\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      \n      let gpx,gpy;\n\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n\n      var rot = (Math.PI / 2) * 3;\n      var x = pos_x;\n      var y = pos_y;\n      var step = Math.PI / 5;\n      let frConnType = \"\";\n      let data = this.props.navigationInfo.map(r => {\n        return r.properties;\n      });\n      for (let k = 0; k < data.length; k++) {\n        if (data[k].node === i) {\n          frConnType = data[k].type;\n        }\n      }\n      if (frConnType === \"Stairs\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      } else if (frConnType === \"Lift\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      }\n       \n    }else if(color === \"green\"){\n      let dstDiv = document.getElementById(\"dstImage\");\n      let { scale } = this.state;\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n    }\n  };\n\n  color_canvas = (i, place, color) => {\n    let srcDiv = document.getElementById(\"srcImage\");\n    let dstDiv = document.getElementById(\"dstImage\");\n    if (place === \"srcmap\") {\n      let { srcfloorL, scale } = this.state;\n      var canvas = document.getElementById(\"myCanvassrc\");\n      var context = canvas.getContext(\"2d\");\n      var wrh = this.state.srcfloorL / this.state.srcfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx = newWidth / this.state.srcfloorL;\n      let gpy = newHeight / this.state.srcfloorB;\n\n      var posX = gpx * (i % srcfloorL);\n      var posY = gpy * parseInt(i / srcfloorL);\n      var halfScale = scale / 2;\n      posX = posX + halfScale;\n      posY = posY + halfScale;\n      if (color === \"green\") {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n      }else if(color === \"#bdbdbd\"){\n        let { dstfloorL, scale } = this.state;\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.fillStyle = color;\n        context.globalAlpha = 1;\n        context.fillRect(posX, posY, scale, scale);  \n      } else {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(srcDiv, posX-9,posY, 15, 15);\n      }\n    } else {\n      let { dstfloorL, scale } = this.state;\n      let canvas = document.getElementById(\"myCanvasdst\");\n      let context = canvas.getContext(\"2d\");\n      let posX = scale * (i % dstfloorL);\n      let posY = scale * parseInt(i / dstfloorL);\n      context.fillStyle = color;\n      context.fillRect(posX, posY, scale, scale);\n    }\n  };\n\n  find = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (parseInt(array[i].node) === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  find_fl = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (\n          parseInt(array[i].node) === key &&\n          array[i].floor == \"floorconnection\"\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  handleSubmit = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n    if (srcVal != null && dstVal != null) {\n      var divimg = document.getElementById(\"mydiv1\");\n      var divcan = document.getElementById(\"mydiv\");\n      var len = divimg.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divimg.childNodes[0].remove();\n      }\n      len = divcan.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divcan.childNodes[0].remove();\n      }\n      if (srcfloor === dstfloor) {\n        var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n        let ratio = cvWidth / dstfloorL;\n        let height_of_canvas = ratio * dstfloorB;\n        let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n        this.setState({\n          samefloor: true,\n          scale:factor\n        });\n        var img1 = new Image();\n        var img = document.getElementById(\"myImage\");\n        img1.src = img.src;\n        img1.hidden = true;\n        var color_canvas = this.color_canvas;\n        var me = this;\n        var dest_x = this.state.dstVal % this.state.dstfloorL;\n        var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n        let imgDiv = document.getElementById(\"myImage\");\n        this.imgDiv = imgDiv;\n        let angle = 0;\n  // status of the pointer(s)\n  let pointerangle;\n        var canvas = window.d3.select(\"canvas\").call(\n            window.d3\n              .zoom()\n              .scaleExtent([1, 8])\n              .on(\"zoom\", zoom)\n          ),\n          context = canvas.node().getContext(\"2d\"),\n          width = canvas.property(\"width\"),\n          height = canvas.property(\"height\");\n        var active = window.d3.select(null);\n        var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n        var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n        function zoom() {\n          me.setState(\n            {\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            },\n            () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            }\n          );\n        }\n        function draw() {\n          if (active.node() === this) return reset();\n          active.classed(\"active\", false);\n          active = window.d3.select(this).classed(\"active\", true);\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          context.rotate(angle);\n          context.globalAlpha = 0.5;\n          context.drawImage(\n            img1,\n            0,\n            0,\n            img1.width,\n            img1.height,\n            0,\n            0,\n            newWidth,\n            newHeight\n          );\n          // me.loadNonwalkable(\"myCanvassrc\")\n          me.callwhile(\n            me.state.srcfloor,\n            me.state.srcVal,\n            me.state.srcfloorL,\n            me.state.srcfloorB,\n            dest_x,\n            dest_y,\n            true,\n            \"myCanvassrc\"\n          );\n          color_canvas(srcVal, \"srcmap\", \"red\");\n          color_canvas(dstVal, \"srcmap\", \"green\");\n        }\n\n        function reset() {\n          active.classed(\"active\", false);\n          active = window.d3.select(null);\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, initialTransform);\n        }\n        function timer(ms) {\n          return new Promise(res => setTimeout(res, ms));\n        }\n\n        function zoomTo() {\n          let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n          let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          let gpx = newWidth / me.state.srcfloorL;\n          let gpy = newHeight / me.state.srcfloorB;\n          let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n          //Zoomed\n          let distX =\n            width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n          let distY =\n            height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n          var transform = window.d3.zoomIdentity.translate(distX, distY);\n          // .scale(1.2)\n          // .translate(-4*X,-4*Y)\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, transform);\n        }\n        img1.onload = function() {\n          draw();\n          zoomTo();\n        };\n      } else {\n        this.setState({\n          samefloor: false,\n          buildingView:true\n        });\n        this.findpath();\n      }\n    } else {\n    }\n  };\n\n  loadNonwalkable = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData = navInfo.filter(r=>{\n      return r.floor === srcfloor\n    })\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpath(start, nodes[j]);\n        this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n        start = nodes[j];\n      }\n      this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n    }\n  }\n\n  loadMultiFloorNonwalkable = (id) => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData\n\n    if(id ===\" canvas0\"){\n      floorData = navInfo.filter(r=>{\n        return r.floor === srcfloor\n      })\n    }else{\n      floorData = navInfo.filter(r=>{\n        return r.floor === dstfloor\n      })\n    }\n\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpathMulti(start, nodes[j],id);\n        // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n        start = nodes[j];\n      }\n      // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n    }\n  }\n\n  oldpath = (x, y) => {\n    // x = coord_val  y=coord_val in normal\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else {\n      g = dstfloorL * e + f;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n      this.oldpath(g, x);\n      this.oldpath(g, y);\n    }\n  };\n\n  color = (i,color,canvasid)=>{\n      let posX,posY,gpx,gpy\n      if(canvasid === \"canvas0\"){\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }else{\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);  \n  }\n\n  oldpathMulti = (x, y,id) => {\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color(g,\"#bdbdbd\",id);\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color(g,\"#bdbdbd\",id);\n    } else {\n      g = dstfloorL * e + f;\n      this.color(g,\"#bdbdbd\",id);\n      this.oldpathMulti(g, x,id);\n      this.oldpathMulti(g, y,id);\n    }\n  };\n\n  findpath() {\n    var srcvert =\n      this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert =\n      this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n    if (this.graph.hasvertex(srcvert)) {\n    } else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor == this.state.srcfloor &&\n          nodes[i].properties.floorElement === \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.srcfloor,\n        this.state.srcVal,\n        this.state.srcfloorL,\n        this.state.srcfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n\n    if (this.graph.hasvertex(dstvert)) {\n    } else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor === this.state.dstfloor &&\n          nodes[i].properties.floorElement == \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.dstfloor,\n        this.state.dstVal,\n        this.state.dstfloorL,\n        this.state.dstfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    this.specialcallwhile(\n      this.state.srcfloor,\n      srcvert,\n      this.state.dstfloor,\n      dstvert\n    );\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        break;\n      }\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n\n        var neighbour = false;\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      let ans = new Map();\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n          let canvas = window.d3\n            .select(\"#mydiv\")\n            .append(\"canvas\")\n            .attr(\"id\", \"canvas\" + ii)\n            .attr(\"style\", `border:1px solid;display:${dsp};`)\n            .attr(\"width\", this.state.canvasWidth)\n            .attr(\"height\", this.state.canvasHeight)\n            .call(\n              window.d3\n                .zoom()\n                .scaleExtent([1, 8])\n                .on(\"zoom\", multiCanvasZoom)\n            );\n\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity\n            .translate(0, 0)\n            .scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n          img1.onload = function() {\n            multiCanvas();\n            zoomTo()\n          };\n\n          function multiCanvasZoom() {\n            me.setState(\n              {\n                zoom: true,\n                // pathCaption: []\n              },\n              () => {\n                var transform = window.d3.event.transform;\n                ctx.save();\n                ctx.clearRect(0, 0, width, height);\n                ctx.translate(transform.x, transform.y);\n                ctx.scale(transform.k, transform.k);\n                loaded = false;\n                multiCanvas();\n                ctx.restore();\n              }\n            );\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              ctx.globalAlpha = 0.5;\n\n              ctx.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              var id = \"canvas\" + ii;\n              // me.loadMultiFloorNonwalkable(id)\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n              var node_count = 0;\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n                node_count++;\n              }\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n            //Zoomed\n            let distX =\n              width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n            let distY =\n              height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\n            canvas\n              .transition()\n              .duration(750)\n              .call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n    for (let i = 0; i < m; i++) {\n      var row = [],\n        row1 = [],\n        row3 = [],\n        row4 = [];\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n      this.visited[minleave[0]][minleave[1]] = 1;\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (\n            this.visited[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])\n            ] == 1\n          ) {\n          } else {\n            check = false;\n          }\n        }\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(\n              vert,\n              this.flrconn[ch][2],\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\n                parseInt(this.flrconn[ch][1])\n              ],\n              true\n            );\n          }\n          this.reset_var();\n          break;\n        }\n      }\n      this.leaves.splice(var_i, 1);\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (\n                this.minimumcost[j][k] >\n                this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  )\n              ) {\n                this.minimumcost[j][k] =\n                  this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  );\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                  minleave[1]\n                ].concat([[j, k]]);\n                notthere = 1;\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (single == true) {\n      let { scale } = this.state;\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n      let sp = this.shortestpath[dest_x][dest_y];\n      let mypoints = sp.map(r => {\n        return { x: r[0], y: r[1] };\n      });\n\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      }\n          if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n            this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n          }else{\n            this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n          }\n      var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { x: row[0], index: i };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { y: row[1], index: i };\n      });\n      let minRowX = rowX.reduce((prev, current) =>\n        prev.x < current.x ? prev : current\n      );\n      let maxRowX = rowX.reduce((prev, current) =>\n        prev.x > current.x ? prev : current\n      );\n      let minRowY = rowY.reduce((prev, current) =>\n        prev.y < current.y ? prev : current\n      );\n      let maxRowY = rowY.reduce((prev, current) =>\n        prev.y > current.y ? prev : current\n      );\n\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      };\n\n      // let conjugateDidd = this.pathTune.map((p,q,r)=>{\n      //     console.log(\"p q r\",p,q,r)\n      // })\n      let arr = this.pathTune;\n      if(arr.length == 0)return undefined;\n      var a = this.pathTune;\n      var resultX = a.map((n, i, a) => i ? n.points.x - a[i-1].points.x : 0 - n.points.x);\n\n      var resultY = a.map((n, i, a) => i ? n.points.y - a[i-1].points.y : 0 - n.points.y);\n\n      var minX = Math.min.apply(null, resultX),minY = Math.min.apply(null, resultY) ;\n      let totalMin = Math.min(minX,minY);\n      if(totalMin<5){\n        for(let t=0;t<resultX.length;t++){\n         if(totalMin === resultX[t] && this.pathTune[t-1] ){\n           this.pathTune[t].points.x = this.pathTune[t-1].points.x; \n         }else if(totalMin === resultY[t] && this.pathTune[t-1] ){\n           console.log(\"total min\",this.pathTune[t],this.pathTune[t-1])\n          this.pathTune[t].points.y = this.pathTune[t-1].points.y; \n         } \n        }\n      }\n    // return min\n\n      // let resY =  arr.reduce(function(r, e, i) {\n      //   let absR = Math.abs(r.points.x), absE = Math.abs(e.points.x);\n      //   if (absR > absE || i === 0 || (absR === absE && e.points.x > r)) r.points.x = e.points.x\n      //   return r.points.x\n      // })\n      // console.log(\"abs\",resX)\n      // console.log(\"max diff\",maxDiff)\n      // return maxDiff;\n\n      context.beginPath();\n      context.moveTo(gpx * this.pathTune[0].points.x,gpy * this.pathTune[0].points.y);\n      for (let k=0;k<this.pathTune.length;k++){\n        context.lineTo(gpx * this.pathTune[k].points.x,gpy * this.pathTune[k].points.y);\n      }\n      context.lineTo(gpx * this.pathTune[this.pathTune.length-1].points.x,gpy * this.pathTune[this.pathTune.length-1].points.y)\n      context.stroke();\n\n      // var max = Math.max.apply(null, maxRow);\n      console.log(\"pathtine\",this.pathTune)\n      // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      // for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n      //   var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n      this.reset_var();\n    }\n  }\n\n  interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n    let resultpath = [];\n    if (turningPointsPath.length === 1) {\n      resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n      return resultpath;\n    }\n    for (let i = 0; i < turningPointsPath.length - 1; i++) {\n      let points = this.interpolatePoints(\n        turningPointsPath[i],\n        turningPointsPath[i + 1],\n        seperationGap,\n        gpx,\n        gpy\n      );\n      for (let k = 0; k < points.length; k++) {\n        resultpath.push(points[k]);\n      }\n      // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n    }\n    return resultpath;\n  };\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n    let counter = seperationGap;\n    while (counter < d) {\n      let x = p1.x + (counter / d) * (p2.x - p1.x);\n      let y = p1.y + (counter / d) * (p2.y - p1.y);\n      result.push({ x: parseInt(x), y: parseInt(y) });\n      counter += 1 * seperationGap;\n    }\n    return result;\n  }\n\n  simplifyPath = (points, tolerance) => {\n    // helper classes\n    var Vector = function(x, y) {\n      this.x = x;\n      this.y = y;\n    };\n    var Line = function(p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n      this.distanceToPoint = function(point) {\n        // slope\n        var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n          // y offset\n          b = this.p1.y - m * this.p1.x,\n          d = [];\n        // distance to the linear equation\n        d.push(\n          Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n        );\n        // distance to p1\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n          )\n        );\n        // distance to p2\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n          )\n        );\n        // return the smallest distance\n        return d.sort(function(a, b) {\n          return a - b; //causes an array to be sorted numerically and ascending\n        })[0];\n      };\n    };\n\n    var douglasPeucker = function(points, tolerance) {\n      if (points.length <= 2) {\n        return [points[0]];\n      }\n      var returnPoints = [],\n        // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n        // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n        maxDistanceIndex = 0,\n        p;\n      for (var i = 1; i <= points.length - 2; i++) {\n        var distance = line.distanceToPoint(points[i]);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          maxDistanceIndex = i;\n        }\n      }\n      // check if the max distance is greater than our tollerance allows\n      if (maxDistance >= tolerance) {\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        // include this point in the output\n        returnPoints = returnPoints.concat(\n          douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n        );\n        // returnPoints.push( points[maxDistanceIndex] );\n        returnPoints = returnPoints.concat(\n          douglasPeucker(\n            points.slice(maxDistanceIndex, points.length),\n            tolerance\n          )\n        );\n      } else {\n        // ditching this point\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        returnPoints = [points[0]];\n      }\n      return returnPoints;\n    };\n    var arr = douglasPeucker(points, tolerance);\n    // always have to push the very last point on so it doesn't get left off\n    arr.push(points[points.length - 1]);\n    return arr;\n  };\n\n  find_angle = (p0, p1, c) => {\n    var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n    var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n\n    // {\n    // x: refinedPoints[currentRPoint].x,\n    // y: refinedPoints[currentRPoint].y + 1\n    // },\n    // refinedPoints[currentRPoint + 1],\n    // refinedPoints[currentRPoint]\n    return (\n      (Math.atan2(\n        cp1.y * p0c.x - cp1.x * p0c.y,\n        p0c.x * cp1.x + p0c.y * cp1.y\n      ) *\n        180) /\n      Math.PI\n    );\n  };\n\n  //Module for finding the direction's equivalent commands\n\n  findDirectionword = angle => {\n\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return (\"Go Straight\")\n      // }\n      // return (\"O' Clock\", {\n      //   angle: Math.abs(Math.round((360 + angle) / 30))\n      // });\n      return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n    //   return this.props.t(\"Go Straight\")\n    // }\n    // return this.props.t(\"O' Clock\", {\n    //   angle: Math.abs(Math.round(angle / 30))\n    // });\n    return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n\n  findWord = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      return \"Turn left\";\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    return \"Turn right\";\n\n    // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  // find the error component in the iteration and leaves it for the next iteration\n  findErrorInAngle = angle => {\n    if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n    return angle - Math.round(angle / 30) * 30;\n  };\n  //same as above but in abbreviated form\n\n  findDirectionAbbreviation = angle => {\n    if (angle > 0) return \"Right\";\n\n    return \"Left\";\n  };\n\n  findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n    //length of refined and non refined paths\n    var nRefined = refinedPoints.length;\n    var nNonRefined = nonRefinedPoints.length;\n    //converting the mapElements to ordered map for ease of access\n    var ElementMap = new Map();\n    var includedSet = new Set();\n    var word;\n    //for iteration purpose\n    var currentNRPoint = 0;\n    var currentRPoint = 0;\n    var flagList = [];\n    var i = 0;\n    var j = 0;\n    //radius defines what range to cover in a path\n    var radius = 3;\n    let pathTuning = []\n    //adding the elements to map\n    for (i = 0; i < mapElements.length; i++) {\n      let props = mapElements[i].properties;\n      if (props.floorElement === \"Rooms\") {\n        if (\n          props.floor === floor &&\n          props.roomName !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          Object.keys(props).map(id => {\n            if(id === 'roomName'){\n              props[`name`] = [...props[id]].join('');\n              delete props[id];  \n            }\n          });\n\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        }\n      } else if (props.floorElement === \"FloorConnection\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n        }\n      } else if (props.floorElement === \"Services\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else if (props.floorElement === \"RestRooms\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else {\n      }\n    }\n    //finding the indices of the\n    while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n      if (\n        nonRefinedPoints[currentNRPoint][0] ===\n          refinedPoints[currentRPoint].x &&\n        nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n      ) {\n        flagList.push(currentNRPoint);\n        currentRPoint++;\n      }\n      currentNRPoint++;\n    }\n    // Generating the direction and elaborated results\n    var DirectionResults = [];\n    var ElaboratedResults = [];\n    //entry point insertion to the list\n    DirectionResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    ElaboratedResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n    includedSet.add(\n      refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n    );\n    //iterate and /finding the desired results\n    var error = 0;\n    for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n      var angle = 0;\n      var coordinates;\n      // this.actualAngle = 155\n      if (currentRPoint === 0) {\n        angle = this.find_angle(\n          {\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          },\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n        let path_angle = angle;\n        let floorangle = this.state.floorAngle;\n        let diff = 360 - floorangle;\n        // let CurrentDirection = 60;\n        let CurrentDirection = this.actualAngle;\n        // rotateDirection\n        this.setState({\n          pathAngle:path_angle\n        })\n\n        let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n        angle = gn;\n      } else\n        angle = this.find_angle(\n          refinedPoints[currentRPoint - 1],\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n      angle = angle + error;\n      error = this.findErrorInAngle(angle);\n\n      let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n      let base = Math.cos(angle)*hypo;  \n      let height = Math.sin(angle)*hypo;\n      this.forwardStep = parseInt(Math.abs(height));   \n      this.lastStep = parseInt(Math.abs(base));\n      let steps = parseInt(this.forwardStep + hypo);\n\n      if (currentRPoint === nRefined - 2) {\n        word = this.findDirectionword(angle);\n        DirectionResults.push(word);\n        DirectionResults.push(\n          \"Move \" +\n            Math.round(\n              0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n            ) +\n            \" steps forward\"\n        );\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        break;\n      }\n     \n      if(hypo <= 6){\n        word = this.findWord(angle);\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n    }else{\n        word = this.findDirectionword(angle);\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        let step = parseInt(this.lastStep) + parseInt(Math.round(\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n          ))\n        DirectionResults.push(word);\n        DirectionResults.push(word + \" Move \" +\n        step +\n        \" steps forward\");\n    }\n\n      //this part of code handles the intermediate importatnt rooms\n      var begin = flagList[currentRPoint] + 1;\n      var end = flagList[currentRPoint + 1];\n\n      while (begin < end) {\n        var currpoint = nonRefinedPoints[begin];\n        for (\n          i = Math.max(0, currpoint[0] - radius);\n          i < currpoint[0] + radius;\n          i++\n        ) {\n          for (\n            j = Math.max(0, currpoint[1] - radius);\n            j < currpoint[1] + radius;\n            j++\n          ) {\n            if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n              var tempAngle = this.find_angle(\n                {\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                },\n                { x: i, y: j },\n                { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n              );\n              ElaboratedResults.push(\n                ElementMap.get(i + \"@\" + j).roomName +\n                  \" on your \" +\n                  this.findDirectionAbbreviation(tempAngle)\n              );\n              includedSet.add(i + \"@\" + j);\n            }\n          }\n        }\n        begin++;\n      }\n    }\n    let elem = ElementMap.get(\n      \"\" +\n        refinedPoints[nRefined - 1].x +\n        \"@\" +\n        refinedPoints[nRefined - 1].y\n    );\n    if(elem.type === \"Rest Rooms\"){\n      let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else{\n      DirectionResults.push(\n        \"You will reach \" +\n          ElementMap.get(\n            \"\" +\n              refinedPoints[nRefined - 1].x +\n              \"@\" +\n              refinedPoints[nRefined - 1].y\n          ).name\n      );\n    }\n    ElaboratedResults.push(\n      \"You have reached \" +\n        ElementMap.get(\n          \"\" +\n            refinedPoints[nRefined - 1].x +\n            \"@\" +\n            refinedPoints[nRefined - 1].y\n        ).name\n    );\n    let resultMap = DirectionResults.map(r => {\n      return { instruction: r, floor: floor };\n    });\n    this.pathTune = pathTuning\n    resultMap.forEach(element => {\n      this.setState(prevState => ({\n        pathFloor: [...prevState.pathFloor, element]\n      }));\n    });\n    let step = DirectionResults[0];\n    if(this.state.srcfloor === this.state.dstfloor){\n      if(this.state.zoom === false){\n      this.setState(\n        prevState => ({\n          pathArray: [...prevState.pathArray, DirectionResults],\n          srtdFlr: [...prevState.srtdFlr, floor],\n          instructionReady:true\n\n        }),\n        () => {\n          let flrArry = [this.state.srcfloor, this.state.dstfloor];\n          if (this.state.pathArray.length === 2) {\n            for (let k = 0; k < flrArry.length; k++) {\n              if (this.state.srtdFlr[k] === flrArry[k]) {\n                const merge3 = this.state.pathArray.flat(1);\n                this.setState({\n                  pathCaption: merge3\n                });\n              }\n            }\n          } else {\n            for (let k = 0; k < DirectionResults.length; k++) {\n              this.setState(prevState => ({\n                pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n              }));\n            }\n          }\n        }\n      );\n    }\n\n    }else{\n        if(this.state.srcfloor === floor){\n          this.setState({\n            firstFlrInstruction:DirectionResults,\n            firstFlr:floor,\n            currentFloor:floor,\n            // instructionReady:true\n          })\n        }else{\n          this.setState({\n            secondFlrInstruction:DirectionResults,\n            secondFlr:floor,\n            instructionReady:true\n          })\n        }\n    }\n      \n  };\n\n  calculatePath = (path_angle, diff, CurrentDirection) => {\n    let pathGN, rotateDirection, path_angleN;\n    if (path_angle >= 0 && path_angle < 106) {\n      pathGN = 360 - (diff - path_angle);\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle > 105 && path_angle <= 180) {\n      pathGN = path_angle - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle <= -1 && path_angle >= -180) {\n      path_angleN = 180 + path_angle;\n      pathGN = path_angleN + 180 - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    }\n    return rotateDirection;\n  };\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n\n  /* NAVIGATION DRAWER */\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n  incCanvas = () => {\n    let { scale } = this.state;\n    if (scale < 30) {\n      this.setState(\n        {\n          scale: scale + 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n  decCanvas = () => {\n    let { scale } = this.state;\n    if (scale > 2) {\n      this.setState(\n        {\n          scale: scale - 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  handleDstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    if (e.length > 0) {\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {\n        }\n      }\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState(\n        {\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  dstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type} Washroom (${e.floor})`;\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  handleSrcChange = e => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        resp = `${e[0].roomName}(${e[0].floor})`;\n        if (e[0].node === navInfo[i].properties.node) {\n\n          name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].name}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type} Washroom (${e[0].floor})`;\n      } else {\n      }\n    }\n\n    var ind = this.findFloor(floor, this.props.flrList.data);\n\n    // var srcBar = document.getElementById(\"src-bar\");\n    // var navHeight = document.getElementById(\"nav-height\");\n    // var element = document.getElementById(\"myCanvassrc\");\n    // var topPos = element.getBoundingClientRect().top;\n    // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n\n    // // image is smaller than the canvas so no need to resize\n    // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n    // // return;\n\n    // // Figure out the ratio\n    // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n    // // use whichever multiplier is smaller\n    // let ratio = ratioX < ratioY ? ratioX : ratioY;\n    // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n    // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        // setTimeout(() => {\n          this.handleSubmit();\n        // }, \"2000\");\n      }\n    );\n  };\n\n  srcChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onDstSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      dstSuggestions: this.getDstSuggestions(value)\n    });\n  };\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onDstSuggestionsClearRequested = () => {\n    this.setState({\n      dstSuggestions: []\n    });\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getDstSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getSuggestionValue = suggestion => {\n    this.srcChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  getDstSuggestionValue = suggestion => {\n    this.dstChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  renderSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  renderDstSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSrcChange = (event, { newValue }) => {\n    this.setState({\n      dstValue: newValue\n    });\n  };\n\n  nvgtSrcBld = () => {\n    let { tmpSrcLocation } = this.state;\n    let e = [tmpSrcLocation];\n    this.fetchSrcBldLocation(\n      e,\n      tmpSrcLocation.venueName,\n      tmpSrcLocation.buildingName,\n      \"srcBuildingLocation\",\n      k => {\n        this.handleDstChange(k);\n      }\n    );\n  };\n\n  nvgtDstBld = () => {\n    let { tmpDstLocation } = this.state;\n    let e = [tmpDstLocation];\n    this.fetchDstBldLocation(\n      e,\n      tmpDstLocation.venueName,\n      tmpDstLocation.buildingName,\n      \"dstBuildingLocation\",\n      k => {\n        this.handleDstChange(e);\n      }\n    );\n  };\n\n  fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            this.srcBldDstPointChange(e, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            let props = [navInfo[i].properties];\n            this.srcBldDstPointChange(props, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  srcBldDstPointChange = (e, cb) => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      }\n    );\n    cb();\n  };\n\n  navigateNext = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[0].style.display = \"none\";\n    div[1].style.display = \"block\";\n    this.setState({\n      next: false,\n      currentFloor: this.state.dstfloor\n    });\n  };\n\n  navigatePrevious = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[1].style.display = \"none\";\n    div[0].style.display = \"block\";\n    this.setState({\n      next: true,\n      currentFloor: this.state.srcfloor\n    });\n  };\n\n  handleBuildingView = () => {\n    this.setState({\n      showInstructions: false,\n    });\n  };\n\n  previousButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if (currentStep !== 0) {\n      // return (\n      //   <button\n      //     className=\"btn btn-secondary btn-sm btn-block mb-1 ml-2 mr-1\"\n      //     type=\"button\"\n      //     onClick={this._prev}\n      //   >\n      //     Previous\n      //   </button>\n      // );\n      if (currentStep < this.state.pathCaption.length) {\n        this._next();\n      }\n    }\n    return null;\n  }\n\n  nextButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if (currentStep < this.state.pathCaption.length) {\n      this._next();\n    }\n    return null;\n  }\n\n  _next = () => {\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= this.state.pathCaption.length - 1\n        ? this.state.pathCaption.length\n        : currentStep + 1;\n    if (this.state.pathCaption[currentStep]) {\n      let step = this.state.pathCaption[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    // if (\n    //   this.state.pathFloor[currentStep] !== undefined &&\n    //   this.state.pathFloor[currentStep].floor !==\n    //     this.state.pathFloor[currentStep - 1].floor\n    // ) {\n    //   this.navigateNext();\n    // }\n\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  _prev = () => {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n    if (this.state.pathFloor[currentStep + 1] !== undefined) {\n      if (\n        this.state.pathFloor[currentStep + 1].floor !==\n        this.state.pathFloor[currentStep].floor\n      ) {\n        let step = this.state.pathCaption[currentStep-1];\n        var utter = new window.SpeechSynthesisUtterance(step);\n        window.speechSynthesis.cancel();\n        window.speechSynthesis.speak(utter);\n        // this.navigatePrevious();\n      }\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  playInstruction = (pause)=>{\n    var synth = window.speechSynthesis;\n    synth.cancel();\n    if(pause === true){\n      synth.pause();\n    }else{\n      synth.resume();\n    }\n    // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n    // synth.speak(utterance);\n    // synth.resume()\n    let instruction = this.filterInstruction()\n\n    instruction.forEach(r=>{\n      var utterance1 = new SpeechSynthesisUtterance(r);\n      synth.speak(utterance1);\n    })\n  }\n\n  filterInstruction = ()=>{\n    var instructions = [];\n    var stepsCount = [];\n    let instruction;\n    if(this.state.srcfloor === this.state.dstfloor){\n      instruction = this.state.pathCaption\n    }else{\n      instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    }\n    instructions = instruction &&  instruction.map((r, i) => {\n                        if (\n                          r.includes(\"right\") ||\n                          r.includes(\"Right\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"left\") ||\n                          r.includes(\"Left\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"forward\")\n                        ) {\n                          let theNum  = r.match(/\\d+/)[0]\n                          stepsCount.push(parseInt(theNum))\n                          return r \n                        } else if (\n                          r.includes(\"Turn 1 O' Clock\") ||\n                          r.includes(\"Turn 2 O' Clock\") ||\n                          r.includes(\"Turn 3 O' Clock\") \n                        ) {\n                          return'Turn slight right' \n                        }else if(  \n                          r.includes(\"Turn 4 O' Clock\") ||\n                          r.includes(\"Turn 5 O' Clock\")){\n                            return 'Turn back and then turn slight left' \n                        } else if (\n                          r.includes(\"Turn 7 O' Clock\") ||\n                          r.includes(\"Turn 8 O' Clock\") ||\n                          r.includes(\"Turn 9 O' Clock\") \n                        ) {\n                          return 'turn slight left'\n                        }else if(                        \n                          r.includes(\"Turn 10 O' Clock\") ||\n                          r.includes(\"Turn 11 O' Clock\")){\n                            return 'Turn back and then turn slight left'\n                        } else if (\n                          r.includes(\"Turn 6 O' Clock\")\n                        ) {\n                          return 'Turn back'\n                        } else if (r.includes(\"You are at\")) {\n                          return r\n                        } else if (r.includes(\"reached\")) {\n                          return r\n                        } else if (\n                          r.includes(\"Turn 0 O' Clock\") ||\n                          r.includes(\"Turn 12 O' Clock\")\n                        ) {\n                          return null \n                        }else{\n                          return r\n                        }\n    })\n    var distance\n\n    if(instructions){\n      const add = arr => arr.reduce((a, b) => a + b, 0);\n      distance = add(stepsCount);\n      instructions = instructions.filter( (el)=> {\n        return el != null;\n      });\n    }\n    instructions.splice(instructions.length-2, 1);\n    return instructions;\n  }\n\n  handleSourceLocation = (vals)=>{\n      this.setState(\n        {\n          selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          buildingView: false\n        },\n        () => {\n          this.props.androidNavigation({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding},()=>{\n          })\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"srcBuildingLocation\"\n          );\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"dstBuildingLocation\"\n          );\n          if(this.state.dstName !== \"Select Destination\"){\n            this.handleSubmit()\n          }else{\n            this.setNavigation(this.state.selectedDstLocation);\n          }\n        }\n      );\n  }\n\n\n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n      <React.Fragment>\n\n        <div hidden={!this.state.showInstructions}>\n          <Instructions\n            dstAddress={this.state.dstAddress}\n            globalTime={this.state.globalTime}\n            globalDistance={this.state.globalDistance}\n            currentLocation={this.state.currentLocation}\n            handleBuildingView={this.handleBuildingView}\n            instructionSet={\n               combineInstructions\n            }\n            buildingView={this.state.buildingView}\n            sourceLocation={this.state.currentLocation}\n            dstLocation={this.state.dstAddress}\n          />\n        </div>\n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView ? (\n            <React.Fragment>\n              <div\n                className=\"source-destination fixed-top\"\n                id=\"src-bar\"\n                style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    {/* <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showStrtMenu: true,\n                          srcReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button> */}\n                    <SourceMenu\n                      srcName = {this.state.srcName}\n                      currentLocation = {this.state.currentLocation}\n                      selectedSrcLocation = {this.state.selectedSrcLocation}\n                      locationList = {this.state.locationList}\n                      srcReadOnly = {this.state.srcReadOnly}\n                      handleBlurr = {()=>{\n                        this.setState({\n                          srcReadOnly:!this.state.srcReadOnly\n                        })\n                      }}\n                      srcFloorList = {this.state.srcFloorList}\n                      dstAddress = {this.state.dstAddress}\n                      showStrtMenu = {() => {\n                        this.setState({ showStrtMenu: false });\n                      }}\n                      destinationActive  = {this.state.destinationActive}\n                      venueChange = {(val)=>{\n                          this.setState({\n                            selectedVenue:val,\n                            destinationActive:false,\n                            showMenu:true\n                          },()=>{\n                            this.getBuildingList(val)\n                          })\n                      }}\n                      selectedVenue = {this.state.selectedVenue}\n                      buildingList = {this.state.buildingList}\n                      showMenu = {this.state.showMenu}\n                      selectedBuilding = {this.state.selectedBuilding}\n                      buildingChange = {( vals )=>{\n                          this.setState({\n                            selectedBuilding:vals\n                          },()=>{\n                            this.handleSourceLocation()\n                          })\n                      }}\n                      venueList = {this.state.venueList}\n                      handleSelectSource = {(e)=>{\n                        if (e.length > 0) {\n                          this.setState(\n                            {\n                              tmpSrcLocation: e[0],\n                            },\n                            () => {\n                              this.handleSrcChange(e);\n                            }\n                          );\n                        }\n                      }}\n                      handleSourceLocation = {(e)=>{\n                        if (e.length > 0) {\n                          this.setState(\n                            {\n                              selectedSrcLocation: e[0],\n                              selectedDstLocation: e[0],\n                              buildingView: false\n                            },\n                            () => {\n                              this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                              })\n                              this.fetchLocation(\n                                e[0].venueName,\n                                e[0].buildingName,\n                                \"srcBuildingLocation\"\n                              );\n                              this.fetchLocation(\n                                e[0].venueName,\n                                e[0].buildingName,\n                                \"dstBuildingLocation\"\n                              );\n                              if(this.state.dstName !== \"Select Destination\"){\n                                this.handleSubmit()\n                              }else{\n                                this.setNavigation(this.state.selectedDstLocation);\n                              }\n                            }\n                          );\n                        }\n                      }}\n                      />\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto\" style={{marginTop:\"50px\"}}>\n                <div className=\"col-2\">\n                <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                </div>\n\n                  <div className=\"col-10 p-0\">\n                    {/* <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          dstReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button> */}\n                     <DestinationMenu\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    dstReadOnly:!this.state.dstReadOnly\n                  })\n                }}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                  this.setState({\n                    selectedDestinationVenue:val,\n                    destinationActive:true,\n                    showMenu:true\n                  },()=>{\n                    this.getBuildingList(val)\n                  })\n                }}\n                selectedVenue = {this.state.selectedDestinationVenue}\n                buildingList = {this.state.buildingList}\n                selectedBuilding = {this.state.selectedDestinationBuilding}\n                buildingChange = {( vals )=>{\n                    this.setState({\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true,\n                      destinationActive:false,\n                      showMenu:false\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      // if (\n                      //   this.state.selectedSrcLocation.venueName ===\n                      //     this.state.selectedDstLocation.venueName &&\n                      //   this.state.selectedSrcLocation.buildingName ===\n                      //     this.state.selectedDstLocation.buildingName\n                      // ) {\n                      //   this.setNavigation(this.state.selectedDstLocation);\n                      // }\n                      if (\n                        this.state.selectedVenue ===\n                          this.state.selectedDestinationVenue &&\n                        this.state.selectedBuilding ===\n                          this.state.selectedDestinationBuilding\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                  </div>\n                </div>\n              </div>\n              {/* {this.state.showStrtMenu && !this.state.buildingView\n                ?  */}\n                \n              {/* {this.state.showDstMenu && !this.state.buildingView\n                ?  */}\n               \n                {/* // : null} */}\n            </React.Fragment>\n          ) : null}\n          {this.state.buildingView ? (\n            <InstructionTab\n              pathCaption={combineInstructions}\n              currentStep={this.state.currentStep}\n              nextButton={()=>this.nextButton()}\n              imgDiv={this.imgDiv}\n            />\n          ) : null}\n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={!this.state.samefloor}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n          { !this.state.instructionReady ? (\n            <GlobalDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation = {this.state.dstBuildingLocation}\n              tmpDstLocation = {this.state.tmpDstLocation}\n              destinationVenue = {this.state.selectedDestinationVenue}\n              destinationBuilding = {this.state.selectedDestinationBuilding}\n              dstfloor = {this.state.dstfloor}\n              dstVal = {this.state.dstVal}\n\n\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              openModal = {this.onOpenModal}\n              closeBuilding = {()=>{\n                this.setState({\n                  buildingView: false\n                });\n              }}\n              // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              instructionSet={\n                combineInstructions\n              }\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            // null\n          ) : (\n            <React.Fragment>\n            <NavigationDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation={this.state.dstBuildingLocation}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              currentStep = {this.state.currentStep}\n              nextButton = {this.nextButton}\n              previousButton = {this.previousButton}\n              instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              playInstruction={(pause)=>{\n                this.playInstruction(pause)\n              }\n              }\n              closeBuilding = {() => {\n                this.setState({\n                  buildingView: false,\n                  instructionReady: false,\n                  zoom: false\n                });\n              }}\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            </React.Fragment>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile:state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio\n})(Navigation);\n","/home/jahnavi/navigation/src/components/dashboard/global/module.js",["756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796"],"/home/jahnavi/navigation/src/components/dashboard/navigation/Navigation.js",["797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899"],"import React from \"react\";\nimport {\n  Map as MapContainer,\n  Marker,\n  Popup,\n  TileLayer,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nimport config from \"../../../config\";\nimport { connect } from \"react-redux\";\nimport {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent,\n} from \"../../../store/actions/index\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"leaflet-routing-machine\";\nimport \"lrm-graphhopper\";\nimport Instructions from \"./Instructions\";\nimport NavigationDetails from './NavigationDetails';\nimport GlobalDetails from './GlobalDetails';\nimport InstructionTab from './InstructionTab';\nimport SourceMenu from \"./SourceMenu\";\nimport DestinationMenu from \"./DestinationMenu\";\nimport Menu from \"./Menu\";\nimport SelectSource from './SelectSource';\nimport SelectDestination from './SelectDestination';\nimport './location.css';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n    content : {\n      top                   : '55%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)',\n      background            :  \"#27282D\",\n      width                 : \"98%\",\n      height                : \"95%\"\n    },\n    overlay: {zIndex: 9999}\n  };\n\nconst center = { lat: 28.6139, lng: 77.209 };\n\nclass Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n    this.Adjweights = new Map();\n  }\n  addVertex(v) {\n    this.AdjList.set(v, []);\n    this.Adjweights.set(v, []);\n  }\n  hasvertex(v) {\n    return this.AdjList.has(v);\n  }\n  edges(v) {\n    return this.AdjList.get(v);\n  }\n  addEdge(v, w, wt, undir) {\n    if (undir) {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n      this.AdjList.get(w).push(v);\n      this.Adjweights.get(w).push(wt);\n    } else {\n      this.AdjList.get(v).push(w);\n      this.Adjweights.get(v).push(wt);\n    }\n  }\n\n  printGraph() {\n    var get_keys = this.AdjList.keys();\n    for (var i of get_keys) {\n      var get_values = this.AdjList.get(i);\n      var val = this.Adjweights.get(i);\n      var conc = \"\";\n      var conc2 = \"\";\n      for (let j of get_values) {\n        conc = conc + j + \" \";\n      }\n      for (let j of val) {\n        conc2 = conc2 + j + \" \";\n      }\n    }\n  }\n}\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: { lat: 28.6139, lng: 77.209 },\n      currentPos: { lat: 28.6139, lng: 77.209 },\n      nearestPickupPoint:{lat: 28.6139, lng: 77.209},\n      gpsLocation: \"\",\n      buildingAddress: \"\",\n      zoomLevel: \"18\",\n      showStrtMenu: false,\n      showDstMenu: false,\n      //\n      buildingName: \"\",\n      srcName: \"Search within building\",\n      srcfloor: \"none\",\n      dstfloor: \"none\",\n      list: [],\n      dstName: \"Select Destination\",\n      srcVal: null,\n      dstVal: null,\n      scale: 2.4,\n      srcfloorL: null,\n      srcfloorB: null,\n      dstfloorL: null,\n      dstfloorB: null,\n      samefloor: true,\n      canvaslist: [],\n      ind: 0,\n      sideDrawerOpen: false,\n      isLoading: false,\n      sidebarLeft: false,\n      imgName: null,\n      value: \"\",\n      suggestions: [],\n      dstValue: \"\",\n      dstSuggestions: [],\n      venueName: \"\",\n      venueList: [],\n      buildingList: [],\n      buildingView: false,\n      pathCaption: [],\n      pathFloor: [],\n      currentStep: 0,\n      srcReadOnly: false,\n      dstReadOnly: false,\n      currentLocation: \"\",\n      locationList: [],\n      selectedSrcLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\n      selectedDstLocation: { buildingName: \"Search from\", venueName: \"Indoor maps\" },\n      srcBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      dstBuildingLocation: { buildingName: \"\", venueName: \"\" },\n      srcFloorList: [],\n      dstFloorList: [],\n      selectedDestination: \"Select Destination\",\n      dstAddress: \"Select Destination\",\n      canvasWidth: null,\n      canvasHeight: null,\n      tmpSrcLocation: {},\n      tmpDstLocation: {},\n      floorAngle: 0,\n      pathAngle:0,\n      next: true,\n      showDirections: false,\n      pathArray: [],\n      srtdInstruction: [],\n      srtdFlr: [],\n      toggle: false,\n      osmRoutes: null,\n      globalDistance: 0,\n      globalTime: 0,\n      showInstructions: false,\n      zoom:false,\n      language:'en',\n      visionType:'vision',\n      height:'<5ft',\n      ageGroup:'adult',\n      walkingType:'walk',\n      pause:false,\n      firstFlrInstruction:[],\n      secondFlrInstruction:[],\n      firstFlr:'',\n      secondFlr:'',\n      currentFloor:'',\n      instructionReady:false,\n      selectedVenue:'Select Venue',\n      selectedDestinationVenue:'Select destination venue',\n      selectedBuilding:'Select building',\n      selectedDestinationBuilding:'Select destination building',\n      destinationActive:false,\n      open:false,\n      showMenu:false\n    };\n    this.shortestPathVar = [];\n    this.grids_all = [];\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n    this.graph = null;\n    this.flrconn = [];\n    this.num_floors = 0;\n    this.animateRef = false;\n    this.instructions = [];\n    this.show = 0;\n    this.actualAngle = 0;\n    this.croppedRegion = {};\n    this.distanceList = [];\n  }\n\n  componentDidMount() {\n    // if (window.navigator.geolocation) {\n    //   navigator.geolocation.getCurrentPosition(success => {\n      let success  =  {coords:{ latitude: 28.6139, longitude: 77.209 }}\n        let coordinates = [success.coords.latitude, success.coords.longitude];\n        this.props.getGpsLocation(\n          { lat: success.coords.latitude, lng: success.coords.longitude },\n          () => {\n            this.getUserDetails()\n            var cvWidth = Math.max(\n              document.getElementById(\"myCanvassrc\").clientWidth,\n              window.innerWidth || 0\n            );\n            var cvHeight = Math.max(\n              document.getElementById(\"myCanvassrc\").clientHeight,\n              window.innerHeight || 0\n            );\n\n            var srcBar = document.getElementById(\"src-bar\");\n            var navHeight = document.getElementById(\"nav-height\");\n            var element = document.getElementById(\"myCanvassrc\");\n            var topPos = element.getBoundingClientRect().top;\n            let realHeight =\n              cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n\n            this.setState(\n              {\n                // currentLocation: this.props.gpsLocation.display_name,\n                currentLocation: \"IIT Delhi\",\n                selectedVenue:\"IIT Delhi\",\n                // selectedVenue: this.props.gpsLocation.display_name,\n                canvasWidth: cvWidth,\n                canvasHeight: realHeight,\n                center: {\n                  lat: success.coords.latitude,\n                  lng: success.coords.longitude\n                },\n                currentPos: {\n                  lat: success.coords.latitude,\n                  lng: success.coords.longitude\n                }\n              },\n              () => {\n                const map = this.leafletMap.leafletElement;\n                let lat = success.coords.latitude;\n                let lng = success.coords.longitude;\n                map.flyTo(\n                  new L.LatLng(\n                    success.coords.latitude,\n                    success.coords.longitude\n                  ),\n                  map.getZoom(),\n                  {\n                    animate: true,\n                    duration: 0.5\n                  }\n                );\n              }\n            );\n          }\n        );\n        this.getVenueList(coordinates);\n    //   });\n    // } else {\n    //   // x.innerHTML = \"Geolocation is not supported by this browser.\";\n    // }\n  }\n\n  // componentDidMount(){\n  //  if (window.navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(success => {\n  //       let coordinates = [success.coords.latitude, success.coords.longitude];\n  //       this.getVenueList(coordinates);\n  //       this.props.getGpsLocation(\n  //         { lat: success.coords.latitude, lng: success.coords.longitude },\n  //         () => {\n  //           this.getUserDetails()\n  //           var cvWidth = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientWidth,\n  //             window.innerWidth || 0\n  //           );\n  //           var cvHeight = Math.max(\n  //             document.getElementById(\"myCanvassrc\").clientHeight,\n  //             window.innerHeight || 0\n  //           );\n  //           var srcBar = document.getElementById(\"src-bar\");\n  //           var navHeight = document.getElementById(\"nav-height\");\n  //           var element = document.getElementById(\"myCanvassrc\");\n  //           var topPos = element.getBoundingClientRect().top;\n  //           let realHeight =\n  //             cvHeight - (srcBar.clientHeight + navHeight.clientHeight);\n  //           this.setState(\n  //             {\n  //               currentLocation: this.props.gpsLocation.display_name,\n  //               // currentLocation: \"IIT Delhi\",\n  //               // selectedVenue:\"IIT\",\n  //               selectedVenue: this.props.gpsLocation.display_name,\n  //               canvasWidth: cvWidth,\n  //               canvasHeight: realHeight,\n  //               center: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               },\n  //               currentPos: {\n  //                 lat: success.coords.latitude,\n  //                 lng: success.coords.longitude\n  //               }\n  //             },\n  //             () => {\n  //               const map = this.leafletMap.leafletElement;\n  //               let lat = success.coords.latitude;\n  //               let lng = success.coords.longitude;\n  //               map.flyTo(\n  //                 new L.LatLng(\n  //                   success.coords.latitude,\n  //                   success.coords.longitude\n  //                 ),\n  //                 map.getZoom(),\n  //                 {\n  //                   animate: true,\n  //                   duration: 0.5\n  //                 }\n  //               );\n  //             }\n  //           );\n  //         }\n  //       );\n  //       // this.getVenueList(coordinates);\n  //     });\n  //   } else {\n  //     // x.innerHTML = \"Geolocation is not supported by this browser.\";\n  //   }\n  // }\n\n  getUserDetails = ()=>{\n    let id = localStorage.getItem('id');\n      let token = localStorage.getItem('token');\n      this.props.getUserPortfolio({id,token},()=>{\n        if(this.props.userProfile.success === false){\n          localStorage.clear();\n          this.props.history.push('/')\n        }else{\n          let data = this.props.userProfile.properties\n          this.setState({\n            language:data.language,\n            visionType:data.visionType,\n            height:data.height,\n            ageGroup:data.ageGroup,\n            walkingType:data.navigationMode\n          })          \n        }\n      })\n  }\n\n  fetchLocation = (venueName, buildingName, point) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n\n      let flrListData = this.props.flrList.data;\n      let prevData = this.state.center;\n      this.setState(\n        {\n          center: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          currentPos: { lat: flrListData[0].lat, lng: flrListData[0].lng },\n          [point]: {\n            venueName,\n            buildingName,\n            lat: flrListData[0].lat,\n            lng: flrListData[0].lng,\n            floorAngle:parseInt(flrListData[0].buildingOrientation)\n          }\n        },\n        () => {\n\n          this.props.getAllBuildingElements(data, () => {\n            const map = this.leafletMap.leafletElement;\n            map.flyTo(\n              new L.LatLng(flrListData[0].lat, flrListData[0].lng),\n              map.getZoom(),\n              {\n                animate: true,\n                duration: 0.5\n              }\n            );\n\n\n            let nodes = this.props.navigationInfo;\n            let lists = [];\n            for (let i = 0; i < nodes.length; i++) {\n              var sel = nodes[i].properties;\n              lists.push(sel);\n            }\n\n            const uniqueLists = Array.from(\n              new Set(\n                lists.map(o => {\n                  if (o.floorElement === \"Rooms\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"FloorConnection\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"Services\") {\n                    return o.coordinates;\n                  } else if (o.floorElement === \"RestRooms\") {\n                    return o.coordinates;\n                  } else {\n                    // return o.coordinates\n                  }\n                })\n              )\n            ).map(id => {\n              return lists.find(a => a.coordinates === id);\n            });\n            let freeBeacon = uniqueLists.map(r=>{\n              if(r.floorElement === \"Services\"){\n                if(r.type === \"Beacons\" ){\n                  return null\n                }else{\n                  return r\n                }\n              }else{\n                return r\n              } \n            })\n\n            let freeData = freeBeacon.filter( (el)=> {\n              return el != null;\n            });\n            freeData.sort((a, b)=> {\n              if(a.floorElement === \"Rooms\"){\n                if(a.roomName !== undefined){\n                  return a.roomName < b.roomName ? -1 : (a.roomName > b.roomName ? 1 : 0);\n                }else{\n                  return a.name < b.name ? -1 : (a.name > b.name ? 1 : 0);\n                }\n              }else{\n                return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n              }\n            });\n            if (point === \"srcBuildingLocation\") {\n              this.setState({\n                srcFloorList: freeData\n              });\n            } else if (point === \"dstBuildingLocation\") {\n              let me = this;\n              let srcLat = this.state.srcBuildingLocation.lat;\n              let srcLng = this.state.srcBuildingLocation.lng;\n              if (!srcLat && !srcLng){\n                srcLat = prevData.lat;\n                srcLng = prevData.lng;\n              }\n\n              // L.Routing.control({\n              //   waypoints: [\n              //     L.latLng(srcLat, srcLng),\n              //     L.latLng(flrListData[0].lat, flrListData[0].lng)\n              //   ],\n              //   routeWhileDragging: false,\n              //   autoRoute: true,\n              //   useZoomParameter: false,\n              //   draggableWaypoints: false,\n              //   show: false,\n              //   addWaypoints: false,\n              //   createMarker: function(i, wp) {\n              //     return L.marker(wp.latLng)\n              //       .on(\"click\", function(e) {\n              //         if (\n              //           e.latlng.lat === me.state.srcBuildingLocation.lat &&\n              //           e.latlng.lng === me.state.srcBuildingLocation.lng\n              //         ) {\n              //           me.nvgtSrcBld();\n              //         } else {\n              //           me.nvgtDstBld();\n              //         }\n              //       })\n              //       .bindPopup(\n              //         i === 0 ? \"Source Building\" : \"Destination Building\"\n              //       );\n              //   }\n              // })\n              //   .addTo(map)\n              //   .on(\"routesfound\", function(e) {\n              //     let distance = e.routes[0].summary.totalDistance;\n              //     me.setState({\n              //       osmRoutes: e.routes[0].instructions,\n              //       globalDistance: e.routes[0].summary.totalDistance,\n              //       globalTime: e.routes[0].summary.totalTime\n              //     });\n              //   });\n\n              map.fitBounds(\n                L.latLngBounds(\n                  L.latLng(srcLat, srcLng),\n                  L.latLng(flrListData[0].lat, flrListData[0].lng)\n                )\n              );\n              this.setState({\n                dstFloorList: freeData,\n                zoomLevel: \"10\"\n              });\n            }\n          });\n        }\n      );\n    });\n  };\n\n  getVenueList = (coordinates = null) => {\n    this.props.venueList(() => {\n      console.log(\"vn lisrt\",this.props.vnList)\n      this.setState(\n        {\n          venueList: this.props.vnList.data\n        },\n        () => {\n          this.findNearVenue(coordinates);\n        }\n      );\n    });\n  };\n\n  findNearVenue = coordinates => {\n    let { venueList } = this.state;\n    let dl = venueList.map(async r => {\n     let resp = await this.getDistance(coordinates, r)\n     return resp\n    });\n    Promise.all(dl).then(distList=>{\n    let arr = [];\n    let list = this.state.venueList.map((r, i) => {\n      if (r.buildingList) {\n        let dt = r.buildingList.map(k => {\n          arr.push({\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          });\n          return {\n            venueName: r.venueName,\n            buildingName: k,\n            venueDistance: distList[i].distance\n          };\n        });\n        return dt;\n      } else {\n        arr.push({\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        });\n        return {\n          venueName: r.venueName,\n          buildingName: \"\",\n          venueDistance: distList[i].distance\n        };\n      }\n    });\n\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n    }\n    let listArr = this.state.locationList.map(r => {\n      let k = distList.map(d => {\n        if (d.venueName === r.venueName) {\n          return { r, distance: d.distance };\n        }\n      });\n    });\n    let sortedArr = this.quickSort(arr);\n\n    if (lowest < 1) {\n\n      this.setState(\n        {\n          currentVenue: nearLocation,\n          locationList: arr\n        },\n        () => {\n          this.getBuildingList(nearLocation.venueName, coordinates);\n        }\n      );\n    } else {\n      this.setState({\n        currentVenue: {\n          address: \"\",\n          coordinates: [],\n          dateCreated: \"\",\n          distance: 2,\n          id: 35,\n          liveStatus: true,\n          organization: \"\",\n          venueName: \"\"\n        },\n        selectedLocation: { venueName: \"Venue\", buildingName: \"Building\" },\n        locationList: arr,\n        currentBuilding: {\n          address: \"\",\n          buildingName: \"\",\n          coordinates: [],\n          distance: 2,\n          lat: 0,\n          lng: 0\n        }\n      });\n    }\n    })\n\n  };\n\n  quickSort = arr => {\n    if (arr.length < 2) {\n      return arr;\n    }\n    let pivot = arr[0];\n    let lesserVal = [];\n    let greaterVal = [];\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k].venueDistance < pivot.venueDistance) {\n        lesserVal.push(arr[k]);\n      } else {\n        greaterVal.push(arr[k]);\n      }\n    }\n  };\n\n  getBuildingList = (venueName, coordinates = null) => {\n    this.props.buildingList({ venueName: venueName }, () => {\n      this.setState(\n        {\n          buildingList: this.props.bldList.data\n        },\n        () => {\n          \n          if (this.state.buildingList.length > 0) {\n\n            if(coordinates !== null){\n\n              this.findNearBuilding(coordinates);\n            }\n          } else {\n            this.setState({\n              selectedLocation: { venueName: venueName, buildingName: \"\" }\n            });\n          }\n        }\n      );\n    });\n  };\n\n  findNearBuilding = coordinates => {\n    let { buildingList } = this.state;\n    let distList = buildingList.map(r => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      return this.getDistance(coordinates, r);\n    });\n\n    let dl = buildingList.map(async (r,i) => {\n      let p = [r.lat, r.lng];\n      r.coordinates = p;\n      let resp = await this.getDistance(coordinates, r)\n      return resp\n     });\n     \n    Promise.all(dl).then(distList=>{\n      var lowest = Number.POSITIVE_INFINITY;\n      var highest = Number.NEGATIVE_INFINITY;\n      var tmp;\n      let nearLocation;\n      for (var i = distList.length - 1; i >= 0; i--) {\n        tmp = distList[i].distance;\n        if (tmp < lowest) {\n          nearLocation = distList[i];\n          lowest = tmp;\n        }\n        if (tmp > highest) highest = tmp;\n    }\n  \n      if (lowest < 50) {\n        if(nearLocation.pickupLat){\n          let coordinate =  nearLocation.pickupLat.map((r,i)=>{\n            return {lat:parseFloat(r),lng:parseFloat(nearLocation.pickupLng[i])}\n          })\n  \n            let dist = coordinate.map(p=>{\n             let dl =  this.euclideanDistance(coordinates,[p.lat,p.lng])\n              return dl;\n            })\n  \n            let lower = this.nearLocation(dist);\n            this.setState(\n            {\n              currentBuilding: nearLocation,\n              selectedLocation: {\n                venueName: this.state.currentVenue.venueName,\n                buildingName: nearLocation.buildingName,\n                nearestPickupPoint: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]},\n                currentPos: {lat: lower.nearLocation[0], lng: lower.nearLocation[1]}\n              }\n            },\n            () => {\n              // this.setNavigation(this.state.selectedLocation);\n              // this.fetchLocation(\n              //   this.state.selectedLocation.venueName,\n              //   this.state.selectedLocation.buildingName\n              // );\n            }\n          );\n\n        }\n\n      }\n    })\n  };\n\n  nearLocation = (distList)=>{\n    var lowest = Number.POSITIVE_INFINITY;\n    var highest = Number.NEGATIVE_INFINITY;\n    var tmp;\n    let nearLocation;\n    for (var i = distList.length - 1; i >= 0; i--) {\n      tmp = distList[i].distance;\n      if (tmp < lowest) {\n        nearLocation = distList[i];\n        lowest = tmp;\n      }\n      if (tmp > highest) highest = tmp;\n  }\n  return {lowest,nearLocation};\n  }\n\n  euclideanDistance = (p1, p2)=>{\n    var R = 6378137; // Earth’s mean radius in meter\n    var dLat = this.rad(p2[0] - p1[0]);\n    var dLong = this.rad(p2[1] - p1[1]);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(this.rad(p1[0])) *\n        Math.cos(this.rad(p2[0])) *\n        Math.sin(dLong / 2) *\n        Math.sin(dLong / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = (R * c) / 1000;\n    p2.distance = d;\n    return p2; // returns the distance in km\n  }\n\n  rad = function(x) {\n    return (x * Math.PI) / 180;\n  };\n\n  getDistance = (p1, p2)=> {\n    let data = { srcLat:p2.coordinates[0],srcLng:p2.coordinates[1],dstLat:p1[0],dstLng:p1[1]}\n    // this.props.osmRoutes(data,()=>{\n    // })\n\n    let me = this\n      const map = me.leafletMap.leafletElement;\n      var routeControl = L.Routing.control({\n        waypoints: [\n          L.latLng(p1[0], p1[1]),\n          L.latLng(p2.coordinates[0], p2.coordinates[1])\n        ], \n        routeWhileDragging: true,\n        show: false,\n        showAlternatives:false,\n        routeLine:false,\n        createMarker: function(p1,p2) {}\n      }).addTo(map)\n      return new Promise((resolve, reject) => {\n        routeControl.on('routesfound', (e)=> {\n          var routes = e.routes;\n          var summary = routes[0].summary;\n          p2.distance = summary.totalDistance / 1000;\n          this.distanceList.push(p2)\n          resolve(p2)\n          // return {p2}\n        });\n      })\n      \n \n  \n  \n  };\n\n  setNavigation = data => {\n                                    // this.props.androidNavigation(data, () => {\n                                // })\n    this.props.getAllBuildingElements({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding} , () => {\n    let nodes = this.props.navigationInfo;\n    this.grids_all = [];\n\n      let lists = [];\n      let num_vert = 0;\n      let fc = new Map();\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          num_vert++;\n          var v = nodes[i].properties.type + \",\" + nodes[i].properties.name;\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          if (fc.has(v) === false) {\n            fc.set(v, [val]);\n          } else {\n            fc.get(v).push(val);\n          }\n        }\n      }\n      this.graph = new Graph(num_vert + 2);\n      for (let i = 0; i < nodes.length; i++) {\n        var sel = nodes[i].properties;\n        lists.push(sel);\n        if (nodes[i].properties.floorElement === \"FloorConnection\") {\n          var val = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          this.graph.addVertex(val);\n        }\n\n        if (nodes[i].properties.floorElement === \"Floor\") {\n          if (nodes[i].properties.length == 8) {\n            var v = nodes[i].properties.frConn[0].split(\",\");\n            var flrmatrix = nodes[i].properties.flr_dist_matrix[0].split(\",\");\n            var len = v.length / 2;\n            if (v.length % 2 === 0) {\n              for (var j = 0; j < v.length; j = j + 2) {\n                var val =\n                  parseInt(nodes[i].properties.length) * parseInt(v[j + 1]) +\n                  parseInt(v[j]);\n                var vert1 = nodes[i].properties.floor + \",\" + val;\n                for (var k = j + 2; k < v.length; k = k + 2) {\n                  val =\n                    parseInt(nodes[i].properties.length) * parseInt(v[k + 1]) +\n                    parseInt(v[k]);\n                  var vert2 = nodes[i].properties.floor + \",\" + val;\n                  this.graph.addEdge(\n                    vert1,\n                    vert2,\n                    flrmatrix[len * (j / 2) + k / 2],\n                    true\n                  );\n                }\n              }\n            } else {\n            }\n          }\n\n          this.grids_all.push(nodes[i]);\n\n        }\n      }\n\n      let getKeys = fc.keys();\n\n      for (let i of getKeys) {\n        var get_values = fc.get(i);\n        var cnt = 0;\n        var prev = null;\n        for (var j of get_values) {\n          if (cnt > 0) {\n            this.graph.addEdge(prev, j, 0, true);\n            prev = j;\n          }\n          if (cnt === 0) {\n            prev = j;\n          }\n          cnt++;\n        }\n      }\n      // if(this.state.srcfloor === this.state.dstfloor){\n      console.log(\"graph\",this.graph)\n      this.setState({\n        // canvasWidth: cvWidth,\n        // canvasHeight: height_of_canvas,\n        list: lists\n      });\n      // }\n    });\n  };\n\n  toggle = (type, value) => event => {\n    this.setState(state => {\n      return {\n        [type]: value\n      };\n    });\n  };\n\n  findFloor = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].type) {\n          if (array[i].geomtery.type === \"Polygon\") {\n            if (array[i].properties.floor === key) {\n              return i;\n            }\n          }\n        }\n        if (array[i].floor === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n\n    let { scale } = this.state;\n\n    if(color === \"red\"){\n      let srcDiv = document.getElementById(\"srcImage\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n    }else if(color === \"yellow\"){\n      let lift = document.getElementById(\"lift\");\n      let stairs = document.getElementById(\"stairs\");\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      \n      let gpx,gpy;\n\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n\n      var rot = (Math.PI / 2) * 3;\n      var x = pos_x;\n      var y = pos_y;\n      var step = Math.PI / 5;\n      let frConnType = \"\";\n      let data = this.props.navigationInfo.map(r => {\n        return r.properties;\n      });\n      for (let k = 0; k < data.length; k++) {\n        if (data[k].node === i) {\n          frConnType = data[k].type;\n        }\n      }\n      if (frConnType === \"Stairs\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      } else if (frConnType === \"Lift\") {\n        var half_scale = scale / 2;\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      }\n       \n    }else if(color === \"green\"){\n      let dstDiv = document.getElementById(\"dstImage\");\n      let { scale } = this.state;\n      let canvas = document.getElementById(canvasid);\n      let context = canvas.getContext(\"2d\");\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      let pos_x = gpx * (i % srcfloorL);\n      let pos_y = gpy * parseInt(i / srcfloorL);\n      context.fillStyle = color;\n      // context.fillRect(pos_x, pos_y, scale, scale);  \n      context.drawImage(dstDiv, pos_x, pos_y, 10, 10);\n    }\n  };\n\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n  //   let { scale } = this.state;\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n\n  //   let lift = document.getElementById(\"lift\");\n  //   let stairs = document.getElementById(\"stairs\");\n\n  //   var canvas = document.getElementById(canvasid);\n  //   var context = canvas.getContext(\"2d\");\n  //   let gpx, gpy,pos_x,pos_y;\n  //   if (canvasid === \"canvas0\") {\n  //     let wrh = this.state.srcfloorL / this.state.srcfloorB;\n  //     let newWidth = this.state.canvasWidth;\n  //     let newHeight = newWidth / wrh;\n  //     if (newHeight > this.state.canvasHeight) {\n  //       newHeight = this.state.canvasHeight;\n  //       newWidth = newHeight * wrh;\n  //     }\n  //     gpx = newWidth / this.state.srcfloorL;\n  //     gpy = newHeight / this.state.srcfloorB;\n\n  //     pos_x = gpx * (i % this.state.srcfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\n  //   } else {\n  //     let wrh = this.state.dstfloorL / this.state.dstfloorB;\n  //     let newWidth = this.state.canvasWidth;\n  //     let newHeight = newWidth / wrh;\n  //     if (newHeight > this.state.canvasHeight) {\n  //       newHeight = this.state.canvasHeight;\n  //       newWidth = newHeight * wrh;\n  //     }\n  //     gpx = newWidth / this.state.dstfloorL;\n  //     gpy = newHeight / this.state.dstfloorB;\n\n  //     pos_x = gpx * (i % this.state.dstfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\n  \n  //   }\n\n  //   var halfScale = scale / 2;\n\n  //   if (color === \"yellow\") {\n      // var rot = (Math.PI / 2) * 3;\n      // var x = pos_x;\n      // var y = pos_y;\n      // var step = Math.PI / 5;\n      // let frConnType = \"\";\n      // let data = this.props.navigationInfo.map(r => {\n      //   return r.properties;\n      // });\n      // for (let k = 0; k < data.length; k++) {\n      //   if (data[k].node === i) {\n      //     frConnType = data[k].type;\n      //   }\n      // }\n      // if (frConnType === \"Stairs\") {\n      //   var half_scale = scale / 2;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.drawImage(stairs, pos_x - 12.5, pos_y - 6.25, 25, 25);\n      // } else if (frConnType === \"Lift\") {\n      //   var half_scale = scale / 2;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.drawImage(lift, pos_x - 12, pos_y + 6.25, 25, 25);\n      // }\n  //   } else if (color === \"green\") {\n  //     let half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(dstDiv, pos_x, pos_y, 25, 25);\n  //   } else {\n\n  //     let half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(srcDiv, pos_x, pos_y, 10, 10);\n  //   }\n  // };\n\n  // color_canvas_spl = (i, canvasid, color, srcfloorL) => {\n  //   let { scale } = this.state;\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n\n  //   let lift = document.getElementById(\"lift\");\n  //   let stairs = document.getElementById(\"stairs\");\n\n  //   var canvas = document.getElementById(canvasid);\n  //   var context = canvas.getContext(\"2d\");\n  //   let gpx, gpy,pos_x,pos_y;\n  //   if (canvasid === \"canvas0\") {\n  //     gpx = this.state.canvasWidth / this.state.srcfloorL;\n  //     gpy = this.state.canvasHeight / this.state.srcfloorB;\n      \n  //     pos_x = gpx * (i % this.state.srcfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.srcfloorL);\n  //   } else {\n  //     gpx = this.state.canvasWidth / this.state.dstfloorL;\n  //     gpy = this.state.canvasHeight / this.state.dstfloorB;\n    \n  //     pos_x = gpx * (i % this.state.dstfloorL);\n  //     pos_y = gpy * parseInt(i / this.state.dstfloorL);\n  //   }\n    \n  //   var halfScale = scale / 2;\n\n  //   if (color === \"yellow\") {\n  //     var rot = (Math.PI / 2) * 3;\n  //     var x = pos_x;\n  //     var y = pos_y;\n  //     var step = Math.PI / 5;\n  //     let frConnType = \"\";\n  //     let data = this.props.navigationInfo.map(r => {\n  //       return r.properties;\n  //     });\n\n  //     for (let k = 0; k < data.length; k++) {\n  //       if (data[k].node === i) {\n  //         frConnType = data[k].type;\n  //       }\n  //     }\n\n  //     if (frConnType === \"Stairs\") {\n  //       var half_scale = scale / 2;\n  //       pos_x = pos_x + half_scale;\n  //       pos_y = pos_y + half_scale;\n  //       context.drawImage(stairs, pos_x-12.5, pos_y-6.25, 25, 25);\n  //     } else if (frConnType === \"Lift\") {\n  //       var half_scale = scale / 2;\n  //       pos_x = pos_x + half_scale;\n  //       pos_y = pos_y + half_scale;\n  //       context.drawImage(lift,pos_x-12,pos_y+6.25, 25, 25);\n  //     }\n  //   } else if (color === \"green\") {\n  //     var half_scale = scale / 2;\n  //     pos_x = pos_x + half_scale;\n  //     pos_y = pos_y + half_scale;\n  //     context.drawImage(dstDiv, pos_x - 15, pos_y - 25, 25, 25);\n  //   } else {\n  //     // var half_scale = scale / 2;\n  //     // pos_x = pos_x + half_scale;\n  //     // pos_y = pos_y + half_scale;\n  //     let { scale } = this.state;\n  //     let canvas = document.getElementById(canvasid);\n  //     let context = canvas.getContext(\"2d\");\n  //     context.fillStyle = color;\n  //     context.fillRect(pos_x, pos_y, scale, scale);\n  //     // context.drawImage(srcDiv, pos_x, pos_y,scale,scale);\n      \n  //   }\n  // };\n\n  // color_canvas = (i, place, color) => {\n  //   let srcDiv = document.getElementById(\"srcImage\");\n  //   let dstDiv = document.getElementById(\"dstImage\");\n  //   if (place === \"srcmap\") {\n  //     let { srcfloorL, scale } = this.state;\n  //     var canvas = document.getElementById(\"myCanvassrc\");\n  //     var context = canvas.getContext(\"2d\");\n  //     let gpx = this.state.canvasWidth / this.state.srcfloorL;\n  //     let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n  //     var posX = gpx * (i % srcfloorL);\n  //     var posY = gpy * parseInt(i / srcfloorL);\n  //     var halfScale = scale / 2;\n  //     posX = posX + halfScale;\n  //     posY = posY + halfScale;\n  //     context.beginPath();\n  //     var half_scale = scale / 2;\n  //     context.arc(posX, posY, 5, 0, 2 * Math.PI);\n  //     context.fillStyle = color;\n  //     context.fill();\n  //     context.stroke();\n  //   } else {\n  //     let { dstfloorL, scale } = this.state;\n  //     let canvas = document.getElementById(\"myCanvasdst\");\n  //     let context = canvas.getContext(\"2d\");\n  //     let posX = scale * (i % dstfloorL);\n  //     let posY = scale * parseInt(i / dstfloorL);\n  //     context.fillStyle = color;\n  //     context.fillRect(posX, posY, scale, scale);\n  //   }\n  // };\n\n  color_canvas = (i, place, color) => {\n    let srcDiv = document.getElementById(\"srcImage\");\n    let dstDiv = document.getElementById(\"dstImage\");\n    if (place === \"srcmap\") {\n      let { srcfloorL, scale } = this.state;\n      var canvas = document.getElementById(\"myCanvassrc\");\n      var context = canvas.getContext(\"2d\");\n      // let gpx = this.state.canvasWidth / this.state.srcfloorL;\n      // let gpy = this.state.canvasHeight / this.state.srcfloorB;\n\n      var wrh = this.state.srcfloorL / this.state.srcfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n\n      let gpx = newWidth / this.state.srcfloorL;\n      let gpy = newHeight / this.state.srcfloorB;\n\n      var posX = gpx * (i % srcfloorL);\n      var posY = gpy * parseInt(i / srcfloorL);\n      var halfScale = scale / 2;\n      posX = posX + halfScale;\n      posY = posY + halfScale;\n      if (color === \"green\") {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(dstDiv, posX - 15, posY - 25, 12, 15);\n      }else if(color === \"#bdbdbd\"){\n        let { dstfloorL, scale } = this.state;\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.fillStyle = color;\n        context.globalAlpha = 1;\n        context.fillRect(posX, posY, scale, scale);  \n      } else {\n        var half_scale = scale / 2;\n        posX = posX + half_scale;\n        posY = posY + half_scale;\n        context.globalAlpha = 1;\n        context.drawImage(srcDiv, posX-9,posY, 15, 15);\n      }\n    } else {\n      let { dstfloorL, scale } = this.state;\n      let canvas = document.getElementById(\"myCanvasdst\");\n      let context = canvas.getContext(\"2d\");\n      let posX = scale * (i % dstfloorL);\n      let posY = scale * parseInt(i / dstfloorL);\n      context.fillStyle = color;\n      context.fillRect(posX, posY, scale, scale);\n    }\n  };\n\n  find = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (parseInt(array[i].node) === key) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  find_fl = (key, array) => {\n    if (array !== undefined) {\n      for (let i = 0; i < array.length; i++) {\n        if (\n          parseInt(array[i].node) === key &&\n          array[i].floor == \"floorconnection\"\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  };\n\n  handleSubmit = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal,dstfloorL,dstfloorB } = this.state;\n    if (srcVal != null && dstVal != null) {\n      var divimg = document.getElementById(\"mydiv1\");\n      var divcan = document.getElementById(\"mydiv\");\n      var len = divimg.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divimg.childNodes[0].remove();\n      }\n\n      len = divcan.childNodes.length;\n      for (var i = 0; i < len; i++) {\n        var elem = divcan.childNodes[0].remove();\n      }\n\n      if (srcfloor === dstfloor) {\n        var cvWidth = document.getElementById(\"myCanvassrc\").clientWidth;\n        let ratio = cvWidth / dstfloorL;\n        let height_of_canvas = ratio * dstfloorB;\n        let factor = Math.ceil(parseInt(cvWidth) / dstfloorL);\n\n        this.setState({\n          samefloor: true,\n          scale:factor\n        });\n        \n        var img1 = new Image();\n        var img = document.getElementById(\"myImage\");\n        img1.src = img.src;\n        img1.hidden = true;\n        var color_canvas = this.color_canvas;\n        var me = this;\n        var dest_x = this.state.dstVal % this.state.dstfloorL;\n        var dest_y = parseInt(this.state.dstVal / this.state.dstfloorL);\n        let imgDiv = document.getElementById(\"myImage\");\n        this.imgDiv = imgDiv;\n        let angle = 0;\n\n  // status of the pointer(s)\n  let pointerangle;\n\n        var canvas = window.d3.select(\"canvas\").call(\n            window.d3\n              .zoom()\n              .scaleExtent([1, 8])\n              .on(\"zoom\", zoom)\n          ),\n          context = canvas.node().getContext(\"2d\"),\n          width = canvas.property(\"width\"),\n          height = canvas.property(\"height\");\n        var active = window.d3.select(null);\n        var zoom1 = window.d3.zoom().on(\"zoom\", zoom);\n        var initialTransform = window.d3.zoomIdentity.translate(0, 0).scale(1);\n        function zoom() {\n          me.setState(\n            {\n              animation: false,\n              // pathCaption: [],\n              pathFloor: [],\n              pathArray: [],\n              currentStep: 0,\n              zoom: true\n            },\n            () => {\n              var transform = window.d3.event.transform;\n              context.save();\n              context.clearRect(0, 0, width, height);\n              context.translate(transform.x, transform.y);\n              context.scale(transform.k, transform.k);\n              draw();\n              context.restore();\n            }\n          );\n        }\n        function draw() {\n          if (active.node() === this) return reset();\n          active.classed(\"active\", false);\n          active = window.d3.select(this).classed(\"active\", true);\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          context.rotate(angle);\n          context.globalAlpha = 0.5;\n          context.drawImage(\n            img1,\n            0,\n            0,\n            img1.width,\n            img1.height,\n            0,\n            0,\n            newWidth,\n            newHeight\n          );\n          // me.loadNonwalkable(\"myCanvassrc\")\n          me.callwhile(\n            me.state.srcfloor,\n            me.state.srcVal,\n            me.state.srcfloorL,\n            me.state.srcfloorB,\n            dest_x,\n            dest_y,\n            true,\n            \"myCanvassrc\"\n          );\n          color_canvas(srcVal, \"srcmap\", \"red\");\n          color_canvas(dstVal, \"srcmap\", \"green\");\n        }\n\n        function reset() {\n          active.classed(\"active\", false);\n          active = window.d3.select(null);\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, initialTransform);\n        }\n        function timer(ms) {\n          return new Promise(res => setTimeout(res, ms));\n        }\n\n        function zoomTo() {\n          let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n          let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n          var wrh = me.state.dstfloorL / me.state.dstfloorB;\n          var newWidth = width;\n          var newHeight = newWidth / wrh;\n          if (newHeight > height) {\n            newHeight = height;\n            newWidth = newHeight * wrh;\n          }\n          let gpx = newWidth / me.state.srcfloorL;\n          let gpy = newHeight / me.state.srcfloorB;\n          let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n          //Zoomed\n          let distX =\n            width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n          let distY =\n            height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n          var transform = window.d3.zoomIdentity.translate(distX, distY);\n          // .scale(1.2)\n          // .translate(-4*X,-4*Y)\n          canvas\n            .transition()\n            .duration(750)\n            .call(zoom1.transform, transform);\n        }\n        img1.onload = function() {\n          draw();\n          zoomTo();\n        };\n      } else {\n        this.setState({\n          samefloor: false,\n          buildingView:true\n        });\n        this.findpath();\n      }\n    } else {\n    }\n  };\n\n  loadNonwalkable = () => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData = navInfo.filter(r=>{\n      return r.floor === srcfloor\n    })\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpath(start, nodes[j]);\n        this.color_canvas(start,\"srcmap\",\"#bdbdbd\");\n        start = nodes[j];\n      }\n      this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\");\n    }\n  }\n\n  loadMultiFloorNonwalkable = (id) => {\n    let { srcVal, srcfloor, dstfloor, dstVal } = this.state;\n    let navInfo = this.props.androidNav;\n    let floorData\n\n    if(id ===\" canvas0\"){\n      floorData = navInfo.filter(r=>{\n        return r.floor === srcfloor\n      })\n    }else{\n      floorData = navInfo.filter(r=>{\n        return r.floor === dstfloor\n      })\n    }\n\n    let polygons = floorData[0].properties.clickedPoints;\n    for (let i = 0; i < polygons.length; i++) {\n      let nodes = polygons[i].split(\",\");\n      var start = nodes[0];\n      for (let j = 1; j < nodes.length; j++) {\n        this.oldpathMulti(start, nodes[j],id);\n        // this.color_canvas(start,\"srcmap\",\"#bdbdbd\",id);\n        start = nodes[j];\n      }\n      // this.color_canvas(nodes[0],\"srcmap\", \"#bdbdbd\",id);\n    }\n  }\n\n  oldpath = (x, y) => {\n    // x = coord_val  y=coord_val in normal\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n    } else {\n      g = dstfloorL * e + f;\n      this.color_canvas(g,\"srcmap\",\"#bdbdbd\");\n      this.oldpath(g, x);\n      this.oldpath(g, y);\n    }\n  };\n\n  color = (i,color,canvasid)=>{\n      let posX,posY,gpx,gpy\n      if(canvasid === \"canvas0\"){\n        let wrh = this.state.srcfloorL / this.state.srcfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }else{\n        let wrh = this.state.dstfloorL / this.state.dstfloorB;\n        let newWidth = this.state.canvasWidth;\n        let newHeight = newWidth / wrh;\n        if (newHeight > this.state.canvasHeight) {\n          newHeight = this.state.canvasHeight;\n          newWidth = newHeight * wrh;\n        }\n  \n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n  \n        posX = gpx * (i % this.state.srcfloorL);\n        posY = gpy * parseInt(i / this.state.srcfloorL);\n      }\n\n      let canvas1 = document.getElementById(canvasid);\n      let context1 = canvas1.getContext(\"2d\");\n      context1.fillStyle = color;\n      context1.fillRect(posX, posY, 5, 5);  \n  }\n\n  oldpathMulti = (x, y,id) => {\n    var a, b, c, d, e, f, g;\n    let { dstfloorL } = this.state;\n\n    a = parseInt(x / dstfloorL);\n    b = x % dstfloorL;\n\n    c = parseInt(y / dstfloorL);\n    d = y % dstfloorL;\n\n    e = Math.floor((a + c) / 2);\n    f = Math.floor((b + d) / 2);\n    if ((e === a) & (f === b)) {\n      g = dstfloorL * c + b;\n      this.color(g,\"#bdbdbd\",id);\n    } else if ((e === c) & (f === d)) {\n      g = dstfloorL * a + d;\n      this.color(g,\"#bdbdbd\",id);\n    } else {\n      g = dstfloorL * e + f;\n      this.color(g,\"#bdbdbd\",id);\n      this.oldpathMulti(g, x,id);\n      this.oldpathMulti(g, y,id);\n    }\n  };\n\n  findpath() {\n    var srcvert =\n      this.state.srcfloor + \",\" + this.state.srcVal + \",\" + \"virtual\";\n    var dstvert =\n      this.state.dstfloor + \",\" + this.state.dstVal + \",\" + \"virtual\";\n      console.log(\"dtsr\",srcvert,dstvert,this.graph)\n    if (this.graph.hasvertex(srcvert)) {\n    } else {\n      this.graph.addVertex(srcvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor == this.state.srcfloor &&\n          nodes[i].properties.floorElement === \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert1\",vert)\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.srcfloor,\n        this.state.srcVal,\n        this.state.srcfloorL,\n        this.state.srcfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n\n    if (this.graph.hasvertex(dstvert)) {\n    } else {\n      this.graph.addVertex(dstvert);\n      let nodes = this.props.navigationInfo;\n      this.flrconn = [];\n      for (var i = 0; i < nodes.length; i++) {\n        if (\n          nodes[i].properties.floor === this.state.dstfloor &&\n          nodes[i].properties.floorElement == \"FloorConnection\"\n        ) {\n          var coord = nodes[i].properties.coordinates.split(\",\");\n          var vert = nodes[i].properties.floor + \",\" + nodes[i].properties.node;\n          console.log(\"vert2\",vert)\n          this.flrconn.push([coord[0], coord[1], vert]);\n        }\n      }\n      this.callwhile(\n        this.state.dstfloor,\n        this.state.dstVal,\n        this.state.dstfloorL,\n        this.state.dstfloorB,\n        null,\n        null,\n        false,\n        null\n      );\n    }\n    this.specialcallwhile(\n      this.state.srcfloor,\n      srcvert,\n      this.state.dstfloor,\n      dstvert\n    );\n  }\n\n  specialcallwhile(srcfloor, srcvert, dstfloor, dstvert) {\n    console.log(\"srcfloor,srcvert,dstfloor,dstvert\",srcfloor,srcvert,dstfloor,dstvert)\n    var min = Number.MAX_VALUE;\n    var minleave = null;\n    var var_i;\n    var notthere;\n    let shortestpath = new Map();\n    let visited = new Map();\n    let minimumcost = new Map();\n    let leaves = [];\n    var get_keys = this.graph.AdjList.keys();\n    for (var i of get_keys) {\n      minimumcost.set(i, min);\n      visited.set(i, false);\n    }\n\n    leaves.push(srcvert);\n    shortestpath.set(srcvert, [srcvert]);\n    minimumcost.set(srcvert, 0);\n    this.graph.printGraph();\n    while (leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < leaves.length; i++) {\n        if (min > minimumcost.get(leaves[i])) {\n          min = minimumcost.get(leaves[i]);\n          minleave = leaves[i];\n          var_i = i;\n        }\n      }\n      visited.set(minleave, true);\n\n      if (minleave === dstvert) {\n        // alert(\" i \"+JSON.stringify(shortestpath.get(dstvert)));\n        break;\n      }\n      leaves.splice(var_i, 1);\n      var get_values = this.graph.AdjList.get(minleave);\n      var get_dist = this.graph.Adjweights.get(minleave);\n      for (var jj = 0; jj < get_values.length; jj++) {\n        var j = get_values[jj];\n        var l = j.split(\",\");\n\n        var neighbour = false;\n        if (l.length == 2) {\n          neighbour = true;\n        } else if (l.length == 3) {\n          if (j == dstvert) {\n            neighbour = true;\n          }\n        }\n        if (visited.get(j) == false && neighbour) {\n          if (minimumcost.get(j) > minimumcost.get(minleave) + get_dist[jj]) {\n            minimumcost.set(j, minimumcost.get(minleave) + get_dist[jj]);\n            var dum = [];\n            dum = shortestpath.get(minleave);\n            dum = dum.concat([j]);\n            shortestpath.set(j, dum);\n            notthere = 1;\n            for (var p = 0; p < leaves.length; p++) {\n              if (leaves[p] == j) {\n                notthere = 0;\n              }\n            }\n            if (notthere == 1) {\n              leaves.push(j);\n            }\n          }\n        }\n      }\n    }\n    this.createcanvas(shortestpath.get(dstvert), false);\n  }\n  createcanvas(list, samefloor) {\n    if (samefloor === false) {\n      console.log(\"list\",list)\n      let ans = new Map();\n      for (var i = 0; i < list.length; i++) {\n        var e = list[i].split(\",\");\n        if (ans.has(e[0])) {\n          ans.get(e[0]).push(e[1]);\n        } else {\n          ans.set(e[0], [e[1]]);\n        }\n      }\n      var get_keys = ans.keys();\n      let clist = [];\n      let floorLlist = [];\n      var cnt = 0;\n      for (var i of get_keys) {\n        var ind1 = this.findFloor(i, this.props.flrList);\n        var ind = this.findFloor(i, this.grids_all);\n        floorLlist.push(this.grids_all[ind].properties.length);\n        clist.push({\n          id: cnt,\n          scale: 10,\n          floorL: this.grids_all[ind].properties.length,\n          floorB: this.grids_all[ind].properties.breadth,\n          fileName: this.grids_all[ind].properties.fileName,\n          floor: this.grids_all[ind].properties.floor\n        });\n        cnt++;\n      }\n      this.setState({\n        canvaslist: clist\n      });\n      this.callimage(0, ans, cnt, clist, floorLlist);\n    }\n  }\n\n  callmark(ans, floorLlist) {\n    var get_keys = ans.keys();\n    var cnt = 0;\n    for (var i of get_keys) {\n      var canvasid = \"canvas\" + cnt;\n      var get_val = ans.get(i);\n      for (var j of get_val) {\n        this.color_canvas_spl(j, canvasid, \"blue\", floorLlist[cnt]);\n      }\n      cnt++;\n    }\n  }\n\n  callimage(cnt, ans, count, clist, floorLlist) {\n    console.log(\"cnt, ans, count, clist, floorLlist\",cnt, ans, count, clist, floorLlist)\n    let floorList = [this.state.srcfloor, this.state.dstfloor];\n    for (let jj = 0; jj < floorList.length; jj++) {\n      for (let ii = 0; ii < clist.length; ii++) {\n        if (floorList[jj] === clist[ii].floor) {\n          let i = clist[ii].floor;\n          let ind = this.findFloor(i, this.props.fList);\n          let ratio = this.state.canvasWidth / clist[ii].floorL;\n          let height_of_canvas = ratio * clist[ii].floorB;\n          let dsp;\n          if (clist[ii].floor === this.state.dstfloor) {\n            dsp = \"none\";\n          } else {\n            dsp = \"block\";\n          }\n          let canvas = window.d3\n            .select(\"#mydiv\")\n            .append(\"canvas\")\n            .attr(\"id\", \"canvas\" + ii)\n            .attr(\"style\", `border:1px solid;display:${dsp};`)\n            .attr(\"width\", this.state.canvasWidth)\n            .attr(\"height\", this.state.canvasHeight)\n            .call(\n              window.d3\n                .zoom()\n                .scaleExtent([1, 8])\n                .on(\"zoom\", multiCanvasZoom)\n            );\n\n          let width = canvas.property(\"width\");\n          let height = canvas.property(\"height\");\n          let active = window.d3.select(null);\n          let zoom1 = window.d3.zoom().on(\"zoom\", multiCanvasZoom);\n          let initialTransform = window.d3.zoomIdentity\n            .translate(0, 0)\n            .scale(1);\n          let ctx = canvas.node().getContext(\"2d\");\n          let div = document.getElementById(\"mydiv1\");\n          let img1 = new Image();\n          img1.src = `${config.imgUrl}/${clist[ii].fileName}`;\n\n          img1.hidden = true;\n          div.appendChild(img1);\n          let me = this;\n          let get_val = ans.get(i);\n          let loaded = false;\n          img1.onload = function() {\n            multiCanvas();\n            zoomTo()\n          };\n\n          function multiCanvasZoom() {\n            me.setState(\n              {\n                zoom: true,\n                // pathCaption: []\n              },\n              () => {\n                var transform = window.d3.event.transform;\n                ctx.save();\n                ctx.clearRect(0, 0, width, height);\n                ctx.translate(transform.x, transform.y);\n                ctx.scale(transform.k, transform.k);\n                loaded = false;\n                multiCanvas();\n                ctx.restore();\n              }\n            );\n          }\n\n          function multiCanvas() {\n            if (loaded === false) {\n              var wrh = me.state.dstfloorL / me.state.dstfloorB;\n              var newWidth = width;\n              var newHeight = newWidth / wrh;\n              if (newHeight > height) {\n                newHeight = height;\n                newWidth = newHeight * wrh;\n              }\n              ctx.globalAlpha = 0.5;\n\n              ctx.drawImage(\n                img1,\n                0,\n                0,\n                img1.width,\n                img1.height,\n                0,\n                0,\n                newWidth,\n                newHeight\n              );\n              var id = \"canvas\" + ii;\n              // me.loadMultiFloorNonwalkable(id)\n              var index = me.findFloor(i, me.grids_all);\n              var m = parseInt(me.grids_all[index].properties.length);\n              var n = parseInt(me.grids_all[index].properties.breadth);\n              for (var j = 0; j < get_val.length - 1; j++) {\n                var dest_x = get_val[j + 1] % m;\n                var dest_y = parseInt(get_val[j + 1] / m);\n                console.log(\"i, get_val[j], m, n, dest_x, dest_y, true, id\",i, get_val[j], m, n, dest_x, dest_y, true, id)\n                me.callwhile(i, get_val[j], m, n, dest_x, dest_y, true, id);\n              }\n              var node_count = 0;\n              for (var j of get_val) {\n                if (ii === count - 1) {\n                  if (node_count === get_val.length - 1) {\n                    me.color_canvas_spl(j, id, \"green\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                } else {\n                  if (node_count === 0 && ii === 0) {\n                    me.color_canvas_spl(j, id, \"red\", floorLlist[ii]);\n                  } else {\n                    me.color_canvas_spl(j, id, \"yellow\", floorLlist[ii]);\n                  }\n                }\n                node_count++;\n              }\n              loaded = true;\n            }\n          }\n\n          function zoomTo() {\n            let X = me.croppedRegion.maxX[0] - me.croppedRegion.minX[0];\n            let Y = me.croppedRegion.maxY[1] - me.croppedRegion.minY[1];\n            var wrh = me.state.dstfloorL / me.state.dstfloorB;\n            var newWidth = width;\n            var newHeight = newWidth / wrh;\n            if (newHeight > height) {\n              newHeight = height;\n              newWidth = newHeight * wrh;\n            }\n            let gpx = newWidth / me.state.srcfloorL;\n            let gpy = newHeight / me.state.srcfloorB;\n            let scale = Math.min(width / (X * gpx), height / (Y * gpy));\n            //Zoomed\n            let distX =\n              width / 2 - me.croppedRegion.minX[0] * gpx - (X / 2) * gpx;\n            let distY =\n              height / 2 - me.croppedRegion.minY[1] * gpy - (Y / 2) * gpy;\n            var transform = window.d3.zoomIdentity.translate(distX, distY);\n            // .scale(1.2)\n            // .translate(-4*X,-4*Y)\n            canvas\n              .transition()\n              .duration(750)\n              .call(zoom1.transform, transform);\n          }\n        }\n      }\n    }\n  }\n\n  callwhile(srcfloor, srcVal, m, n, dest_x, dest_y, single, canvasid) {\n    var min = Number.MAX_VALUE;\n    var minleave = [];\n    var var_i;\n    var notthere;\n    for (let i = 0; i < m; i++) {\n      var row = [],\n        row1 = [],\n        row3 = [],\n        row4 = [];\n      for (let j = 0; j < n; j++) {\n        row.push(1);\n        row1.push(-1);\n        row3.push(Number.MAX_VALUE);\n        var row5 = [];\n        row4.push(row5);\n      }\n      this.shortestpath.push(row4);\n      this.grids.push(row);\n      this.visited.push(row1);\n      this.minimumcost.push(row3);\n    }\n    var ind1 = this.findFloor(srcfloor, this.grids_all);\n    if (ind1 !== -1 && this.grids_all[ind1].properties.grid_1 != null) {\n      for (let i = 0; i < this.grids_all[ind1].properties.grid_1.length; i++) {\n        var nodes = this.grids_all[ind1].properties.grid_1[i].split(\",\");\n        for (let j = 0; j < nodes.length; j++) {\n          var val = nodes[j];\n          var x = val % m;\n          var y = parseInt(val / m);\n          this.grids[x][y] = 0;\n        }\n      }\n    }\n    var src_x = srcVal % m;\n    var src_y = parseInt(srcVal / m);\n    this.leaves.push([src_x, src_y]);\n    this.shortestpath[src_x][src_y].push([src_x, src_y]);\n    this.minimumcost[src_x][src_y] = 0;\n\n    while (this.leaves.length > 0) {\n      min = Number.MAX_VALUE;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (min > this.minimumcost[this.leaves[i][0]][this.leaves[i][1]]) {\n          min = this.minimumcost[this.leaves[i][0]][this.leaves[i][1]];\n          minleave = this.leaves[i];\n          var_i = i;\n        }\n      }\n      this.visited[minleave[0]][minleave[1]] = 1;\n      if (single == true) {\n        if (minleave[0] == dest_x && minleave[1] == dest_y) {\n          break;\n        }\n      } else {\n        var check = true;\n        for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n          if (\n            this.visited[parseInt(this.flrconn[ch][0])][\n              parseInt(this.flrconn[ch][1])\n            ] == 1\n          ) {\n          } else {\n            check = false;\n          }\n        }\n        if (check == true) {\n          for (var ch = 0; ch < parseInt(this.flrconn.length); ch++) {\n            var vert = srcfloor + \",\" + srcVal + \",\" + \"virtual\";\n            this.graph.addEdge(\n              vert,\n              this.flrconn[ch][2],\n              this.minimumcost[parseInt(this.flrconn[ch][0])][\n                parseInt(this.flrconn[ch][1])\n              ],\n              true\n            );\n          }\n          this.reset_var();\n          break;\n        }\n      }\n      this.leaves.splice(var_i, 1);\n      for (var j = minleave[0] - 1; j <= minleave[0] + 1; j++) {\n        for (var k = minleave[1] - 1; k <= minleave[1] + 1; k++) {\n          if (j >= 0 && j < m && k >= 0 && k < n) {\n            if (this.visited[j][k] == -1 && this.grids[j][k] == 1) {\n              if (\n                this.minimumcost[j][k] >\n                this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  )\n              ) {\n                this.minimumcost[j][k] =\n                  this.minimumcost[minleave[0]][minleave[1]] +\n                  Math.sqrt(\n                    (minleave[0] - j) * (minleave[0] - j) +\n                      (minleave[1] - k) * (minleave[1] - k)\n                  );\n                this.shortestpath[j][k] = this.shortestpath[minleave[0]][\n                  minleave[1]\n                ].concat([[j, k]]);\n                notthere = 1;\n                for (var p = 0; p < this.leaves.length; p++) {\n                  if (this.leaves[p][0] == j && this.leaves[p][1] == k) {\n                    notthere = 0;\n                  }\n                }\n                if (notthere == 1) {\n                  this.leaves.push([j, k]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (single == true) {\n      let { scale } = this.state;\n\n      var wrh = this.state.dstfloorL / this.state.dstfloorB;\n      var newWidth = this.state.canvasWidth;\n      var newHeight = newWidth / wrh;\n      if (newHeight > this.state.canvasHeight) {\n        newHeight = this.state.canvasHeight;\n        newWidth = newHeight * wrh;\n      }\n      let gpx,gpy;\n      if(canvasid === \"canvas0\"){\n        gpx = newWidth / this.state.srcfloorL;\n        gpy = newHeight / this.state.srcfloorB;  \n      }else{\n        gpx = newWidth / this.state.dstfloorL;\n        gpy = newHeight / this.state.dstfloorB;\n      }\n\n      var canvas = document.getElementById(canvasid);\n      var context = canvas.getContext(\"2d\");\n\n      if (canvas !== null) {\n        var context = canvas.getContext(\"2d\");\n      }\n\n      let sp = this.shortestpath[dest_x][dest_y];\n      console.log(\"sp\",sp)\n      let mypoints = sp.map(r => {\n        return { x: r[0], y: r[1] };\n      });\n      var refinedpaths = this.simplifyPath(mypoints, 2);\n      let allElements = this.props.navigationInfo;\n      let allNodes = [];\n      for (let i = 0; i < allElements.length; i++) {\n        allNodes.push(allElements[i].properties);\n      }\n      // if (\n      //   this.state.srcBuildingLocation.venueName ===\n      //     this.state.dstBuildingLocation.venueName &&\n      //   this.state.srcBuildingLocation.buildingName ===\n      //     this.state.dstBuildingLocation.buildingName\n      // ) {\n\n        // if (this.state.zoom === false) {\n          if(canvasid === \"canvas0\" || \"myCanvassrc\"){\n            this.findInstructions(sp, refinedpaths, allElements, srcfloor);\n          }else{\n            this.findInstructions(sp, refinedpaths, allElements, this.state.dstfloor);\n          }\n        // }\n        // this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // } else if (this.state.dstBuildingLocation) {\n      //   this.findInstructions(sp, refinedpaths, allNodes, srcfloor);\n      // }\n      \n      var rowX = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { x: row[0], index: i };\n      });\n      var rowY = this.shortestpath[dest_x][dest_y].map(function(row, i) {\n        return { y: row[1], index: i };\n      });\n      let minRowX = rowX.reduce((prev, current) =>\n        prev.x < current.x ? prev : current\n      );\n      let maxRowX = rowX.reduce((prev, current) =>\n        prev.x > current.x ? prev : current\n      );\n      let minRowY = rowY.reduce((prev, current) =>\n        prev.y < current.y ? prev : current\n      );\n      let maxRowY = rowY.reduce((prev, current) =>\n        prev.y > current.y ? prev : current\n      );\n\n      this.croppedRegion = {\n        minX: [minRowX.x, rowY[minRowX.index].y],\n        maxX: [maxRowX.x, rowY[maxRowX.index].y],\n        minY: [rowX[minRowY.index].x, minRowY.y],\n        maxY: [rowX[maxRowY.index].x, maxRowY.y]\n      };\n      // var max = Math.max.apply(null, maxRow);\n      // for (let i = 0; i < refinedpaths.length; i = i +1) {\n      //   context.globalAlpha = 1;\n      //   context.beginPath();\n      //   var half_scale = scale / 2;\n      //   var pos_x = gpx * refinedpaths[i].x;\n      //   var pos_y = gpy * refinedpaths[i].y;\n      //   pos_x = pos_x + half_scale;\n      //   pos_y = pos_y + half_scale;\n      //   context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n      //   context.fill();\n      //   context.fillStyle = \"#2d9cdb\";\n      //   context.strokeStyle = \"#2d9cdb\";\n      //   context.stroke();\n      // }\n\n      for (let i = 0; i < this.shortestpath[dest_x][dest_y].length; i = i + 4) {\n        context.globalAlpha = 1;\n        context.beginPath();\n        var half_scale = scale / 2;\n        var pos_x = gpx * this.shortestpath[dest_x][dest_y][i][0];\n        var pos_y = gpy * this.shortestpath[dest_x][dest_y][i][1];\n        pos_x = pos_x + half_scale;\n        pos_y = pos_y + half_scale;\n        context.arc(pos_x, pos_y, scale, 0, 2 * Math.PI);\n        context.fill();\n        context.fillStyle = \"#2d9cdb\";\n        context.strokeStyle = \"#2d9cdb\";\n        context.stroke();\n      }\n      this.reset_var();\n    }\n  }\n\n  interpolatePath = (turningPointsPath, seperationGap, gpx, gpy) => {\n    let resultpath = [];\n    if (turningPointsPath.length === 1) {\n      resultpath.push(turningPointsPath.x * gpx, turningPointsPath.x * gpx);\n      return resultpath;\n    }\n    for (let i = 0; i < turningPointsPath.length - 1; i++) {\n      let points = this.interpolatePoints(\n        turningPointsPath[i],\n        turningPointsPath[i + 1],\n        seperationGap,\n        gpx,\n        gpy\n      );\n      for (let k = 0; k < points.length; k++) {\n        resultpath.push(points[k]);\n      }\n      // resultpath.push(this.interpolatePoints(turningPointsPath[i],turningPointsPath[i+1], seperationGap, gpx, gpy));\n    }\n    return resultpath;\n  };\n\n  interpolatePoints(p1, p2, seperationGap, gpx, gpy) {\n    let d = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    let result = [];\n    result.push({ x: parseInt(p1.x), y: parseInt(p1.y) });\n    let counter = seperationGap;\n    while (counter < d) {\n      let x = p1.x + (counter / d) * (p2.x - p1.x);\n      let y = p1.y + (counter / d) * (p2.y - p1.y);\n      result.push({ x: parseInt(x), y: parseInt(y) });\n      counter += 1 * seperationGap;\n    }\n    return result;\n  }\n\n  simplifyPath = (points, tolerance) => {\n    // helper classes\n    var Vector = function(x, y) {\n      this.x = x;\n      this.y = y;\n    };\n    var Line = function(p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n      this.distanceToPoint = function(point) {\n        // slope\n        var m = (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x),\n          // y offset\n          b = this.p1.y - m * this.p1.x,\n          d = [];\n        // distance to the linear equation\n        d.push(\n          Math.abs(point.y - m * point.x - b) / Math.sqrt(Math.pow(m, 2) + 1)\n        );\n        // distance to p1\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p1.x, 2) + Math.pow(point.y - this.p1.y, 2)\n          )\n        );\n        // distance to p2\n        d.push(\n          Math.sqrt(\n            Math.pow(point.x - this.p2.x, 2) + Math.pow(point.y - this.p2.y, 2)\n          )\n        );\n        // return the smallest distance\n        return d.sort(function(a, b) {\n          return a - b; //causes an array to be sorted numerically and ascending\n        })[0];\n      };\n    };\n\n    var douglasPeucker = function(points, tolerance) {\n      if (points.length <= 2) {\n        return [points[0]];\n      }\n      var returnPoints = [],\n        // make line from start to end\n        line = new Line(points[0], points[points.length - 1]),\n        // find the largest distance from intermediate poitns to this line\n        maxDistance = 0,\n        maxDistanceIndex = 0,\n        p;\n      for (var i = 1; i <= points.length - 2; i++) {\n        var distance = line.distanceToPoint(points[i]);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          maxDistanceIndex = i;\n        }\n      }\n      // check if the max distance is greater than our tollerance allows\n      if (maxDistance >= tolerance) {\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        // include this point in the output\n        returnPoints = returnPoints.concat(\n          douglasPeucker(points.slice(0, maxDistanceIndex + 1), tolerance)\n        );\n        // returnPoints.push( points[maxDistanceIndex] );\n        returnPoints = returnPoints.concat(\n          douglasPeucker(\n            points.slice(maxDistanceIndex, points.length),\n            tolerance\n          )\n        );\n      } else {\n        // ditching this point\n        p = points[maxDistanceIndex];\n        line.distanceToPoint(p, true);\n        returnPoints = [points[0]];\n      }\n      return returnPoints;\n    };\n    var arr = douglasPeucker(points, tolerance);\n    // always have to push the very last point on so it doesn't get left off\n    arr.push(points[points.length - 1]);\n    return arr;\n  };\n\n  find_angle = (p0, p1, c) => {\n    var p0c = { x: c.x - p0.x, y: c.y - p0.y }; // p0->c (b)\n    var cp1 = { x: p1.x - c.x, y: p1.y - c.y }; // p1->c (a)\n\n    // {\n    // x: refinedPoints[currentRPoint].x,\n    // y: refinedPoints[currentRPoint].y + 1\n    // },\n    // refinedPoints[currentRPoint + 1],\n    // refinedPoints[currentRPoint]\n    return (\n      (Math.atan2(\n        cp1.y * p0c.x - cp1.x * p0c.y,\n        p0c.x * cp1.x + p0c.y * cp1.y\n      ) *\n        180) /\n      Math.PI\n    );\n  };\n\n  //Module for finding the direction's equivalent commands\n\n  findDirectionword = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n      //   return (\"Go Straight\")\n      // }\n      // return (\"O' Clock\", {\n      //   angle: Math.abs(Math.round((360 + angle) / 30))\n      // });\n      return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    // if(Math.round((360 + angle) / 30) === 12 || Math.round((360 + angle) / 30) === 0){\n    //   return this.props.t(\"Go Straight\")\n    // }\n    // return this.props.t(\"O' Clock\", {\n    //   angle: Math.abs(Math.round(angle / 30))\n    // });\n    return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  findWord = angle => {\n    if (angle >= 75 && angle <= 105) return \"Turn Right\";\n\n    if (angle <= -75 && angle >= -105) return \"Turn Left\";\n\n    if ((angle >= 165 && angle <= 180) || (angle <= -165 && angle >= -180))\n      return \"Go Straight\";\n    if (angle < 0) {\n      if (Math.round((360 + angle) / 30) === 9) {\n        return \"Turn Left\";\n      }\n      return \"Turn left\";\n    //   return \"Turn \" + Math.round((360 + angle) / 30) + \" O' Clock\";\n    }\n\n    if (Math.floor(angle / 30) === 3) return \"Turn Right\";\n    return \"Turn right\";\n\n    // return \"Turn \" + Math.round(angle / 30) + \" O' Clock\";\n  };\n\n  // find the error component in the iteration and leaves it for the next iteration\n  findErrorInAngle = angle => {\n    if (angle < 0) return 360 + angle - Math.round((360 + angle) / 30) * 30;\n    return angle - Math.round(angle / 30) * 30;\n  };\n  //same as above but in abbreviated form\n\n  findDirectionAbbreviation = angle => {\n    if (angle > 0) return \"Right\";\n\n    return \"Left\";\n  };\n\n  findInstructions = (nonRefinedPoints, refinedPoints, mapElements, floor) => {\n    //length of refined and non refined paths\n    var nRefined = refinedPoints.length;\n    var nNonRefined = nonRefinedPoints.length;\n    //converting the mapElements to ordered map for ease of access\n    var ElementMap = new Map();\n    var includedSet = new Set();\n    var word;\n    //for iteration purpose\n    var currentNRPoint = 0;\n    var currentRPoint = 0;\n    var flagList = [];\n    var i = 0;\n    var j = 0;\n    //radius defines what range to cover in a path\n    var radius = 3;\n    let pathTuning = []\n    //adding the elements to map\n    for (i = 0; i < mapElements.length; i++) {\n      let props = mapElements[i].properties;\n      if (props.floorElement === \"Rooms\") {\n        if (\n          props.floor === floor &&\n          props.roomName !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          Object.keys(props).map(id => {\n            if(id === 'roomName'){\n              props[`name`] = [...props[id]].join('');\n              delete props[id];  \n            }\n          });\n\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n        }\n      } else if (props.floorElement === \"FloorConnection\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        ){\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), props);\n        }\n      } else if (props.floorElement === \"Services\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else if (props.floorElement === \"RestRooms\") {\n        if (\n          props.floor === floor &&\n          props.name !== \"undefined\" &&\n          props.coordinates !== undefined\n        )\n          ElementMap.set(props.coordinates.replace(\",\", \"@\"), mapElements[i].properties);\n      } else {\n      }\n    }\n    //finding the indices of the\n    while (currentNRPoint < nNonRefined && currentRPoint < nRefined) {\n      if (\n        nonRefinedPoints[currentNRPoint][0] ===\n          refinedPoints[currentRPoint].x &&\n        nonRefinedPoints[currentNRPoint][1] === refinedPoints[currentRPoint].y\n      ) {\n        flagList.push(currentNRPoint);\n        currentRPoint++;\n      }\n      currentNRPoint++;\n    }\n    // Generating the direction and elaborated results\n    var DirectionResults = [];\n    var ElaboratedResults = [];\n    //entry point insertion to the list\n    DirectionResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    ElaboratedResults.push(\n      \"You are at \" +\n        ElementMap.get(\"\" + refinedPoints[0].x + \"@\" + refinedPoints[0].y)\n          .name\n    );\n    includedSet.add(refinedPoints[0].x + \"@\" + refinedPoints[0].y);\n    includedSet.add(\n      refinedPoints[nRefined - 1].x + \"@\" + refinedPoints[nRefined - 1].y\n    );\n    //iterate and /finding the desired results\n    var error = 0;\n    for (currentRPoint = 0; currentRPoint < nRefined - 1; currentRPoint++) {\n      var angle = 0;\n      var coordinates;\n      // this.actualAngle = 155\n      if (currentRPoint === 0) {\n        angle = this.find_angle(\n          {\n            x: refinedPoints[currentRPoint].x,\n            y: refinedPoints[currentRPoint].y + 1\n          },\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n        let path_angle = angle;\n        let floorangle = this.state.floorAngle;\n        let diff = 360 - floorangle;\n        // let CurrentDirection = 60;\n        let CurrentDirection = this.actualAngle;\n        // rotateDirection\n        this.setState({\n          pathAngle:path_angle\n        })\n\n        let gn = this.calculatePath(path_angle, diff, CurrentDirection);\n        angle = gn;\n      } else\n        angle = this.find_angle(\n          refinedPoints[currentRPoint - 1],\n          refinedPoints[currentRPoint + 1],\n          refinedPoints[currentRPoint]\n        );\n      angle = angle + error;\n      error = this.findErrorInAngle(angle);\n\n      let hypo = 0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n      let base = Math.cos(angle)*hypo;  \n      let height = Math.sin(angle)*hypo;\n      this.forwardStep = parseInt(Math.abs(height));   \n      this.lastStep = parseInt(Math.abs(base));\n      let steps = parseInt(this.forwardStep + hypo);\n\n      if (currentRPoint === nRefined - 2) {\n        word = this.findDirectionword(angle);\n        DirectionResults.push(word);\n        DirectionResults.push(\n          \"Move \" +\n            Math.round(\n              0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n            ) +\n            \" steps forward\"\n        );\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        break;\n      }\n     \n      if(hypo <= 6){\n        word = this.findWord(angle);\n        if(word.includes(\"Turn 0 O' Clock\") ){\n\n          word = \"Go straight\"\n        }\n\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        DirectionResults.push(word + \" Move \" + steps + \" steps forward\");\n    }else{\n        word = this.findDirectionword(angle);\n        // if(word.includes(\"Turn 0 O' Clock\") ){\n        //   word = \"Go straight\"\n        // }\n        pathTuning.push({points:refinedPoints[currentRPoint],angle:angle,base,height,word})\n        let step = parseInt(Math.round(\n            0.6 * (flagList[currentRPoint + 1] - flagList[currentRPoint])\n          ))\n        DirectionResults.push(word);\n        DirectionResults.push(\" Move \" +\n        step +\n        \" steps forward\");\n    }\n\n      //this part of code handles the intermediate importatnt rooms\n      var begin = flagList[currentRPoint] + 1;\n      var end = flagList[currentRPoint + 1];\n\n      while (begin < end) {\n        var currpoint = nonRefinedPoints[begin];\n        for (\n          i = Math.max(0, currpoint[0] - radius);\n          i < currpoint[0] + radius;\n          i++\n        ) {\n          for (\n            j = Math.max(0, currpoint[1] - radius);\n            j < currpoint[1] + radius;\n            j++\n          ) {\n            if (!includedSet.has(i + \"@\" + j) && ElementMap.has(i + \"@\" + j)) {\n              var tempAngle = this.find_angle(\n                {\n                  x: nonRefinedPoints[begin - 1][0],\n                  y: nonRefinedPoints[begin - 1][1]\n                },\n                { x: i, y: j },\n                { x: nonRefinedPoints[begin][0], y: nonRefinedPoints[begin][1] }\n              );\n              ElaboratedResults.push(\n                ElementMap.get(i + \"@\" + j).roomName +\n                  \" on your \" +\n                  this.findDirectionAbbreviation(tempAngle)\n              );\n              includedSet.add(i + \"@\" + j);\n            }\n          }\n        }\n        begin++;\n      }\n    }\n    let elem = ElementMap.get(\n      \"\" +\n        refinedPoints[nRefined - 1].x +\n        \"@\" +\n        refinedPoints[nRefined - 1].y\n    );\n\n    if(elem.type === \"Rest Rooms\"){\n      let name = `${elem.washroomType} Washroom (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else if(elem.type === \"Drinking Water | Non Drinking\"){\n      let name = `Drinking Water Point (${elem.floor} Floor)`\n      DirectionResults.push(\n        \"You will reach \" +\n         name\n      );\n    }else{\n      DirectionResults.push(\n        \"You will reach \" +\n          ElementMap.get(\n            \"\" +\n              refinedPoints[nRefined - 1].x +\n              \"@\" +\n              refinedPoints[nRefined - 1].y\n          ).name\n      );\n    }\n    ElaboratedResults.push(\n      \"You have reached \" +\n        ElementMap.get(\n          \"\" +\n            refinedPoints[nRefined - 1].x +\n            \"@\" +\n            refinedPoints[nRefined - 1].y\n        ).name\n    );\n    let resultMap = DirectionResults.map(r => {\n      return { instruction: r, floor: floor };\n    });\n    this.pathTune = pathTuning\n    resultMap.forEach(element => {\n      this.setState(prevState => ({\n        pathFloor: [...prevState.pathFloor, element]\n      }));\n    });\n    let step = DirectionResults[0];\n    if(this.state.srcfloor === this.state.dstfloor){\n      if(this.state.zoom === false){\n      this.setState(\n        prevState => ({\n          pathArray: [...prevState.pathArray, DirectionResults],\n          srtdFlr: [...prevState.srtdFlr, floor],\n          instructionReady:true\n\n        }),\n        () => {\n          let flrArry = [this.state.srcfloor, this.state.dstfloor];\n          if (this.state.pathArray.length === 2) {\n            for (let k = 0; k < flrArry.length; k++) {\n              if (this.state.srtdFlr[k] === flrArry[k]) {\n                const merge3 = this.state.pathArray.flat(1);\n                this.setState({\n                  pathCaption: merge3\n                });\n              }\n            }\n          } else {\n            for (let k = 0; k < DirectionResults.length; k++) {\n              this.setState(prevState => ({\n                pathCaption: [...prevState.pathCaption, DirectionResults[k]]\n              }),()=>{\n                let instruction = this.filterInstruction();\n                this.setState({\n                  pathCaption:instruction\n                })\n                // console.log(\"instructions\",instruction,this.state.pathCaption)\n              });\n            }\n          }\n        }\n      );\n    }\n    }else{\n        if(this.state.srcfloor === floor){\n          this.setState({\n            firstFlrInstruction:DirectionResults,\n            firstFlr:floor,\n            currentFloor:floor,\n            // instructionReady:true\n          })\n        }else{\n          this.setState({\n            secondFlrInstruction:DirectionResults,\n            secondFlr:floor,\n            instructionReady:true\n          })\n        }\n    }\n  };\n\n  calculatePath = (path_angle, diff, CurrentDirection) => {\n    let pathGN, rotateDirection, path_angleN;\n    if (path_angle >= 0 && path_angle < 106) {\n      pathGN = 360 - (diff - path_angle);\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle > 105 && path_angle <= 180) {\n      pathGN = path_angle - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    } else if (path_angle <= -1 && path_angle >= -180) {\n      path_angleN = 180 + path_angle;\n      pathGN = path_angleN + 180 - diff;\n      rotateDirection = pathGN - CurrentDirection;\n    }\n    return rotateDirection;\n  };\n\n  reset_var() {\n    this.grids = [];\n    this.visited = [];\n    this.shortestpath = [];\n    this.minimumcost = [];\n    this.leaves = [];\n  }\n\n  /* NAVIGATION DRAWER */\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n  incCanvas = () => {\n    let { scale } = this.state;\n    if (scale < 30) {\n      this.setState(\n        {\n          scale: scale + 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n  decCanvas = () => {\n    let { scale } = this.state;\n    if (scale > 2) {\n      this.setState(\n        {\n          scale: scale - 1\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  handleDstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    if (e.length > 0) {\n      for (let i = 0; i < navInfo.length; i++) {\n        if (e[0].floorElement === \"Rooms\") {\n          resp = `${e[0].roomName}(${e[0].floor})`;\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.roomName;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n        } else if (e[0].floorElement === \"FloorConnection\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.name;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].name}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"Services\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type}(${e[0].floor})`;\n        } else if (e[0].floorElement === \"RestRooms\") {\n          if (e[0].node === navInfo[i].properties.node) {\n            name = navInfo[i].properties.type;\n            floor = navInfo[i].properties.floor;\n            val = navInfo[i].properties.node;\n          }\n          resp = `${e[0].type} Washroom (${e[0].floor})`;\n        } else {\n        }\n      }\n      var ind = this.findFloor(floor, this.props.flrList.data);\n      this.setState(\n        {\n          dstName: name,\n          dstfloor: floor,\n          dstVal: parseInt(val),\n          dstfloorL: this.props.flrList.data[ind].floorL,\n          dstfloorB: this.props.flrList.data[ind].floorB,\n          imgName: this.props.flrList.data[ind].fileName,\n          buildingView: true,\n          showDstMenu: false,\n          dstReadOnly: true,\n          pathCaption: [],\n          selectedLocation: `${name},${floor} floor, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n          selectedDestinationVenue: `${name}, ${floor} floor, ${this.state.selectedDestinationBuilding}, ${this.state.selectedDestinationVenue}`\n\n        },\n        () => {\n          this.handleSubmit();\n        }\n      );\n    }\n  };\n\n  dstChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type} Washroom (${e.floor})`;\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        dstName: name,\n        dstfloor: floor,\n        dstVal: parseInt(val),\n        dstfloorL: this.props.flrList.data[ind].floorL,\n        dstfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  handleSrcChange = e => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        resp = `${e[0].roomName}(${e[0].floor})`;\n        if (e[0].node === navInfo[i].properties.node) {\n\n          name = navInfo[i].properties.roomName?navInfo[i].properties.roomName:navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].name}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type}(${e[0].floor})`;\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e[0].type} Washroom (${e[0].floor})`;\n      } else {\n      }\n    }\n\n    var ind = this.findFloor(floor, this.props.flrList.data);\n\n    // var srcBar = document.getElementById(\"src-bar\");\n    // var navHeight = document.getElementById(\"nav-height\");\n    // var element = document.getElementById(\"myCanvassrc\");\n    // var topPos = element.getBoundingClientRect().top;\n    // let realHeight = this.state.canvasHeight - (srcBar.clientHeight + navHeight.clientHeight);\n    // // let ratio = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // // let height_of_canvas = ratio * this.props.flrList.data[ind].floorB;\n\n    // // image is smaller than the canvas so no need to resize\n    // // if (img.Width < canvasWidth && img.Height < canvasHeight)\n    // // return;\n\n    // // Figure out the ratio\n    // let ratioX = this.state.canvasWidth / this.props.flrList.data[ind].floorL;\n    // let ratioY = this.state.canvasHeight / this.props.flrList.data[ind].floorB;\n    // // use whichever multiplier is smaller\n    // let ratio = ratioX < ratioY ? ratioX : ratioY;\n    // let newHeight = this.props.flrList.data[ind].floorL * ratio;\n    // let newWidth = this.props.flrList.data[ind].floorB * ratio;\n\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\",\n        pathCaption: [],\n        currentLocation: `${name}, ${floor} floor, ${srcBuildingLocation.buildingName}, ${srcBuildingLocation.venueName}`,\n        selectedVenue: `${name}, ${floor} floor, ${this.state.selectedBuilding}, ${this.state.selectedVenue}`\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        // setTimeout(() => {\n          this.handleSubmit();\n        // }, \"2000\");\n      }\n    );\n  };\n\n  srcChange = e => {\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e.floorElement === \"Rooms\") {\n        resp = `${e.roomName}(${e.floor})`;\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e.floorElement === \"FloorConnection\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.name}(${e.floor})`;\n      } else if (e.floorElement === \"Services\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n        resp = `${e.type}(${e.floor})`;\n      } else if (e.floorElement === \"RestRooms\") {\n        if (e.node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = navInfo[i].properties.floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName\n      },\n      () => {\n        this.handleSubmit();\n      }\n    );\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  onDstSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      dstSuggestions: this.getDstSuggestions(value)\n    });\n  };\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onDstSuggestionsClearRequested = () => {\n    this.setState({\n      dstSuggestions: []\n    });\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getDstSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? []\n      : this.state.list.filter(lang => {\n          let resp = \"\";\n          if (lang.floorElement === \"Rooms\") {\n            resp = `${lang.roomName}(${lang.floor})`;\n          } else if (lang.floorElement === \"FloorConnection\") {\n            resp = `${lang.name}(${lang.floor})`;\n          } else if (lang.floorElement === \"Services\") {\n            resp = `${lang.type}(${lang.floor})`;\n          } else if (lang.floorElement === \"RestRooms\") {\n            resp = `${lang.type} Washroom (${lang.floor})`;\n          } else {\n          }\n          return resp.toLowerCase().slice(0, inputLength) === inputValue;\n        });\n  };\n\n  getSuggestionValue = suggestion => {\n    this.srcChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  getDstSuggestionValue = suggestion => {\n    this.dstChange(suggestion);\n    if (suggestion.floorElement === \"Rooms\") {\n      return suggestion.roomName;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      return suggestion.name;\n    } else if (suggestion.floorElement === \"Services\") {\n      return suggestion.type;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      return suggestion.type;\n    } else {\n    }\n  };\n\n  renderSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  renderDstSuggestion = suggestion => {\n    let resp = \"\";\n    if (suggestion.floorElement === \"Rooms\") {\n      resp = `${suggestion.roomName}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"FloorConnection\") {\n      resp = `${suggestion.name}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"Services\") {\n      resp = `${suggestion.type}(${suggestion.floor})`;\n    } else if (suggestion.floorElement === \"RestRooms\") {\n      resp = `${suggestion.type} Washroom (${suggestion.floor})`;\n    } else {\n    }\n    return <div style={{ color: \"white\" }}>{resp}</div>;\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSrcChange = (event, { newValue }) => {\n    this.setState({\n      dstValue: newValue\n    });\n  };\n\n  nvgtSrcBld = () => {\n    let { tmpSrcLocation } = this.state;\n    let e = [tmpSrcLocation];\n    this.fetchSrcBldLocation(\n      e,\n      tmpSrcLocation.venueName,\n      tmpSrcLocation.buildingName,\n      \"srcBuildingLocation\",\n      k => {\n        this.handleDstChange(k);\n      }\n    );\n  };\n\n  nvgtDstBld = () => {\n    let { tmpDstLocation } = this.state;\n    let e = [tmpDstLocation];\n    this.fetchDstBldLocation(\n      e,\n      tmpDstLocation.venueName,\n      tmpDstLocation.buildingName,\n      \"dstBuildingLocation\",\n      k => {\n        this.handleDstChange(e);\n      }\n    );\n  };\n\n  fetchSrcBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            this.srcBldDstPointChange(e, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  fetchDstBldLocation = (e, venueName, buildingName, point, cb) => {\n    let data = { venueName, buildingName };\n    this.props.floorList(data, () => {\n      this.props.getAllBuildingElements(data, () => {\n        let navInfo = this.props.navigationInfo;\n        for (let i = 0; i < navInfo.length; i++) {\n          if (\n            navInfo[i].properties.floorElement === \"Rooms\" &&\n            navInfo[i].properties.doorGroup === \"Entrance | Exit\"\n          ) {\n            let props = [navInfo[i].properties];\n            this.srcBldDstPointChange(props, () => {\n              let k = [navInfo[i].properties];\n              this.setNavigation(this.state.selectedSrcLocation);\n              cb(k);\n            });\n          }\n        }\n      });\n    });\n  };\n\n  srcBldDstPointChange = (e, cb) => {\n    let { srcBuildingLocation } = this.state;\n    let name = null;\n    let val = null;\n    let floor = null;\n    let resp = \"\";\n    let navInfo = this.props.navigationInfo;\n    for (let i = 0; i < navInfo.length; i++) {\n      if (e[0].floorElement === \"Rooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.roomName;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"FloorConnection\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.name;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"Services\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else if (e[0].floorElement === \"RestRooms\") {\n        if (e[0].node === navInfo[i].properties.node) {\n          name = navInfo[i].properties.type;\n          floor = e[0].floor;\n          val = navInfo[i].properties.node;\n        }\n      } else {\n      }\n    }\n    var ind = this.findFloor(floor, this.props.flrList.data);\n    this.setState(\n      {\n        srcName: name,\n        srcfloor: floor,\n        srcVal: parseInt(val),\n        srcfloorL: this.props.flrList.data[ind].floorL,\n        srcfloorB: this.props.flrList.data[ind].floorB,\n        imgName: this.props.flrList.data[ind].fileName,\n        showStrtMenu: false,\n        srcReadOnly: true,\n        zoomLevel: \"18\"\n      },\n      () => {\n        const map = this.leafletMap.leafletElement;\n        map.flyTo(\n          new L.LatLng(\n            this.props.flrList.data[0].lat,\n            this.props.flrList.data[0].lng\n          ),\n          map.getZoom(),\n          {\n            animate: true,\n            duration: 2\n          }\n        );\n        setTimeout(() => {\n          this.handleSubmit();\n        }, \"2000\");\n      }\n    );\n    cb();\n  };\n\n  navigateNext = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[0].style.display = \"none\";\n    div[1].style.display = \"block\";\n    this.setState({\n      next: false,\n      currentFloor: this.state.dstfloor,\n      currentStep:0\n    });\n  };\n\n  navigatePrevious = () => {\n    let div = document.getElementById(\"mydiv\").children;\n    div[1].style.display = \"none\";\n    div[0].style.display = \"block\";\n    this.setState({\n      next: true,\n      currentFloor: this.state.srcfloor,\n      currentStep:0\n    });\n  };\n\n  handleBuildingView = () => {\n    this.setState({\n      showInstructions: false,\n    });\n  };\n\n  previousButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if(this.state.srcfloor !== this.state.dstfloor){\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    // if (currentStep < instructionSet.length) {\n    //   this.multifloorNext(instructionSet);\n    // }\n      if (currentStep !== 0) {\n        if (currentStep < instructionSet.length) {\n          this.multifloorPrev(instructionSet);\n        }\n      }\n    }else{\n      if (currentStep !== 0) {\n        if (currentStep < this.state.pathCaption.length) {\n          this._prev();\n        }\n      }\n    }\n\n  \n    return null;\n  }\n\n  nextButton = ()=> {\n    let currentStep = this.state.currentStep;\n    if(this.state.srcfloor !== this.state.dstfloor){\n    let instructionSet =   this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    if (currentStep < instructionSet.length) {\n      this.multifloorNext(instructionSet);\n    }\n    }else{\n      if (currentStep < this.state.pathCaption.length) {\n        this._next();\n      }\n    }\n    return null;\n  }\n\n  _next = () => {\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= this.state.pathCaption.length - 1\n        ? this.state.pathCaption.length\n        : currentStep + 1;\n\n    if (this.state.pathCaption[currentStep]) {\n      let step = this.state.pathCaption[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    // if (\n    //   this.state.pathFloor[currentStep] !== undefined &&\n    //   this.state.pathFloor[currentStep].floor !==\n    //     this.state.pathFloor[currentStep - 1].floor\n    // ) {\n    //   this.navigateNext();\n    // }\n\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  multifloorNext = (instructionSet)=>{\n    let currentStep = this.state.currentStep;\n    currentStep =\n      currentStep >= instructionSet.length - 1\n        ? instructionSet.length\n        : currentStep + 1;\n    if (instructionSet[currentStep]) {\n      let step = instructionSet[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  multifloorPrev = (instructionSet)=>{\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n    if (this.state.pathFloor[currentStep] !== undefined) {\n      let step = instructionSet[currentStep];\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  }\n\n  _prev = () => {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 1 ? 0 : currentStep - 1;\n\n    if (this.state.pathFloor[currentStep] !== undefined) {\n      let step = this.state.pathCaption[currentStep];\n      console.log(\"step\",step)\n      var utter = new window.SpeechSynthesisUtterance(step);\n      window.speechSynthesis.cancel();\n      window.speechSynthesis.speak(utter);\n\n      // if (\n      //   this.state.pathFloor[currentStep + 1].floor !==\n      //   this.state.pathFloor[currentStep].floor\n      // ) {\n      //   let step = this.state.pathCaption[currentStep-1];\n      //   var utter = new window.SpeechSynthesisUtterance(step);\n      //   window.speechSynthesis.cancel();\n      //   window.speechSynthesis.speak(utter);\n      //   // this.navigatePrevious();\n      // }\n    }else{\n      \n   \n    }\n    this.setState({\n      currentStep: currentStep\n    });\n  };\n\n  playInstruction = (pause)=>{\n    var synth = window.speechSynthesis;\n    synth.cancel();\n    if(pause === true){\n      synth.pause();\n    }else{\n      synth.resume();\n    }\n    // let utterance = new SpeechSynthesisUtterance(\"Hello world!\");\n    // synth.speak(utterance);\n    // synth.resume()\n    let instruction = this.filterInstruction()\n\n    instruction.forEach(r=>{\n      var utterance1 = new SpeechSynthesisUtterance(r);\n      synth.speak(utterance1);\n    })\n  }\n\n  filterInstruction = ()=>{\n    var instructions = [];\n    var stepsCount = [];\n    let instruction;\n    if(this.state.srcfloor === this.state.dstfloor){\n      instruction = this.state.pathCaption\n    }else{\n      instruction = this.state.currentFloor === this.state.firstFlr?this.state.firstFlrInstruction:this.state.secondFlrInstruction\n    }\n    instructions = instruction &&  instruction.map((r, i) => {\n                        if (\n                          r.includes(\"right\") ||\n                          r.includes(\"Right\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"left\") ||\n                          r.includes(\"Left\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"forward\")\n                        ) {\n                          console.log(\"'r\",r)\n\n                          let theNum  = r.match(/\\d+/)[0]\n                          stepsCount.push(parseInt(theNum))\n                          return r \n                        } else if (\n                          r.includes(\"Turn 1 O' Clock\") ||\n                          r.includes(\"Turn 2 O' Clock\") ||\n                          r.includes(\"Turn 3 O' Clock\") \n                        ) {\n                          return'Turn slight right' \n                        }else if(  \n                          r.includes(\"Turn 4 O' Clock\") ||\n                          r.includes(\"Turn 5 O' Clock\")){\n                            return 'Turn back and then turn slight left' \n                        } else if (\n                          r.includes(\"Turn 7 O' Clock\") ||\n                          r.includes(\"Turn 8 O' Clock\") ||\n                          r.includes(\"Turn 9 O' Clock\") \n                        ) {\n                          return 'turn slight left'\n                        }else if(                        \n                          r.includes(\"Turn 10 O' Clock\") ||\n                          r.includes(\"Turn 11 O' Clock\")){\n                            return 'Turn back and then turn slight left'\n                        } else if (\n                          r.includes(\"Turn 6 O' Clock\")\n                        ) {\n                          return 'Turn back'\n                        } else if (r.includes(\"You are at\")) {\n                          return r\n                        } else if (r.includes(\"reached\")) {\n                          return r\n                        } else if (\n                          r.includes(\"Turn 0 O' Clock\") ||\n                          r.includes(\"Turn 12 O' Clock\")\n                        ) {\n                          return null \n                        }else{\n                          return r\n                        }\n    })\n    console.log(\"instrcutsion\",instruction)\n    var distance\n\n    if(instructions){\n      const add = arr => arr.reduce((a, b) => a + b, 0);\n      distance = add(stepsCount);\n      instructions = instructions.filter( (el)=> {\n        return el != null;\n      });\n    }\n    // instructions.splice(instructions.length-2, 1);\n    return instructions;\n  }\n\n  handleSourceLocation = (vals)=>{\n      this.setState(\n        {\n          selectedSrcLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          selectedDstLocation: `${this.state.selectedVenue}${this.state.selectedBuilding}`,\n          buildingView: false\n        },\n        () => {\n          this.props.androidNavigation({venueName:this.state.selectedVenue,buildingName:this.state.selectedBuilding},()=>{\n          })\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"srcBuildingLocation\"\n          );\n          this.fetchLocation(\n            this.state.selectedVenue,\n            this.state.selectedBuilding,\n            \"dstBuildingLocation\"\n          );\n          if(this.state.dstName !== \"Select Destination\"){\n            this.handleSubmit()\n          }else{\n            this.setNavigation(this.state.selectedDstLocation);\n          }\n        }\n      );\n  }\n\n\n\n  render() {\n\n    var combineInstructions = [];\n    if(this.state.srcfloor === this.state.dstfloor){\n      combineInstructions = this.state.pathCaption\n    }else{\n      if(this.state.firstFlr === this.state.currentFloor){\n        combineInstructions = this.state.firstFlrInstruction\n      }else{\n        combineInstructions = this.state.secondFlrInstruction\n      }\n      // if(this.state.firstFlrInstruction = this.state.secondFlrInstruction)\n    }\n\n    let { center, currentPos } = this.state;\n    let { srcBuildingLocation, dstBuildingLocation } = this.state;\n\n    return (\n      <React.Fragment>\n        <div hidden={!this.state.showInstructions}>\n          <Instructions\n            dstAddress={this.state.dstAddress}\n            globalTime={this.state.globalTime}\n            globalDistance={this.state.globalDistance}\n            currentLocation={this.state.currentLocation}\n            handleBuildingView={this.handleBuildingView}\n            instructionSet={\n               combineInstructions\n            }\n            buildingView={this.state.buildingView}\n            sourceLocation={this.state.currentLocation}\n            dstLocation={this.state.dstAddress}\n          />\n        </div>\n        {/* style={{background:\"#e0e0e0\"}} */}\n        <div hidden={this.state.showInstructions}  >\n          {!this.state.buildingView && ! this.state.showStrtMenu && !this.state.showDstMenu ? (\n            <React.Fragment>\n                  <div\n                className=\"src-dst fixed-top\"\n                id=\"src-bar\"\n                // style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        localStorage.setItem('cuurent-link','SELECT STARTING POINT')\n                        this.setState({\n                          showStrtMenu: true,\n                          showDstMenu:false,\n                          srcReadOnly: false\n                        },()=>{\n                          this.props.navContent('SELECT STARTING POINT',()=>{\n\n                          })\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button>\n               \n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto mt-3\" \n                // style={{marginTop:\"50px\"}}\n                >\n                <div className=\"col-12 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          showStrtMenu:false,\n                          dstReadOnly: false\n                        },()=>{\n                          this.props.navContent('SELECT DESTINATION',()=>{\n\n                          })\n                        });\n                      }}\n                    >\n                       <img\n                        className=\"float-left mt-2 mr-2 my-auto\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.dstAddress}\n                      </p>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>\n          ) : null}       \n        {this.state.showStrtMenu\n                ? \n               \n                <SelectSource\n                srcName = {this.state.srcName}\n                currentLocation = {this.state.currentLocation}\n                selectedSrcLocation = {this.state.selectedSrcLocation}\n                locationList = {this.state.locationList}\n                srcReadOnly = {this.state.srcReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    srcReadOnly:!this.state.srcReadOnly\n                  })\n                }}\n                handleDstAct = {()=>{\n                  this.setState({\n                    destinationActive:true\n                  })\n                }}\n                srcFloorList = {this.state.srcFloorList}\n                dstAddress = {this.state.dstAddress}\n                showStrtMenu = {() => {\n                  this.setState({ showStrtMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                    this.setState({\n                      selectedVenue:val,\n                      selectedDestinationVenue:val,\n                      destinationActive:false,\n                      showMenu:true\n                    },()=>{\n                      this.getBuildingList(val)\n                    })\n                }}\n                selectedVenue = {this.state.selectedVenue}\n                buildingList = {this.state.buildingList}\n                showMenu = {this.state.showMenu}\n                selectedBuilding = {this.state.selectedBuilding}\n                buildingChange = {( vals )=>{\n\n                    this.setState({\n                      selectedBuilding:vals,\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n                handleSelectSource = {(e)=>{\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        tmpSrcLocation: e[0],\n                      },\n                      () => {\n                        this.handleSrcChange(e);\n                      }\n                    );\n                  }\n                }}\n                handleSourceLocation = {(e)=>{\n                  console.log(\"ee\",e)\n                  if (e.length > 0) {\n                    this.setState(\n                      {\n                        selectedSrcLocation: e[0],\n                        selectedDstLocation: e[0],\n                        buildingView: false,\n                        selectedVenue:e[0].venueName,\n                        selectedBuilding:e[0].buildingName\n                      },\n                      () => {\n                        this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                        })\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"srcBuildingLocation\"\n                        );\n                        this.fetchLocation(\n                          e[0].venueName,\n                          e[0].buildingName,\n                          \"dstBuildingLocation\"\n                        );\n                        if(this.state.dstName !== \"Select Destination\"){\n                          this.handleSubmit()\n                        }else{\n                          this.setNavigation(this.state.selectedDstLocation);\n                        }\n                      }\n                    );\n                  }\n                }}\n                />\n                :null}\n                \n              {this.state.showDstMenu\n                ? \n                <SelectDestination\n                dstName={this.state.dstName}\n                currentLocation = {this.state.currentLocation}\n                selectedDstLocation = {this.state.selectedDstLocation}\n                selectedDestination = {this.state.selectedDestination}\n                locationList = {this.state.locationList}\n                dstReadOnly = {this.state.dstReadOnly}\n                handleBlurr = {()=>{\n                  this.setState({\n                    dstReadOnly:!this.state.dstReadOnly\n                  })\n                }}\n                dstFloorList={this.state.dstFloorList}\n                showDstMenu={()=>{\n                  this.setState({ showDstMenu: false });\n                }}\n                destinationActive  = {this.state.destinationActive}\n                venueChange = {(val)=>{\n                  this.setState({\n                    selectedDestinationVenue:val,\n                    destinationActive:true,\n                    showMenu:true\n                  },()=>{\n                    this.getBuildingList(val)\n                  })\n                }}\n                handleDstAct = {()=>{\n                  this.setState({\n                    destinationActive:true\n                  })\n                }}\n                selectedVenue = {this.state.selectedDestinationVenue}\n                buildingList = {this.state.buildingList}\n                selectedBuilding = {this.state.selectedDestinationBuilding}\n                selBuild={this.state.selectedDestinationBuilding}\n                buildingChange = {( vals )=>{\n                    this.setState({\n                      selectedDestinationBuilding:vals\n                    },()=>{\n                      this.handleSourceLocation()\n                    })\n                }}\n                venueList = {this.state.venueList}\n\n                handleSelectDestination = {(e)=>{\n                  let resp = \"\";\n                  if (e[0].floorElement === \"Rooms\") {\n                    resp = `${e[0].roomName}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"FloorConnection\") {\n                    resp = `${e[0].name}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"Services\") {\n                    resp = `${e[0].type}(${e[0].floor})`;\n                  } else if (e[0].floorElement === \"RestRooms\") {\n                    resp = `${e[0].type} Washroom (${e[0].floor})`;\n                  } else {\n                    resp = \"\";\n                  }\n                  this.setState(\n                    {\n                      tmpDstLocation: e[0],\n                      dstName:e[0],\n                      dstAddress: `${resp}, ${this.state.dstBuildingLocation.buildingName}, ${this.state.dstBuildingLocation.venueName}`,\n                      showDstMenu: false,\n                      dstReadOnly: true,\n                      destinationActive:false,\n                      showMenu:false\n                    },\n                    () => {\n                      if (\n                        srcBuildingLocation.venueName ===\n                          dstBuildingLocation.venueName &&\n                        srcBuildingLocation.buildingName ===\n                          dstBuildingLocation.buildingName\n                      ) {\n                        this.handleDstChange(e);\n                      }\n                    }\n                  );\n                }}\n                handleSourceLocation = {(e)=>{\n                if (e.length > 0) {\n                  let venueName = e[0].venueName;\n                  let buildingName = e[0].buildingName;\n                  let venue = this.state.srcBuildingLocation.venueName;\n                  let building = this.state.srcBuildingLocation.buildingName;\n                  if (!venue && !building) {\n                    let data = { venueName, buildingName };\n                    let props;\n                    this.props.androidNavigation({venueName:e[0].venueName,buildingName:e[0].buildingName},()=>{\n                    })\n                    this.setNavigation(data);\n                    this.props.floorList(data, () => {\n                      this.props.getAllBuildingElements(data, () => {\n                        let navInfo = this.props.navigationInfo;\n                        for (let i = 0; i < navInfo.length; i++) {\n                          if (\n                            navInfo[i].properties.floorElement === \"Rooms\" &&\n                            navInfo[i].properties.doorGroup ===\n                              \"Entrance | Exit\"\n                          ) {\n                            props = navInfo[i].properties;\n                            var ind = this.findFloor(\n                              \"ground\",\n                              this.props.flrList.data\n                            );\n                            this.setState(\n                              {\n                                srcName: props.roomName,\n                                srcfloor: \"ground\",\n                                srcVal: parseInt(props.node),\n                                srcfloorL: this.props.flrList.data[ind]\n                                  .floorL,\n                                srcfloorB: this.props.flrList.data[ind]\n                                  .floorB,\n                                imgName: this.props.flrList.data[ind]\n                                  .fileName,\n                                pathCaption: []\n                              },\n                              () => {\n                                  this.handleSubmit();\n                              }\n                            );\n                          }\n                        }\n                       \n                      });\n                    });\n                  }\n                  this.setState(\n                    {\n                      selectedDstLocation: e[0],\n                      buildingView: false\n                    },\n                    () => {\n                      this.fetchLocation(\n                        e[0].venueName,\n                        e[0].buildingName,\n                        \"dstBuildingLocation\"\n                      );\n                      // if (\n                      //   this.state.selectedSrcLocation.venueName ===\n                      //     this.state.selectedDstLocation.venueName &&\n                      //   this.state.selectedSrcLocation.buildingName ===\n                      //     this.state.selectedDstLocation.buildingName\n                      // ) {\n                      //   this.setNavigation(this.state.selectedDstLocation);\n                      // }\n                      if (\n                        this.state.selectedVenue ===\n                          this.state.selectedDestinationVenue &&\n                        this.state.selectedBuilding ===\n                          this.state.selectedDestinationBuilding\n                      ) {\n                        this.setNavigation(this.state.selectedDstLocation);\n                      }\n                    }\n                  );\n                }\n                }}\n                />\n                :null}\n\n          {this.state.buildingView ? (\n            <InstructionTab\n              pathCaption={combineInstructions}\n              currentStep={this.state.currentStep}\n              nextButton={()=>this.nextButton()}\n              imgDiv={this.imgDiv}\n            />\n          ) : null}\n          <div hidden={this.state.buildingView}>\n            <MapContainer\n              style={{ height: \"100vh\" }}\n              center={center}\n              zoom={this.state.zoomLevel}\n              ref={m => {\n                this.leafletMap = m;\n              }}\n              onClick={this.handleClick}\n            >\n              <TileLayer\n                url={\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n              />\n              <Marker position={this.state.currentPos} draggable={true}>\n                <Popup position={this.state.currentPos}>\n                  Current location:\n                  <pre>{JSON.stringify(this.state.currentPos, null, 2)}</pre>\n                </Popup>\n              </Marker>\n            </MapContainer>\n          </div>\n          <div\n            hidden={!this.state.buildingView}\n            className=\"mt-1\"\n            style={{ height: \"100%\", width: \"100%\", overflow: \"scroll\" }}\n          >\n            {!this.state.samefloor ? (\n              <div\n            className=\"btn-group-vertical btn-info rounded  shadow mt-5\"\n            role=\"group\"\n            aria-label=\"First group\"\n            style={{ position: \"fixed\", zIndex: \"5\", background: \"#56c9ad\" }}\n          >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white text-capitalize\"\n                  onClick={this.navigatePrevious}\n                >\n                  { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.srcfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark text-white\"\n                  onClick={this.navigateNext}\n                >\n              { this.props.flrList.data.map((r,i)=>{\n                    if(this.state.dstfloor === r.floor){\n                        return `L${i}`\n                    }\n                  })}\n                </button>\n          </div>\n            ) : null}\n            <div style={{ height: \"100%\", top: \"50px\" }}>\n              <img\n                alt=\"map\"\n                id=\"myImage\"\n                src={`${config.imgUrl}/${this.state.imgName}`}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"srcImage\"\n                src=\"/inclunav/assets/images/source.svg\"\n                style={{WebkitTransform: `rotate(20deg)`}}\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"dstImage\"\n                src=\"/inclunav/assets/images/destination.svg\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"stairs\"\n                src=\"/inclunav/assets/images/stair.png\"\n                hidden={true}\n              ></img>\n              <img\n                alt=\"map\"\n                id=\"lift\"\n                src=\"/inclunav/assets/images/lift.png\"\n                hidden={true}\n              ></img>\n              <div id=\"mydiv1\"></div>\n              <div className=\"canvaDiv\" ref=\"canv\" onScroll={this.handleScroll}>\n                <canvas\n                  id=\"myCanvassrc\"\n                  width={this.state.canvasWidth}\n                  height={this.state.canvasHeight}\n                  style={{ position: \"absolute\" }}\n                  hidden={!this.state.samefloor}\n                ></canvas>\n              </div>\n              <div id=\"mydiv\"></div>\n            </div>\n          </div>\n          { !this.state.instructionReady ? (\n            <GlobalDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation = {this.state.dstBuildingLocation}\n              tmpDstLocation = {this.state.tmpDstLocation}\n              destinationVenue = {this.state.selectedDestinationVenue}\n              destinationBuilding = {this.state.selectedDestinationBuilding}\n              dstfloor = {this.state.dstfloor}\n              dstVal = {this.state.dstVal}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              openModal = {this.onOpenModal}\n              closeBuilding = {()=>{\n                this.setState({\n                  buildingView: false\n                });\n              }}\n              // instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              instructionSet={\n                combineInstructions\n              }\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            // null\n          ) : (\n            <React.Fragment>\n            <NavigationDetails\n              toggle={this.state.toggle}\n              dstName={this.state.dstName}\n              dstAddress={this.state.dstAddress}\n              globalDistance={this.state.globalDistance}\n              currentLocation={this.state.currentLocation}\n              dstBuildingLocation={this.state.dstBuildingLocation}\n              stateToggle = {()=>{\n                this.setState({ toggle: !this.state.toggle });\n              }}\n              currentStep = {this.state.currentStep}\n              nextButton = {this.nextButton}\n              previousButton = {this.previousButton}\n              instructionSet={this.state.currentFloor === this.state.firstFlr? this.state.firstFlrInstruction:this.state.secondFlrInstruction}\n              playInstruction={(pause)=>{\n                this.playInstruction(pause)\n              }\n              }\n              closeBuilding = {() => {\n                this.setState({\n                  buildingView: false,\n                  instructionReady: false,\n                  zoom: false\n                });\n              }}\n              handleShowInstructions = {()=>{\n                this.setState({\n                  showInstructions: true\n                });\n              }}\n            />\n            </React.Fragment>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    getImage: state.imgDetails,\n    allNodes: state.getAllElem,\n    flrList: state.floorList,\n    userProfile:state.userPortfolio,\n    navigationInfo: state.navigationInfo,\n    vnList: state.venueList,\n    bldList: state.buildingList,\n    gpsLocation: state.gpsLocation,\n    androidNav: state.androidNavigation,\n    globalRoutes:state.osmRoutes,\n    pickupPoint:state.pickupPoints,\n    currentTab:state.navContent\n  };\n};\n\nexport default connect(mapStateToProps, {\n  floorList,\n  imgDetails,\n  getAllBuildingElements,\n  venueList,\n  buildingList,\n  getGpsLocation,\n  androidNavigation,\n  getUserPortfolio,\n  osmRoutes,\n  pickupPoints,\n  navContent\n})(Navigation);\n","/home/jahnavi/navigation/src/components/dashboard/navigation/NavigationDetails.js",["900"],"import React from 'react';\n\nclass NavigationDetails extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      instructionSet :[],\n      pause:true\n    }\n  }\n\n  componentDidMount(){\n    var instructions = [];\n    var stepsCount = [];\n    \n    console.log(\"instruction set\",this.props.instructionSet)\n\n    instructions = this.props.instructionSet &&  this.props.instructionSet.map((r, i) => {\n                        if (\n                          r.includes(\"right\") ||\n                          r.includes(\"Right\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"left\") ||\n                          r.includes(\"Left\")\n                        ) {\n                          return r \n                        } else if (\n                          r.includes(\"forward\")\n                        ) {\n                          let theNum  = r.match(/\\d+/)[0]\n                          stepsCount.push(parseInt(theNum))\n                          return r \n                        } else if (\n                          r.includes(\"Turn 1 O' Clock\") ||\n                          r.includes(\"Turn 2 O' Clock\") ||\n                          r.includes(\"Turn 3 O' Clock\") \n                        ) {\n                          return'Turn slight right' \n                        }else if(  \n                          r.includes(\"Turn 4 O' Clock\") ||\n                          r.includes(\"Turn 5 O' Clock\")){\n                            return 'Turn back and then turn slight left' \n                        } else if (\n                          r.includes(\"Turn 7 O' Clock\") ||\n                          r.includes(\"Turn 8 O' Clock\") ||\n                          r.includes(\"Turn 9 O' Clock\") \n                        ) {\n                          return 'turn slight left'\n                        }else if(                        \n                          r.includes(\"Turn 10 O' Clock\") ||\n                          r.includes(\"Turn 11 O' Clock\")){\n                            return 'Turn back and then turn slight left'\n                        } else if (\n                          r.includes(\"Turn 6 O' Clock\")\n                        ) {\n                          return 'Turn back'\n                        } else if (r.includes(\"You are at\")) {\n                          return r\n                        } else if (r.includes(\"reached\")) {\n                          return r\n                        } else if (\n                          r.includes(\"Turn 0 O' Clock\") ||\n                          r.includes(\"Turn 12 O' Clock\")\n                        ) {\n                          return null \n                        }else{\n                          return r\n                        }\n    })\n    var distance\n  \n    if(instructions){\n      const add = arr => arr.reduce((a, b) => a + b, 0);\n      distance = add(stepsCount);\n      instructions = instructions.filter( (el)=> {\n        return el != null;\n      });\n      this.setState({\n        instructionSet:instructions\n      })\n    }\n  }\n\n  playRoute = ()=>{\n    console.log(\"called\")\n    var synth = window.speechSynthesis;\n    console.log(\"r\",this.state.instructionSet)\n\n    this.state.instructionSet.forEach(r=>{\n      var utterance1 = new SpeechSynthesisUtterance(r);\n      synth.speak(utterance1);\n    })\n    // synth.speak(utterance1);\n    // synth.speak(utterance2);\n    // synth.pause(); // pauses utterances being spoken\n  }\n\n  render(){\n    return <div\n    className={\n      this.props.toggle\n        ? \"bottom-navigation-bar active\"\n        : \"bottom-navigation-bar\"\n    }\n  >\n    <div\n      className=\"bottom-navigation-barbtn\"\n      onClick={() => {\n          this.props.stateToggle()\n        // this.setState({ toggle: !this.state.toggle });\n      }}\n    >\n      <img\n        className=\"vector40\"\n        src=\"assets/images/viewDetails.svg\"\n        alt=\"doubel tap to open instruction options\"\n      />\n    </div>\n\n    <div className=\"navigation-details\">\n      <div className=\"row w-100 navigation-header mx-auto mb-1\">\n        <div\n          className=\"col-2\"\n          onClick={() => {\n              this.props.closeBuilding()\n          }}\n        >\n          <img\n            className=\"float-left mt-4 mr-2\"\n            src=\"/inclunav/assets/images/close_navigation.svg\"\n            alt=\"go back to navigation page\"\n          />\n        </div>\n        <div className=\"col-8 my-auto\" onClick={()=>{\n          this.props.stateToggle()\n\n        }}>\n          <div className=\"direction-text\">\n            <div className=\"text-white\">{this.props.dstName} </div>\n            <div className=\"text-white strt-txt text-justify\">\n            <span className=\"sr-only\">You have to reach</span>  {this.props.dstAddress}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-2\">\n          <img\n            className=\"float-left mt-4 mr-2\"\n            src=\"/inclunav/assets/images/switch.svg\"\n            alt=\"switch floor connection\"\n          />\n        </div>\n      </div>\n      <div className=\"row w-100  mx-auto bottom-navigation-div mb-1\">\n      <div className=\"col-2 text-white my-auto\"   onClick={()=>{\n            this.setState({\n              pause:!this.state.pause\n            },()=>{\n              this.props.playInstruction(this.state.pause)\n            })\n          }}>\n        {/* <img\n            className=\"ml-2 mt-2\"\n            src={this.state.pause === false?\"/inclunav/assets/images/route_voice.svg\":\"/inclunav/assets/images/voice_navigation_off.svg\"}\n            alt=\"share location\"\n          /> */}\n          {this.state.pause === false?<React.Fragment> <i className=\"fa fa-pause\" title=\"double tap to pause\" /> <span className=\"sr-only\">double tap to pause  </span> </React.Fragment>:<React.Fragment> <i className=\"fa fa-play\" title=\"double tap to play\" /> <span className=\"sr-only\"> double tap to play  </span> </React.Fragment>}\n        </div>\n          <div className=\"col-2 text-white my-auto\" onClick = {()=>{\n            this.props.previousButton()\n          }} >\n          <i className=\"fa fa-step-backward\" title=\"previous step\" /><span className=\"sr-only\">Previous Step  </span>\n        </div>\n        <div className=\"col-2 my-auto\" onClick={()=>{\n          this.props.nextButton()\n        }} >\n          <i className=\"fa fa-step-forward\" title=\"next step\" /><span className=\"sr-only\">Next Step  </span>\n        </div>\n        <div\n          className=\"col-6 my-auto\"\n          onClick={()=>{\n            this.setState({\n              pause:!this.state.pause\n            },()=>{\n              this.props.playInstruction(this.state.pause)\n            })\n          }}\n        >\n            Play Route\n        </div>\n      </div>\n      <div className=\"row w-100  mx-auto bottom-navigation-div mb-1\">\n      <div\n          className=\"col-2\"\n          onClick={() => {\n              this.props.handleShowInstructions()\n          }}\n        >\n          <img\n            className=\"ml-2 mt-2\"\n            src=\"/inclunav/assets/images/toggle_menu.svg\"\n            alt=\"share location\"\n          />\n        </div>\n        <div\n          className=\"col-10 my-auto\"\n          onClick={() => {\n          }}\n        >\n            View Directions\n        </div>\n      </div>\n      {/* <div className=\"row w-100  mx-auto bottom-navigation-div\">\n      <div\n          className=\"col-2\"\n          onClick={() => {\n              this.props.handleShowInstructions()\n          }}\n        >\n          <img\n            className=\"ml-2 mt-2\"\n            src=\"/inclunav/assets/images/telephone.svg\"\n            alt=\"share location\"\n          />\n        </div>\n        <div\n          className=\"col-10 my-auto\"\n          onClick={() => {\n          }}\n        >\n            Contact Building Staff\n        </div>\n      </div> */}\n    </div>\n  </div>\n  }\n}\n\n\n  export default NavigationDetails;","/home/jahnavi/navigation/src/components/dashboard/navigation/Instructions.js",[],"/home/jahnavi/navigation/src/components/dashboard/navigation/GlobalDetails.js",[],"/home/jahnavi/navigation/src/components/dashboard/navigation/InstructionTab.js",["901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918"],"import React from 'react'\nconst InstructionTab = (props)=>{\n    return (\n        <React.Fragment>\n        <div className=\"top-content\">\n                <div className=\"row w-100 h-100\">\n                  {props.pathCaption.map((r, i) => {\n                    if (i === props.currentStep) {\n                      return (\n                          <React.Fragment>\n                        <div\n                          className=\"col-2 font-weight-bolder text-center my-auto\"\n                        >\n                          {(()=>{\n                                                if (\n                                                    i === props.currentStep &&\n                                                    props.pathCaption[i]\n                                                  ) {\n                                                    if (\n                                                      props.pathCaption[i].includes(\"right\") ||\n                                                      props.pathCaption[i].includes(\"Right\")\n                                                    ) {\n                                                      return <img src=\"assets/images/turn_right.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\"left\") ||\n                                                      props.pathCaption[i].includes(\"Left\")\n                                                    ) {\n                                                      return <img src=\"assets/images/turn_left.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\"forward\") ||\n                                                      props.pathCaption[i].includes(\"Turn 12 O' Clock\")\n                                                    ) {\n                                                      return <img src=\"assets/images/go_straight.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 1 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 2 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 3 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 4 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\"Turn 5 O' Clock\")\n                                                    ) {\n                                                      return <img src=\"assets/images/slight_right.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 7 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 8 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 9 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\n                                                        \"Turn 10 O' Clock\"\n                                                      ) ||\n                                                      props.pathCaption[i].includes(\"Turn 11 O' Clock\")\n                                                    ) {\n                                                      return <img src=\"assets/images/slight_left.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\"Turn 6 O' Clock\")\n                                                    ) {\n                                                      return <img src=\"assets/images/uturn.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\"You are at\")\n                                                    ) {\n                                                      return <img src=\"assets/images/live_location.svg\" />;\n                                                    } else if (\n                                                      props.pathCaption[i].includes(\"reached\")\n                                                    ) {\n                                                      return <img src=\"assets/images/reached.svg\" />;\n                                                    } else {\n                                                      return <img src=\"assets/images/live_location.svg\" />;\n                                                    }\n                                                  } else {\n                                                    return null;\n                                                  }\n                          })()}\n                        </div>\n                        <div\n                          className=\"col-10 font-weight-bolder text-white text-center my-auto\"\n                          id={`show_${props.imgDiv}`}\n                        >\n                          {r}\n                        </div>\n                        </React.Fragment>\n                      );\n                    } else {\n                      return null;\n                    }\n                  })}\n                </div>\n              </div>\n              <div\n                className=\"top-content2 text-center text-white\"\n                onClick={() => {\n                  props.nextButton();\n                }}\n              >\n                Then\n                {props.pathCaption.map((r, i) => {\n                  if (\n                    i === props.currentStep &&\n                    props.pathCaption[i + 1]\n                  ) {\n                    if (\n                      props.pathCaption[i + 1].includes(\"right\") ||\n                      props.pathCaption[i + 1].includes(\"Right\")\n                    ) {\n                      return <img src=\"assets/images/turn_right.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\"left\") ||\n                      props.pathCaption[i + 1].includes(\"Left\")\n                    ) {\n                      return <img src=\"assets/images/turn_left.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\"forward\") ||\n                      props.pathCaption[i + 1].includes(\"Turn 12 O' Clock\")\n                    ) {\n                      return <img src=\"assets/images/go_straight.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 1 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 2 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 3 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 4 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\"Turn 5 O' Clock\")\n                    ) {\n                      return <img src=\"assets/images/slight_right.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 7 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 8 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 9 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\n                        \"Turn 10 O' Clock\"\n                      ) ||\n                      props.pathCaption[i + 1].includes(\"Turn 11 O' Clock\")\n                    ) {\n                      return <img src=\"assets/images/slight_left.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\"Turn 6 O' Clock\")\n                    ) {\n                      return <img src=\"assets/images/uturn.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\"You are at\")\n                    ) {\n                      return <img src=\"assets/images/live_location.svg\" />;\n                    } else if (\n                      props.pathCaption[i + 1].includes(\"reached\")\n                    ) {\n                      return <img src=\"assets/images/reached.svg\" />;\n                    } else {\n                      return <img src=\"assets/images/live_location.svg\" />;\n                    }\n                  } else {\n                    return null;\n                  }\n                })}\n              </div>\n              </React.Fragment>\n    )\n}\n\nexport default InstructionTab;","/home/jahnavi/navigation/src/components/dashboard/navigation/SourceMenu.js",["919"],"// import { Typeahead } from \"react-bootstrap-typeahead\";\n\n// const SourceMenu = (props) => {\n//     return (\n//       <div className=\"d-flex justify-content-center\">\n//         <div className=\"src-location-menu\">\n//           <div\n//             className=\"source-button-strt mb-1\"\n//             onClick={() => {\n//               props.showStrtMenu()\n//             }}\n//           >\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/profile.svg\"\n//               alt=\"user location\"\n//             />\n//             <p className=\"src-menu-txt text-justify mt-0\">\n//               {props.currentLocation}\n//             </p>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/search.png\"\n//               alt=\"search location\"\n//             />\n//             <Typeahead\n//               required\n//               placeholder={`${props.selectedSrcLocation.buildingName} (${props.selectedSrcLocation.venueName})`}\n//               filterBy={[\"venueName\", \"buildingName\"]}\n//               labelKey={option => {\n//                 return `${option.buildingName.split(/(?=[A-Z])/).join(\" \")}(${option.venueName.split(/(?=[A-Z])/).join(\" \")})`;\n//               }}\n//               renderMenuItemChildren={option => (\n//                 <div>\n//                   <div>\n//                     <small>\n//                       {option.buildingName.length > 0\n//                         ? option.buildingName.split(/(?=[A-Z])/).join(\" \")\n//                         : \"\"}\n//                       ({option.venueName.split(/(?=[A-Z])/).join(\" \")}{\" \"}\n//                       {parseInt(option.venueDistance)} KiloMeter )\n//                     </small>\n//                   </div>\n//                 </div>\n//               )}\n//               onChange={e => {\n//                 props.handleSourceLocation(e)\n//               }}\n//               disabled={false}\n//               id=\"source\"\n//               value={props.selectedSrcLocation.venueName}\n//               options={props.locationList}\n//               name=\"list\"\n//               className=\"mb-2 form-control-dashboard mt-1\"\n//               inputProps={{\n//                 readOnly: props.srcReadOnly\n//               }}\n//               onBlur={e => {}}\n//             />\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/search_area.png\"\n//               alt=\"search area\"\n//             />\n//             <Typeahead\n//               required\n//               placeholder={`${props.srcName}`}\n//               filterBy={[\"name\"]}\n//               labelKey={option => {\n//                 let resp = \"\";\n//                 if (option.floorElement === \"Rooms\") {\n//                   resp = option.roomName?`${option.roomName}(${option.floor})`:`${option.name} (${option.floor})`;\n//                 } else if (option.floorElement === \"FloorConnection\") {\n//                   resp = `${option.name}(${option.floor})`;\n//                 } else if (option.floorElement === \"Services\") {\n//                   if(option.type === \"Beacons\"){\n//                     resp = ``;\n//                   }else{\n//                     resp = `${option.type}(${option.floor})`;\n//                   }\n//                 } else if (option.floorElement === \"RestRooms\") {\n//                   resp = `${option.type} Washroom (${option.floor})`;\n//                 } else {\n//                   return \"\";\n//                 }\n//                 return resp;\n//               }}\n//               onChange={e => {\n//                 console.log(\"ee\",e)\n//                     props.handleSelectSource(e)\n//               }}\n//               disabled={false}\n//               id=\"source\"\n//               onClick={() => {}}\n//               value={props.srcName}\n//               options={props.srcFloorList}\n//               name=\"list\"\n//               className=\"mb-2 form-control-dashboard mt-1\"\n//               inputProps={{\n//                 readOnly: props.srcReadOnly\n//               }}\n//               onBlur={e => {}}\n//             />\n//           </div>\n//           {/* <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/bulls_eye.png\"\n//               alt=\"find location\"\n//             />\n//             <p className=\"menu-txt text-justify \">Find My Location</p>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/choose_map.png\"\n//               alt=\"choose map\"\n//             />\n//             <p className=\"menu-txt text-justify \">Choose on Map</p>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/home.png\"\n//               alt=\"home\"\n//             />\n//             <div className=\"d-flex-column\">\n//               <div className=\"menu-txt text-justify mb-0\">Home</div>\n//               <div className=\"text-white sub-menu-text d-block\">\n//                 Room/House, Building, Campus, City - 123...\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/suitcase.png\"\n//               alt=\"work\"\n//             />\n//             <div className=\"d-flex-column\">\n//               <div className=\"menu-txt text-justify mb-0\">Work</div>\n//               <div className=\"text-white sub-menu-text d-block\">\n//                 Room/House, Building, Campus, City - 123...\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/saved_address.png\"\n//               alt=\"saved address\"\n//             />\n//             <div className=\"d-flex-column\">\n//               <div className=\"menu-txt text-justify mb-0\">Saved Address</div>\n//               <div className=\"text-white sub-menu-text d-block\">\n//                 Room/House, Building, Campus, City - 123...\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"source-button mb-1\">\n//             <img\n//               className=\"float-left mt-2 mr-2\"\n//               src=\"/inclunav/assets/images/clock.png\"\n//               alt=\"clock\"\n//             />\n//             <div className=\"d-flex-column\">\n//               <div className=\"menu-txt text-justify mb-0\">\n//                 Landmark Previously Visited\n//               </div>\n//               <div className=\"text-white sub-menu-text d-block\">\n//                 Room/House, Building, Campus, City - 123...\n//               </div>\n//             </div>\n//           </div> */}\n//         </div>\n//       </div>\n//     );\n//   };\n\n// export default SourceMenu;\n\nimport React from 'react';\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport './menu.css';\n\nconst SourceMenu = (props) => {\n    return (\n        <React.Fragment>\n            <div\n                className=\"source-destination fixed-top source\"\n                id=\"src-bar\"\n                style={{ marginTop: \"50px\" }}\n              >\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-2\">\n                  <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/profile.svg\"\n                        alt=\"user location\"\n                        alt=\"current location\"\n                      />\n                  </div>\n                  <div className=\"col-10 p-0\">\n                    {/* <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showStrtMenu: true,\n                          srcReadOnly: false\n                        });\n                      }}\n                    >\n                      <p className=\"strt-txt text-justify \">\n                        {this.state.currentLocation}\n                      </p>\n                    </button> */}\n                    <Typeahead\n                      required\n                      placeholder={`${props.selectedVenue}`}\n                    //   placeholder={`${props.selectedSrcLocation.buildingName} (${props.selectedSrcLocation.venueName})`}\n                      filterBy={[\"venueName\"]}\n                      labelKey={option => {\n                        return `${option.venueName.split(/(?=[A-Z])/).join(\" \")}`;\n                      }}\n                      renderMenuItemChildren={option => (\n                        <div className=\"mapped-data m-0 \">\n                            <div\n                                className=\"row w-100\"\n                            >\n                                <div className=\"col-2\">\n                                    <div>\n                                        <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\n                                    </div>\n                                    <div className='text-center'>\n                                        {parseInt(option.distance)}\n                                    </div>\n                                </div>\n                                <div className=\"col-10\">\n                                    <div className=\"row\" >\n                                        <div className=\"col-12\">\n                                            {option.venueName.split(/(?=[A-Z])/).join(\" \")}\n                                        </div>\n                                    </div>\n                                    <div className=\"row\" >\n                                        <div className=\"col-12\">\n                                            <small> {option.address} </small>  \n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                          <div>\n                          </div>\n                        </div>\n                      )}\n                      onChange={e => {\n                        // props.handleSourceLocation(e)\n                        if(e.length>0){\n                            props.venueChange(e[0].venueName)\n                        }\n                      }}\n                      disabled={false}\n                      id=\"source\"\n                      value={props.selectedVenue}\n                      options={props.venueList}\n                      name=\"list\"\n                      className=\"mb-2 form-control-dashboard mt-1\"\n                      inputProps={{\n                        readOnly: props.srcReadOnly\n                      }}\n                      onBlur={e => {}}\n                    />\n\n                  </div>\n                </div>\n                <div className=\"mx-auto hr-line\" />\n                {/* <div className=\"mx-auto hr-line\" />\n                <div className=\"row w-100  mx-auto\">\n                  <div className=\"col-10 p-0\">\n                    <button\n                      className=\"btn-nvgtn text-white\"\n                      onClick={() => {\n                        this.setState({\n                          showDstMenu: true,\n                          dstReadOnly: false\n                        });\n                      }}\n                    >\n                      <img\n                        className=\"float-left mt-2 mr-2\"\n                        src=\"/inclunav/assets/images/navigation.svg\"\n                        alt=\"select destination\"\n                      />\n                      <p className=\"strt-txt text-justify \">\n                        {props.dstAddress}\n                      </p>\n                    </button>\n                  </div>\n                  <div className=\"col-2\"></div>\n                </div> */}\n              </div>\n                      {(props.buildingList.length>0) && !props.destinationActive && props.showMenu?\n                                <div className=\"source-button mb-1 w-100 building\">\n                                <img\n                                    className=\"float-left mt-2 mr-2\"\n                                    src=\"/inclunav/assets/images/search.png\"\n                                    alt=\"search area\"\n                                  />\n                                  <Typeahead\n                                    required\n                                    placeholder = {`${props.selectedVenue}`}\n                                    filterBy = {[\"name\"]}\n                                    labelKey={option => {\n                                      return option.buildingName\n                                    }}\n                                    onChange = {e => {\n                                        if(e.length>0){\n                                            props.buildingChange(e[0].buildingName)\n                                        }\n                                    }}\n                                    disabled={false}\n                                    id=\"source\"\n                                    value={props.selectedBulding}\n                                    options={props.buildingList}\n                                    name=\"list\"\n                                    className=\"mb-2 form-control-dashboard mt-1 buiding\"\n                                    inputProps={{\n                                      readOnly: props.srcReadOnly\n                                    }}\n                                    renderMenuItemChildren={option => (\n                                      <div className=\"mapped-data m-0 \">\n                                          <div\n                                              className=\"row w-100\"\n                                          >\n                                              <div className=\"col-2\">\n                                                  <div>\n                                                      <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\n                                                  </div>\n                                                  {/* <div className='text-center'>\n                                                      {parseInt(option.distance)}\n                                                  </div> */}\n                                              </div>\n                                              <div className=\"col-10\">\n                                                  <div className=\"row\" >\n                                                      <div className=\"col-12\">\n                                                          {option.buildingName.split(/(?=[A-Z])/).join(\" \")}\n                                                      </div>\n                                                  </div>\n                                                  <div className=\"row\" >\n                                                      <div className=\"col-12\">\n                                                          <small> {props.selectedVenue} </small>  \n                                                      </div>\n                                                  </div>\n                                              </div>\n                                          </div>\n                                        <div>\n                                        </div>\n                                      </div>\n                                    )}\n                                  />\n                                </div>:null}\n\n                                {(props.srcFloorList.length>0) && !props.destinationActive  && props.showMenu?\n                                <div className=\"source-button mb-1 w-100 src-location\">\n                                <img\n                                    className=\"float-left mt-2 mr-2\"\n                                    src=\"/inclunav/assets/images/search.png\"\n                                    alt=\"search area\"\n                                  />\n                                <Typeahead\n                                              required\n                                              placeholder={`${props.srcName}`}\n                                              filterBy={[\"name\"]}\n                                              labelKey={option => {\n                                                let resp = \"\";\n                                                if (option.floorElement === \"Rooms\") {\n                                                  resp = option.roomName?`${option.roomName}(${option.floor})`:`${option.name} (${option.floor})`;\n                                                } else if (option.floorElement === \"FloorConnection\") {\n                                                  resp = `${option.name}(${option.floor})`;\n                                                } else if (option.floorElement === \"Services\") {\n                                                  if(option.type === \"Beacons\"){\n                                                    resp = ``;\n                                                  }else{\n                                                    resp = `${option.type}(${option.floor})`;\n                                                  }\n                                                } else if (option.floorElement === \"RestRooms\") {\n                                                  resp = `${option.type} Washroom (${option.floor})`;\n                                                } else {\n                                                  return \"\";\n                                                }\n                                                return resp;\n                                              }}\n                                              onChange={e => {\n                                                console.log(\"ee\",e)\n                                                    props.handleSelectSource(e)\n                                              }}\n                                              disabled={false}\n                                              id=\"source\"\n                                              onClick={() => {}}\n                                              value={props.srcName}\n                                              options={props.srcFloorList}\n                                              name=\"list\"\n                                              className=\"mb-2 form-control-dashboard mt-1\"\n                                              inputProps={{\n                                                readOnly: props.srcReadOnly\n                                              }}\n                                              renderMenuItemChildren={option => {\n                                                let resp = \"\";\n                                                let floor = option.floor\n                                                if (option.floorElement === \"Rooms\") {\n                                                  resp = option.roomName?`${option.roomName}`:`${option.name}`;\n                                                } else if (option.floorElement === \"FloorConnection\") {\n                                                  resp = `${option.name}`;\n                                                } else if (option.floorElement === \"Services\") {\n                                                  if(option.type === \"Beacons\"){\n                                                    resp = ``;\n                                                  }else{\n                                                    resp = `${option.type}`;\n                                                  }\n                                                } else if (option.floorElement === \"RestRooms\") {\n                                                  resp = `${option.type} Washroom`;\n                                                } else {\n                                                  resp =  \"\";\n                                                }\n\n                                               return <div className=\"mapped-data m-0 \" style={{padding:\"0\"}}>\n                                                    <div\n                                                        className=\"row w-100\"\n                                                    >\n                                                        <div className=\"col-2\">\n                                                            <div>\n                                                                <img src=\"/inclunav/assets/images/destination2.svg\" alt=\"destination\" />\n                                                            </div>\n                                                            {/* <div className='text-center'>\n                                                                {parseInt(option.distance)}\n                                                            </div> */}\n                                                        </div>\n                                                        <div className=\"col-10\">\n                                                            <div className=\"row\" >\n                                                                <div className=\"col-12\">\n                                                                  {resp}\n                                                                </div>\n                                                            </div>\n                                                            <div className=\"row\" >\n                                                                <div className=\"col-12 text-capitalize\">\n                                                          <small> {floor} Floor,{option.buildingName.split(/(?=[A-Z])/).join(\" \")},{option.venueName.split(/(?=[A-Z])/).join(\" \")} </small>  \n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                  <div>\n                                                  </div>\n                                                </div>\n                                              }}\n                                              onBlur={e => {\n                                                props.handleBlurr()\n                                                props.handleDstAct()\n                                              }}\n                                            />\n\n                                              {/* onBlur={e => {}}\n                                            /> */}\n                                </div>:null}\n      </React.Fragment>\n    );\n  };\n\nexport default SourceMenu;","/home/jahnavi/navigation/src/components/dashboard/navigation/DestinationMenu.js",[],"/home/jahnavi/navigation/src/components/dashboard/navigation/Menu.js",[],"/home/jahnavi/navigation/src/components/dashboard/navigation/SelectSource.js",[],"/home/jahnavi/navigation/src/components/dashboard/navigation/SelectDestination.js",[],{"ruleId":"920","replacedBy":"921"},{"ruleId":"922","replacedBy":"923"},{"ruleId":"924","severity":1,"message":"925","line":15,"column":8,"nodeType":"926","messageId":"927","endLine":15,"endColumn":18},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"928","severity":1,"message":"929","line":1,"column":1,"nodeType":"930","endLine":8,"endColumn":2},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"924","severity":1,"message":"932","line":1,"column":26,"nodeType":"926","messageId":"927","endLine":1,"endColumn":35},{"ruleId":"924","severity":1,"message":"933","line":2,"column":10,"nodeType":"926","messageId":"927","endLine":2,"endColumn":21},{"ruleId":"924","severity":1,"message":"934","line":2,"column":23,"nodeType":"926","messageId":"927","endLine":2,"endColumn":34},{"ruleId":"924","severity":1,"message":"935","line":3,"column":10,"nodeType":"926","messageId":"927","endLine":3,"endColumn":22},{"ruleId":"924","severity":1,"message":"936","line":3,"column":23,"nodeType":"926","messageId":"927","endLine":3,"endColumn":30},{"ruleId":"937","severity":1,"message":"938","line":33,"column":5,"nodeType":"939","endLine":33,"endColumn":25,"suggestions":"940"},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"937","severity":1,"message":"938","line":46,"column":4,"nodeType":"939","endLine":46,"endColumn":39,"suggestions":"941"},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"924","severity":1,"message":"932","line":1,"column":27,"nodeType":"926","messageId":"927","endLine":1,"endColumn":36},{"ruleId":"924","severity":1,"message":"933","line":2,"column":10,"nodeType":"926","messageId":"927","endLine":2,"endColumn":21},{"ruleId":"924","severity":1,"message":"934","line":2,"column":23,"nodeType":"926","messageId":"927","endLine":2,"endColumn":34},{"ruleId":"924","severity":1,"message":"942","line":5,"column":10,"nodeType":"926","messageId":"927","endLine":5,"endColumn":16},{"ruleId":"924","severity":1,"message":"943","line":187,"column":7,"nodeType":"926","messageId":"927","endLine":187,"endColumn":16},{"ruleId":"924","severity":1,"message":"944","line":193,"column":7,"nodeType":"926","messageId":"927","endLine":193,"endColumn":15},{"ruleId":"924","severity":1,"message":"945","line":197,"column":7,"nodeType":"926","messageId":"927","endLine":197,"endColumn":19},{"ruleId":"924","severity":1,"message":"931","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":25},{"ruleId":"924","severity":1,"message":"946","line":3,"column":10,"nodeType":"926","messageId":"927","endLine":3,"endColumn":14},{"ruleId":"924","severity":1,"message":"947","line":4,"column":8,"nodeType":"926","messageId":"927","endLine":4,"endColumn":14},{"ruleId":"924","severity":1,"message":"948","line":130,"column":15,"nodeType":"926","messageId":"927","endLine":130,"endColumn":19},{"ruleId":"949","severity":1,"message":"950","line":131,"column":20,"nodeType":"926","messageId":"951","endLine":131,"endColumn":21},{"ruleId":"924","severity":1,"message":"952","line":132,"column":13,"nodeType":"926","messageId":"927","endLine":132,"endColumn":18},{"ruleId":"924","severity":1,"message":"953","line":191,"column":5,"nodeType":"926","messageId":"927","endLine":191,"endColumn":11},{"ruleId":"924","severity":1,"message":"954","line":200,"column":5,"nodeType":"926","messageId":"927","endLine":200,"endColumn":16},{"ruleId":"924","severity":1,"message":"955","line":217,"column":5,"nodeType":"926","messageId":"927","endLine":217,"endColumn":12},{"ruleId":"924","severity":1,"message":"956","line":563,"column":26,"nodeType":"926","messageId":"927","endLine":563,"endColumn":33},{"ruleId":"924","severity":1,"message":"957","line":623,"column":11,"nodeType":"926","messageId":"927","endLine":623,"endColumn":16},{"ruleId":"949","severity":1,"message":"958","line":717,"column":9,"nodeType":"926","messageId":"951","endLine":717,"endColumn":17},{"ruleId":"949","severity":1,"message":"959","line":736,"column":9,"nodeType":"926","messageId":"951","endLine":736,"endColumn":21},{"ruleId":"924","severity":1,"message":"960","line":861,"column":26,"nodeType":"926","messageId":"927","endLine":861,"endColumn":39},{"ruleId":"961","severity":1,"message":"962","line":1036,"column":25,"nodeType":"963","messageId":"964","endLine":1036,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":1055,"column":13,"nodeType":"963","messageId":"964","endLine":1055,"endColumn":15},{"ruleId":"961","severity":1,"message":"965","line":1086,"column":28,"nodeType":"963","messageId":"964","endLine":1086,"endColumn":30},{"ruleId":"966","severity":1,"message":"967","line":1097,"column":27,"nodeType":"968","messageId":"969","endLine":1102,"endColumn":12},{"ruleId":"949","severity":1,"message":"970","line":1114,"column":13,"nodeType":"926","messageId":"951","endLine":1114,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1145,"column":58,"nodeType":"963","messageId":"964","endLine":1145,"endColumn":60},{"ruleId":"961","severity":1,"message":"962","line":1145,"column":68,"nodeType":"963","messageId":"964","endLine":1145,"endColumn":70},{"ruleId":"961","severity":1,"message":"962","line":1208,"column":30,"nodeType":"963","messageId":"964","endLine":1208,"endColumn":32},{"ruleId":"961","severity":1,"message":"962","line":1218,"column":62,"nodeType":"963","messageId":"964","endLine":1218,"endColumn":64},{"ruleId":"961","severity":1,"message":"962","line":1218,"column":72,"nodeType":"963","messageId":"964","endLine":1218,"endColumn":74},{"ruleId":"961","severity":1,"message":"962","line":1290,"column":47,"nodeType":"963","messageId":"964","endLine":1290,"endColumn":49},{"ruleId":"961","severity":1,"message":"962","line":1307,"column":43,"nodeType":"963","messageId":"964","endLine":1307,"endColumn":45},{"ruleId":"949","severity":1,"message":"971","line":1445,"column":13,"nodeType":"926","messageId":"951","endLine":1445,"endColumn":16},{"ruleId":"961","severity":1,"message":"962","line":1450,"column":40,"nodeType":"963","messageId":"964","endLine":1450,"endColumn":42},{"ruleId":"949","severity":1,"message":"972","line":1451,"column":15,"nodeType":"926","messageId":"951","endLine":1451,"endColumn":16},{"ruleId":"949","severity":1,"message":"971","line":1456,"column":19,"nodeType":"926","messageId":"951","endLine":1456,"endColumn":22},{"ruleId":"949","severity":1,"message":"950","line":1485,"column":16,"nodeType":"926","messageId":"951","endLine":1485,"endColumn":17},{"ruleId":"924","severity":1,"message":"973","line":1499,"column":19,"nodeType":"926","messageId":"927","endLine":1499,"endColumn":26},{"ruleId":"924","severity":1,"message":"974","line":1499,"column":36,"nodeType":"926","messageId":"927","endLine":1499,"endColumn":43},{"ruleId":"924","severity":1,"message":"975","line":1499,"column":45,"nodeType":"926","messageId":"927","endLine":1499,"endColumn":54},{"ruleId":"924","severity":1,"message":"976","line":1499,"column":56,"nodeType":"926","messageId":"927","endLine":1499,"endColumn":65},{"ruleId":"961","severity":1,"message":"965","line":1616,"column":11,"nodeType":"963","messageId":"964","endLine":1616,"endColumn":13},{"ruleId":"961","severity":1,"message":"965","line":1685,"column":11,"nodeType":"963","messageId":"964","endLine":1685,"endColumn":13},{"ruleId":"924","severity":1,"message":"977","line":1742,"column":8,"nodeType":"926","messageId":"927","endLine":1742,"endColumn":14},{"ruleId":"924","severity":1,"message":"978","line":1747,"column":10,"nodeType":"926","messageId":"927","endLine":1747,"endColumn":14},{"ruleId":"961","severity":1,"message":"962","line":1794,"column":17,"nodeType":"963","messageId":"964","endLine":1794,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":1795,"column":19,"nodeType":"963","messageId":"964","endLine":1795,"endColumn":21},{"ruleId":"961","severity":1,"message":"962","line":1795,"column":37,"nodeType":"963","messageId":"964","endLine":1795,"endColumn":39},{"ruleId":"961","severity":1,"message":"962","line":1801,"column":89,"nodeType":"963","messageId":"964","endLine":1801,"endColumn":91},{"ruleId":"961","severity":1,"message":"962","line":1805,"column":20,"nodeType":"963","messageId":"964","endLine":1805,"endColumn":22},{"ruleId":"979","severity":1,"message":"980","line":1807,"column":56,"nodeType":"963","messageId":"981","endLine":1807,"endColumn":57},{"ruleId":"982","severity":1,"message":"983","line":1825,"column":19,"nodeType":"984","messageId":"985","endLine":1825,"endColumn":21},{"ruleId":"982","severity":1,"message":"986","line":1825,"column":26,"nodeType":"984","messageId":"985","endLine":1825,"endColumn":28},{"ruleId":"982","severity":1,"message":"983","line":1825,"column":26,"nodeType":"984","messageId":"985","endLine":1825,"endColumn":28},{"ruleId":"982","severity":1,"message":"986","line":1825,"column":34,"nodeType":"984","messageId":"985","endLine":1825,"endColumn":36},{"ruleId":"961","severity":1,"message":"962","line":1826,"column":34,"nodeType":"963","messageId":"964","endLine":1826,"endColumn":36},{"ruleId":"961","severity":1,"message":"962","line":1826,"column":59,"nodeType":"963","messageId":"964","endLine":1826,"endColumn":61},{"ruleId":"961","severity":1,"message":"962","line":1895,"column":18,"nodeType":"963","messageId":"964","endLine":1895,"endColumn":20},{"ruleId":"961","severity":1,"message":"962","line":1896,"column":25,"nodeType":"963","messageId":"964","endLine":1896,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":1896,"column":50,"nodeType":"963","messageId":"964","endLine":1896,"endColumn":52},{"ruleId":"961","severity":1,"message":"962","line":1906,"column":15,"nodeType":"963","messageId":"964","endLine":1906,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1912,"column":19,"nodeType":"963","messageId":"964","endLine":1912,"endColumn":21},{"ruleId":"949","severity":1,"message":"987","line":1913,"column":20,"nodeType":"926","messageId":"951","endLine":1913,"endColumn":22},{"ruleId":"979","severity":1,"message":"980","line":1914,"column":54,"nodeType":"963","messageId":"981","endLine":1914,"endColumn":55},{"ruleId":"961","severity":1,"message":"962","line":1933,"column":28,"nodeType":"963","messageId":"964","endLine":1933,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":1936,"column":57,"nodeType":"963","messageId":"964","endLine":1936,"endColumn":59},{"ruleId":"961","severity":1,"message":"962","line":1936,"column":78,"nodeType":"963","messageId":"964","endLine":1936,"endColumn":80},{"ruleId":"961","severity":1,"message":"962","line":1937,"column":36,"nodeType":"963","messageId":"964","endLine":1937,"endColumn":38},{"ruleId":"961","severity":1,"message":"962","line":1937,"column":62,"nodeType":"963","messageId":"964","endLine":1937,"endColumn":64},{"ruleId":"961","severity":1,"message":"962","line":1949,"column":41,"nodeType":"963","messageId":"964","endLine":1949,"endColumn":43},{"ruleId":"961","severity":1,"message":"962","line":1949,"column":67,"nodeType":"963","messageId":"964","endLine":1949,"endColumn":69},{"ruleId":"961","severity":1,"message":"962","line":1953,"column":30,"nodeType":"963","messageId":"964","endLine":1953,"endColumn":32},{"ruleId":"949","severity":1,"message":"950","line":1963,"column":14,"nodeType":"926","messageId":"951","endLine":1963,"endColumn":15},{"ruleId":"949","severity":1,"message":"988","line":1964,"column":16,"nodeType":"926","messageId":"951","endLine":1964,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1966,"column":34,"nodeType":"963","messageId":"964","endLine":1966,"endColumn":36},{"ruleId":"961","severity":1,"message":"962","line":1966,"column":60,"nodeType":"963","messageId":"964","endLine":1966,"endColumn":62},{"ruleId":"949","severity":1,"message":"989","line":1979,"column":24,"nodeType":"926","messageId":"951","endLine":1979,"endColumn":25},{"ruleId":"961","severity":1,"message":"962","line":1980,"column":39,"nodeType":"963","messageId":"964","endLine":1980,"endColumn":41},{"ruleId":"961","severity":1,"message":"962","line":1980,"column":65,"nodeType":"963","messageId":"964","endLine":1980,"endColumn":67},{"ruleId":"961","severity":1,"message":"962","line":1984,"column":28,"nodeType":"963","messageId":"964","endLine":1984,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":1994,"column":16,"nodeType":"963","messageId":"964","endLine":1994,"endColumn":18},{"ruleId":"924","severity":1,"message":"960","line":2006,"column":13,"nodeType":"926","messageId":"927","endLine":2006,"endColumn":26},{"ruleId":"924","severity":1,"message":"990","line":2006,"column":28,"nodeType":"926","messageId":"927","endLine":2006,"endColumn":44},{"ruleId":"961","severity":1,"message":"962","line":2070,"column":25,"nodeType":"963","messageId":"964","endLine":2070,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":2080,"column":24,"nodeType":"963","messageId":"964","endLine":2080,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":2081,"column":24,"nodeType":"963","messageId":"964","endLine":2081,"endColumn":26},{"ruleId":"949","severity":1,"message":"958","line":2082,"column":9,"nodeType":"926","messageId":"951","endLine":2082,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":2091,"column":13,"nodeType":"963","messageId":"964","endLine":2091,"endColumn":15},{"ruleId":"961","severity":1,"message":"962","line":2130,"column":58,"nodeType":"963","messageId":"964","endLine":2130,"endColumn":60},{"ruleId":"961","severity":1,"message":"962","line":2130,"column":68,"nodeType":"963","messageId":"964","endLine":2130,"endColumn":70},{"ruleId":"924","severity":1,"message":"991","line":2151,"column":9,"nodeType":"926","messageId":"927","endLine":2151,"endColumn":17},{"ruleId":"924","severity":1,"message":"992","line":2265,"column":9,"nodeType":"926","messageId":"927","endLine":2265,"endColumn":17},{"ruleId":"924","severity":1,"message":"993","line":2266,"column":9,"nodeType":"926","messageId":"927","endLine":2266,"endColumn":17},{"ruleId":"924","severity":1,"message":"994","line":2271,"column":9,"nodeType":"926","messageId":"927","endLine":2271,"endColumn":17},{"ruleId":"924","severity":1,"message":"995","line":2282,"column":15,"nodeType":"926","messageId":"927","endLine":2282,"endColumn":26},{"ruleId":"924","severity":1,"message":"996","line":2298,"column":15,"nodeType":"926","messageId":"927","endLine":2298,"endColumn":21},{"ruleId":"924","severity":1,"message":"997","line":2301,"column":15,"nodeType":"926","messageId":"927","endLine":2301,"endColumn":21},{"ruleId":"979","severity":1,"message":"980","line":2305,"column":66,"nodeType":"963","messageId":"981","endLine":2305,"endColumn":67},{"ruleId":"979","severity":1,"message":"980","line":2306,"column":66,"nodeType":"963","messageId":"981","endLine":2306,"endColumn":67},{"ruleId":"949","severity":1,"message":"998","line":2345,"column":17,"nodeType":"926","messageId":"951","endLine":2345,"endColumn":21},{"ruleId":"961","severity":1,"message":"962","line":2402,"column":21,"nodeType":"963","messageId":"964","endLine":2402,"endColumn":23},{"ruleId":"924","severity":1,"message":"999","line":2409,"column":15,"nodeType":"926","messageId":"927","endLine":2409,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":2416,"column":24,"nodeType":"963","messageId":"964","endLine":2416,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":2419,"column":29,"nodeType":"963","messageId":"964","endLine":2419,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":2420,"column":19,"nodeType":"963","messageId":"964","endLine":2420,"endColumn":21},{"ruleId":"961","severity":1,"message":"962","line":2425,"column":34,"nodeType":"963","messageId":"964","endLine":2425,"endColumn":36},{"ruleId":"961","severity":1,"message":"962","line":2428,"column":71,"nodeType":"963","messageId":"964","endLine":2428,"endColumn":73},{"ruleId":"961","severity":1,"message":"962","line":2436,"column":31,"nodeType":"963","messageId":"964","endLine":2436,"endColumn":33},{"ruleId":"961","severity":1,"message":"962","line":2436,"column":123,"nodeType":"963","messageId":"964","endLine":2436,"endColumn":125},{"ruleId":"961","severity":1,"message":"962","line":2449,"column":32,"nodeType":"963","messageId":"964","endLine":2449,"endColumn":34},{"ruleId":"961","severity":1,"message":"962","line":2453,"column":29,"nodeType":"963","messageId":"964","endLine":2453,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":2464,"column":31,"nodeType":"963","messageId":"964","endLine":2464,"endColumn":33},{"ruleId":"949","severity":1,"message":"1000","line":2470,"column":21,"nodeType":"926","messageId":"951","endLine":2470,"endColumn":24},{"ruleId":"949","severity":1,"message":"989","line":2476,"column":25,"nodeType":"926","messageId":"951","endLine":2476,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":2477,"column":32,"nodeType":"963","messageId":"964","endLine":2477,"endColumn":34},{"ruleId":"961","severity":1,"message":"962","line":2481,"column":29,"nodeType":"963","messageId":"964","endLine":2481,"endColumn":31},{"ruleId":"949","severity":1,"message":"1001","line":2518,"column":16,"nodeType":"926","messageId":"951","endLine":2518,"endColumn":17},{"ruleId":"924","severity":1,"message":"1002","line":2519,"column":13,"nodeType":"926","messageId":"927","endLine":2519,"endColumn":17},{"ruleId":"949","severity":1,"message":"950","line":2556,"column":24,"nodeType":"926","messageId":"951","endLine":2556,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1004","line":2950,"column":67,"nodeType":"968","messageId":"1005","endLine":2950,"endColumn":69},{"ruleId":"924","severity":1,"message":"1006","line":1,"column":17,"nodeType":"926","messageId":"927","endLine":1,"endColumn":26},{"ruleId":"924","severity":1,"message":"1007","line":2,"column":10,"nodeType":"926","messageId":"927","endLine":2,"endColumn":16},{"ruleId":"924","severity":1,"message":"1008","line":24,"column":12,"nodeType":"926","messageId":"927","endLine":24,"endColumn":21},{"ruleId":"924","severity":1,"message":"1009","line":28,"column":10,"nodeType":"926","messageId":"927","endLine":28,"endColumn":22},{"ruleId":"924","severity":1,"message":"1010","line":29,"column":10,"nodeType":"926","messageId":"927","endLine":29,"endColumn":27},{"ruleId":"924","severity":1,"message":"1011","line":30,"column":10,"nodeType":"926","messageId":"927","endLine":30,"endColumn":23},{"ruleId":"924","severity":1,"message":"1012","line":31,"column":10,"nodeType":"926","messageId":"927","endLine":31,"endColumn":24},{"ruleId":"924","severity":1,"message":"1013","line":35,"column":29,"nodeType":"926","messageId":"927","endLine":35,"endColumn":33},{"ruleId":"924","severity":1,"message":"1014","line":35,"column":35,"nodeType":"926","messageId":"927","endLine":35,"endColumn":39},{"ruleId":"924","severity":1,"message":"1015","line":210,"column":21,"nodeType":"926","messageId":"927","endLine":210,"endColumn":27},{"ruleId":"924","severity":1,"message":"1016","line":231,"column":25,"nodeType":"926","messageId":"927","endLine":231,"endColumn":28},{"ruleId":"924","severity":1,"message":"1017","line":232,"column":25,"nodeType":"926","messageId":"927","endLine":232,"endColumn":28},{"ruleId":"1003","severity":1,"message":"1004","line":313,"column":33,"nodeType":"968","messageId":"1005","endLine":313,"endColumn":35},{"ruleId":"924","severity":1,"message":"1018","line":361,"column":23,"nodeType":"926","messageId":"927","endLine":361,"endColumn":25},{"ruleId":"924","severity":1,"message":"1019","line":405,"column":13,"nodeType":"926","messageId":"927","endLine":405,"endColumn":17},{"ruleId":"924","severity":1,"message":"1020","line":445,"column":13,"nodeType":"926","messageId":"927","endLine":445,"endColumn":20},{"ruleId":"1003","severity":1,"message":"1021","line":445,"column":53,"nodeType":"968","messageId":"1022","endLine":445,"endColumn":55},{"ruleId":"924","severity":1,"message":"1023","line":446,"column":15,"nodeType":"926","messageId":"927","endLine":446,"endColumn":16},{"ruleId":"1003","severity":1,"message":"1004","line":446,"column":34,"nodeType":"968","messageId":"1005","endLine":446,"endColumn":36},{"ruleId":"924","severity":1,"message":"1024","line":452,"column":13,"nodeType":"926","messageId":"927","endLine":452,"endColumn":22},{"ruleId":"949","severity":1,"message":"971","line":609,"column":19,"nodeType":"926","messageId":"951","endLine":609,"endColumn":22},{"ruleId":"961","severity":1,"message":"962","line":614,"column":46,"nodeType":"963","messageId":"964","endLine":614,"endColumn":48},{"ruleId":"949","severity":1,"message":"972","line":615,"column":21,"nodeType":"926","messageId":"951","endLine":615,"endColumn":22},{"ruleId":"949","severity":1,"message":"971","line":620,"column":25,"nodeType":"926","messageId":"951","endLine":620,"endColumn":28},{"ruleId":"949","severity":1,"message":"950","line":650,"column":22,"nodeType":"926","messageId":"951","endLine":650,"endColumn":23},{"ruleId":"949","severity":1,"message":"1025","line":734,"column":15,"nodeType":"926","messageId":"951","endLine":734,"endColumn":18},{"ruleId":"949","severity":1,"message":"1026","line":735,"column":15,"nodeType":"926","messageId":"951","endLine":735,"endColumn":23},{"ruleId":"949","severity":1,"message":"1027","line":736,"column":15,"nodeType":"926","messageId":"951","endLine":736,"endColumn":24},{"ruleId":"924","severity":1,"message":"1028","line":755,"column":15,"nodeType":"926","messageId":"927","endLine":755,"endColumn":18},{"ruleId":"924","severity":1,"message":"1029","line":756,"column":15,"nodeType":"926","messageId":"927","endLine":756,"endColumn":16},{"ruleId":"924","severity":1,"message":"1030","line":757,"column":15,"nodeType":"926","messageId":"927","endLine":757,"endColumn":16},{"ruleId":"924","severity":1,"message":"1031","line":758,"column":15,"nodeType":"926","messageId":"927","endLine":758,"endColumn":19},{"ruleId":"949","severity":1,"message":"1032","line":774,"column":17,"nodeType":"926","messageId":"951","endLine":774,"endColumn":27},{"ruleId":"924","severity":1,"message":"1033","line":782,"column":17,"nodeType":"926","messageId":"927","endLine":782,"endColumn":22},{"ruleId":"949","severity":1,"message":"1025","line":786,"column":15,"nodeType":"926","messageId":"951","endLine":786,"endColumn":18},{"ruleId":"949","severity":1,"message":"1026","line":787,"column":15,"nodeType":"926","messageId":"951","endLine":787,"endColumn":23},{"ruleId":"949","severity":1,"message":"1027","line":788,"column":15,"nodeType":"926","messageId":"951","endLine":788,"endColumn":24},{"ruleId":"924","severity":1,"message":"975","line":845,"column":19,"nodeType":"926","messageId":"927","endLine":845,"endColumn":28},{"ruleId":"949","severity":1,"message":"1032","line":846,"column":17,"nodeType":"926","messageId":"951","endLine":846,"endColumn":27},{"ruleId":"949","severity":1,"message":"1032","line":853,"column":17,"nodeType":"926","messageId":"951","endLine":853,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":886,"column":30,"nodeType":"963","messageId":"964","endLine":886,"endColumn":32},{"ruleId":"949","severity":1,"message":"1001","line":906,"column":20,"nodeType":"926","messageId":"951","endLine":906,"endColumn":21},{"ruleId":"949","severity":1,"message":"1034","line":907,"column":17,"nodeType":"926","messageId":"951","endLine":907,"endColumn":21},{"ruleId":"924","severity":1,"message":"1035","line":907,"column":17,"nodeType":"926","messageId":"927","endLine":907,"endColumn":21},{"ruleId":"924","severity":1,"message":"1036","line":913,"column":17,"nodeType":"926","messageId":"927","endLine":913,"endColumn":33},{"ruleId":"924","severity":1,"message":"1037","line":934,"column":11,"nodeType":"926","messageId":"927","endLine":934,"endColumn":23},{"ruleId":"924","severity":1,"message":"1038","line":1016,"column":22,"nodeType":"926","messageId":"927","endLine":1016,"endColumn":27},{"ruleId":"924","severity":1,"message":"1033","line":1032,"column":19,"nodeType":"926","messageId":"927","endLine":1032,"endColumn":24},{"ruleId":"924","severity":1,"message":"997","line":1062,"column":15,"nodeType":"926","messageId":"927","endLine":1062,"endColumn":21},{"ruleId":"924","severity":1,"message":"993","line":1062,"column":33,"nodeType":"926","messageId":"927","endLine":1062,"endColumn":41},{"ruleId":"924","severity":1,"message":"996","line":1062,"column":43,"nodeType":"926","messageId":"927","endLine":1062,"endColumn":49},{"ruleId":"924","severity":1,"message":"997","line":1081,"column":15,"nodeType":"926","messageId":"927","endLine":1081,"endColumn":21},{"ruleId":"924","severity":1,"message":"996","line":1081,"column":43,"nodeType":"926","messageId":"927","endLine":1081,"endColumn":49},{"ruleId":"979","severity":1,"message":"980","line":1201,"column":63,"nodeType":"963","messageId":"981","endLine":1201,"endColumn":64},{"ruleId":"979","severity":1,"message":"980","line":1203,"column":63,"nodeType":"963","messageId":"981","endLine":1203,"endColumn":64},{"ruleId":"961","severity":1,"message":"962","line":1211,"column":41,"nodeType":"963","messageId":"964","endLine":1211,"endColumn":43},{"ruleId":"949","severity":1,"message":"1001","line":1236,"column":20,"nodeType":"926","messageId":"951","endLine":1236,"endColumn":21},{"ruleId":"961","severity":1,"message":"962","line":1239,"column":48,"nodeType":"963","messageId":"964","endLine":1239,"endColumn":50},{"ruleId":"949","severity":1,"message":"1039","line":1241,"column":19,"nodeType":"926","messageId":"951","endLine":1241,"endColumn":24},{"ruleId":"949","severity":1,"message":"998","line":1242,"column":19,"nodeType":"926","messageId":"951","endLine":1242,"endColumn":23},{"ruleId":"961","severity":1,"message":"962","line":1307,"column":26,"nodeType":"963","messageId":"964","endLine":1307,"endColumn":28},{"ruleId":"961","severity":1,"message":"962","line":1309,"column":33,"nodeType":"963","messageId":"964","endLine":1309,"endColumn":35},{"ruleId":"961","severity":1,"message":"962","line":1310,"column":21,"nodeType":"963","messageId":"964","endLine":1310,"endColumn":23},{"ruleId":"961","severity":1,"message":"962","line":1314,"column":32,"nodeType":"963","messageId":"964","endLine":1314,"endColumn":34},{"ruleId":"961","severity":1,"message":"962","line":1323,"column":33,"nodeType":"963","messageId":"964","endLine":1323,"endColumn":35},{"ruleId":"961","severity":1,"message":"962","line":1327,"column":30,"nodeType":"963","messageId":"964","endLine":1327,"endColumn":32},{"ruleId":"949","severity":1,"message":"1001","line":1352,"column":20,"nodeType":"926","messageId":"951","endLine":1352,"endColumn":21},{"ruleId":"924","severity":1,"message":"1002","line":1353,"column":17,"nodeType":"926","messageId":"927","endLine":1353,"endColumn":21},{"ruleId":"924","severity":1,"message":"1040","line":1392,"column":19,"nodeType":"926","messageId":"927","endLine":1392,"endColumn":22},{"ruleId":"924","severity":1,"message":"1036","line":1394,"column":19,"nodeType":"926","messageId":"927","endLine":1394,"endColumn":35},{"ruleId":"924","severity":1,"message":"1041","line":1417,"column":19,"nodeType":"926","messageId":"927","endLine":1417,"endColumn":25},{"ruleId":"924","severity":1,"message":"1042","line":1419,"column":19,"nodeType":"926","messageId":"927","endLine":1419,"endColumn":35},{"ruleId":"949","severity":1,"message":"950","line":1489,"column":28,"nodeType":"926","messageId":"951","endLine":1489,"endColumn":29},{"ruleId":"924","severity":1,"message":"1033","line":1521,"column":21,"nodeType":"926","messageId":"927","endLine":1521,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":1590,"column":22,"nodeType":"963","messageId":"964","endLine":1590,"endColumn":24},{"ruleId":"961","severity":1,"message":"962","line":1591,"column":29,"nodeType":"963","messageId":"964","endLine":1591,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":1591,"column":54,"nodeType":"963","messageId":"964","endLine":1591,"endColumn":56},{"ruleId":"961","severity":1,"message":"962","line":1600,"column":19,"nodeType":"963","messageId":"964","endLine":1600,"endColumn":21},{"ruleId":"961","severity":1,"message":"962","line":1606,"column":23,"nodeType":"963","messageId":"964","endLine":1606,"endColumn":25},{"ruleId":"949","severity":1,"message":"987","line":1607,"column":24,"nodeType":"926","messageId":"951","endLine":1607,"endColumn":26},{"ruleId":"979","severity":1,"message":"980","line":1608,"column":58,"nodeType":"963","messageId":"981","endLine":1608,"endColumn":59},{"ruleId":"961","severity":1,"message":"962","line":1626,"column":40,"nodeType":"963","messageId":"964","endLine":1626,"endColumn":42},{"ruleId":"961","severity":1,"message":"962","line":1626,"column":66,"nodeType":"963","messageId":"964","endLine":1626,"endColumn":68},{"ruleId":"961","severity":1,"message":"962","line":1646,"column":45,"nodeType":"963","messageId":"964","endLine":1646,"endColumn":47},{"ruleId":"961","severity":1,"message":"962","line":1646,"column":71,"nodeType":"963","messageId":"964","endLine":1646,"endColumn":73},{"ruleId":"961","severity":1,"message":"962","line":1650,"column":34,"nodeType":"963","messageId":"964","endLine":1650,"endColumn":36},{"ruleId":"961","severity":1,"message":"962","line":1659,"column":20,"nodeType":"963","messageId":"964","endLine":1659,"endColumn":22},{"ruleId":"949","severity":1,"message":"1043","line":1682,"column":17,"nodeType":"926","messageId":"951","endLine":1682,"endColumn":24},{"ruleId":"924","severity":1,"message":"1044","line":1800,"column":13,"nodeType":"926","messageId":"927","endLine":1800,"endColumn":19},{"ruleId":"1003","severity":1,"message":"1021","line":1955,"column":41,"nodeType":"968","messageId":"1022","endLine":1955,"endColumn":43},{"ruleId":"924","severity":1,"message":"1045","line":2025,"column":15,"nodeType":"926","messageId":"927","endLine":2025,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":2059,"column":29,"nodeType":"963","messageId":"964","endLine":2059,"endColumn":31},{"ruleId":"924","severity":1,"message":"1031","line":2189,"column":13,"nodeType":"926","messageId":"927","endLine":2189,"endColumn":17},{"ruleId":"924","severity":1,"message":"1046","line":2336,"column":15,"nodeType":"926","messageId":"927","endLine":2336,"endColumn":19},{"ruleId":"924","severity":1,"message":"1046","line":2396,"column":13,"nodeType":"926","messageId":"927","endLine":2396,"endColumn":17},{"ruleId":"924","severity":1,"message":"1046","line":2452,"column":13,"nodeType":"926","messageId":"927","endLine":2452,"endColumn":17},{"ruleId":"924","severity":1,"message":"1046","line":2521,"column":13,"nodeType":"926","messageId":"927","endLine":2521,"endColumn":17},{"ruleId":"924","severity":1,"message":"1047","line":2755,"column":15,"nodeType":"926","messageId":"927","endLine":2755,"endColumn":34},{"ruleId":"924","severity":1,"message":"1046","line":2759,"column":13,"nodeType":"926","messageId":"927","endLine":2759,"endColumn":17},{"ruleId":"924","severity":1,"message":"1048","line":3001,"column":11,"nodeType":"926","messageId":"927","endLine":3001,"endColumn":19},{"ruleId":"924","severity":1,"message":"1049","line":3029,"column":9,"nodeType":"926","messageId":"927","endLine":3029,"endColumn":28},{"ruleId":"924","severity":1,"message":"1050","line":3034,"column":19,"nodeType":"926","messageId":"927","endLine":3034,"endColumn":29},{"ruleId":"1051","severity":1,"message":"1052","line":3069,"column":25,"nodeType":"1053","endLine":3069,"endColumn":47},{"ruleId":"1003","severity":1,"message":"1004","line":3319,"column":54,"nodeType":"968","messageId":"1005","endLine":3319,"endColumn":56},{"ruleId":"1003","severity":1,"message":"1004","line":3330,"column":50,"nodeType":"968","messageId":"1005","endLine":3330,"endColumn":52},{"ruleId":"1054","severity":1,"message":"1055","line":12,"column":22,"nodeType":"1056","endLine":15,"endColumn":24},{"ruleId":"1054","severity":1,"message":"1055","line":24,"column":22,"nodeType":"1056","endLine":27,"endColumn":24},{"ruleId":"924","severity":1,"message":"1057","line":3,"column":8,"nodeType":"926","messageId":"927","endLine":3,"endColumn":14},{"ruleId":"924","severity":1,"message":"1008","line":4,"column":10,"nodeType":"926","messageId":"927","endLine":4,"endColumn":19},{"ruleId":"924","severity":1,"message":"946","line":17,"column":10,"nodeType":"926","messageId":"927","endLine":17,"endColumn":14},{"ruleId":"924","severity":1,"message":"1058","line":18,"column":10,"nodeType":"926","messageId":"927","endLine":18,"endColumn":13},{"ruleId":"924","severity":1,"message":"1059","line":18,"column":15,"nodeType":"926","messageId":"927","endLine":18,"endColumn":24},{"ruleId":"924","severity":1,"message":"1060","line":28,"column":7,"nodeType":"926","messageId":"927","endLine":28,"endColumn":13},{"ruleId":"924","severity":1,"message":"1061","line":30,"column":7,"nodeType":"926","messageId":"927","endLine":30,"endColumn":11},{"ruleId":"924","severity":1,"message":"1062","line":45,"column":7,"nodeType":"926","messageId":"927","endLine":45,"endColumn":13},{"ruleId":"924","severity":1,"message":"1063","line":73,"column":7,"nodeType":"926","messageId":"927","endLine":73,"endColumn":14},{"ruleId":"924","severity":1,"message":"1064","line":113,"column":15,"nodeType":"926","messageId":"927","endLine":113,"endColumn":23},{"ruleId":"924","severity":1,"message":"1065","line":243,"column":13,"nodeType":"926","messageId":"927","endLine":243,"endColumn":24},{"ruleId":"924","severity":1,"message":"1066","line":245,"column":11,"nodeType":"926","messageId":"927","endLine":245,"endColumn":26},{"ruleId":"1054","severity":1,"message":"1055","line":267,"column":17,"nodeType":"1056","endLine":270,"endColumn":19},{"ruleId":"924","severity":1,"message":"1067","line":246,"column":9,"nodeType":"926","messageId":"927","endLine":246,"endColumn":15},{"ruleId":"924","severity":1,"message":"1068","line":247,"column":9,"nodeType":"926","messageId":"927","endLine":247,"endColumn":15},{"ruleId":"924","severity":1,"message":"1069","line":248,"column":9,"nodeType":"926","messageId":"927","endLine":248,"endColumn":15},{"ruleId":"924","severity":1,"message":"1070","line":249,"column":9,"nodeType":"926","messageId":"927","endLine":249,"endColumn":15},{"ruleId":"924","severity":1,"message":"1071","line":4,"column":8,"nodeType":"926","messageId":"927","endLine":4,"endColumn":23},{"ruleId":"924","severity":1,"message":"943","line":305,"column":9,"nodeType":"926","messageId":"927","endLine":305,"endColumn":18},{"ruleId":"924","severity":1,"message":"1072","line":306,"column":9,"nodeType":"926","messageId":"927","endLine":306,"endColumn":13},{"ruleId":"924","severity":1,"message":"1073","line":307,"column":9,"nodeType":"926","messageId":"927","endLine":307,"endColumn":14},{"ruleId":"924","severity":1,"message":"1074","line":308,"column":9,"nodeType":"926","messageId":"927","endLine":308,"endColumn":21},{"ruleId":"924","severity":1,"message":"1075","line":310,"column":9,"nodeType":"926","messageId":"927","endLine":310,"endColumn":17},{"ruleId":"924","severity":1,"message":"944","line":311,"column":9,"nodeType":"926","messageId":"927","endLine":311,"endColumn":17},{"ruleId":"924","severity":1,"message":"945","line":315,"column":9,"nodeType":"926","messageId":"927","endLine":315,"endColumn":21},{"ruleId":"924","severity":1,"message":"943","line":538,"column":9,"nodeType":"926","messageId":"927","endLine":538,"endColumn":18},{"ruleId":"924","severity":1,"message":"1072","line":539,"column":9,"nodeType":"926","messageId":"927","endLine":539,"endColumn":13},{"ruleId":"924","severity":1,"message":"1073","line":540,"column":9,"nodeType":"926","messageId":"927","endLine":540,"endColumn":14},{"ruleId":"924","severity":1,"message":"1074","line":541,"column":9,"nodeType":"926","messageId":"927","endLine":541,"endColumn":21},{"ruleId":"924","severity":1,"message":"1075","line":543,"column":9,"nodeType":"926","messageId":"927","endLine":543,"endColumn":17},{"ruleId":"924","severity":1,"message":"944","line":544,"column":9,"nodeType":"926","messageId":"927","endLine":544,"endColumn":17},{"ruleId":"924","severity":1,"message":"1076","line":545,"column":9,"nodeType":"926","messageId":"927","endLine":545,"endColumn":15},{"ruleId":"924","severity":1,"message":"1077","line":546,"column":9,"nodeType":"926","messageId":"927","endLine":546,"endColumn":16},{"ruleId":"924","severity":1,"message":"1078","line":547,"column":9,"nodeType":"926","messageId":"927","endLine":547,"endColumn":15},{"ruleId":"924","severity":1,"message":"945","line":548,"column":9,"nodeType":"926","messageId":"927","endLine":548,"endColumn":21},{"ruleId":"924","severity":1,"message":"943","line":821,"column":9,"nodeType":"926","messageId":"927","endLine":821,"endColumn":18},{"ruleId":"924","severity":1,"message":"1072","line":822,"column":9,"nodeType":"926","messageId":"927","endLine":822,"endColumn":13},{"ruleId":"924","severity":1,"message":"1073","line":823,"column":9,"nodeType":"926","messageId":"927","endLine":823,"endColumn":14},{"ruleId":"924","severity":1,"message":"1074","line":824,"column":9,"nodeType":"926","messageId":"927","endLine":824,"endColumn":21},{"ruleId":"924","severity":1,"message":"1079","line":825,"column":9,"nodeType":"926","messageId":"927","endLine":825,"endColumn":17},{"ruleId":"924","severity":1,"message":"1075","line":826,"column":9,"nodeType":"926","messageId":"927","endLine":826,"endColumn":17},{"ruleId":"924","severity":1,"message":"944","line":827,"column":9,"nodeType":"926","messageId":"927","endLine":827,"endColumn":17},{"ruleId":"924","severity":1,"message":"1076","line":828,"column":9,"nodeType":"926","messageId":"927","endLine":828,"endColumn":15},{"ruleId":"924","severity":1,"message":"1077","line":829,"column":9,"nodeType":"926","messageId":"927","endLine":829,"endColumn":16},{"ruleId":"924","severity":1,"message":"1078","line":830,"column":9,"nodeType":"926","messageId":"927","endLine":830,"endColumn":15},{"ruleId":"924","severity":1,"message":"945","line":831,"column":9,"nodeType":"926","messageId":"927","endLine":831,"endColumn":21},{"ruleId":"924","severity":1,"message":"1080","line":832,"column":9,"nodeType":"926","messageId":"927","endLine":832,"endColumn":22},{"ruleId":"924","severity":1,"message":"946","line":5,"column":10,"nodeType":"926","messageId":"927","endLine":5,"endColumn":14},{"ruleId":"924","severity":1,"message":"1072","line":162,"column":23,"nodeType":"926","messageId":"927","endLine":162,"endColumn":27},{"ruleId":"924","severity":1,"message":"1081","line":163,"column":23,"nodeType":"926","messageId":"927","endLine":163,"endColumn":28},{"ruleId":"924","severity":1,"message":"1082","line":164,"column":23,"nodeType":"926","messageId":"927","endLine":164,"endColumn":35},{"ruleId":"924","severity":1,"message":"1083","line":165,"column":23,"nodeType":"926","messageId":"927","endLine":165,"endColumn":32},{"ruleId":"924","severity":1,"message":"1048","line":120,"column":5,"nodeType":"926","messageId":"927","endLine":120,"endColumn":13},{"ruleId":"924","severity":1,"message":"1008","line":22,"column":10,"nodeType":"926","messageId":"927","endLine":22,"endColumn":19},{"ruleId":"924","severity":1,"message":"1084","line":32,"column":8,"nodeType":"926","messageId":"927","endLine":32,"endColumn":12},{"ruleId":"924","severity":1,"message":"1060","line":34,"column":7,"nodeType":"926","messageId":"927","endLine":34,"endColumn":13},{"ruleId":"1003","severity":1,"message":"1004","line":335,"column":21,"nodeType":"968","messageId":"1005","endLine":335,"endColumn":23},{"ruleId":"924","severity":1,"message":"1019","line":409,"column":9,"nodeType":"926","messageId":"927","endLine":409,"endColumn":13},{"ruleId":"924","severity":1,"message":"1020","line":449,"column":9,"nodeType":"926","messageId":"927","endLine":449,"endColumn":16},{"ruleId":"1003","severity":1,"message":"1021","line":449,"column":49,"nodeType":"968","messageId":"1022","endLine":449,"endColumn":51},{"ruleId":"924","severity":1,"message":"1023","line":450,"column":11,"nodeType":"926","messageId":"927","endLine":450,"endColumn":12},{"ruleId":"1003","severity":1,"message":"1004","line":450,"column":30,"nodeType":"968","messageId":"1005","endLine":450,"endColumn":32},{"ruleId":"924","severity":1,"message":"1024","line":456,"column":9,"nodeType":"926","messageId":"927","endLine":456,"endColumn":18},{"ruleId":"949","severity":1,"message":"971","line":613,"column":15,"nodeType":"926","messageId":"951","endLine":613,"endColumn":18},{"ruleId":"961","severity":1,"message":"962","line":618,"column":42,"nodeType":"963","messageId":"964","endLine":618,"endColumn":44},{"ruleId":"949","severity":1,"message":"972","line":619,"column":17,"nodeType":"926","messageId":"951","endLine":619,"endColumn":18},{"ruleId":"949","severity":1,"message":"971","line":624,"column":21,"nodeType":"926","messageId":"951","endLine":624,"endColumn":24},{"ruleId":"949","severity":1,"message":"950","line":654,"column":18,"nodeType":"926","messageId":"951","endLine":654,"endColumn":19},{"ruleId":"949","severity":1,"message":"1025","line":734,"column":11,"nodeType":"926","messageId":"951","endLine":734,"endColumn":14},{"ruleId":"949","severity":1,"message":"1026","line":735,"column":11,"nodeType":"926","messageId":"951","endLine":735,"endColumn":19},{"ruleId":"949","severity":1,"message":"1027","line":736,"column":11,"nodeType":"926","messageId":"951","endLine":736,"endColumn":20},{"ruleId":"924","severity":1,"message":"1028","line":755,"column":11,"nodeType":"926","messageId":"927","endLine":755,"endColumn":14},{"ruleId":"924","severity":1,"message":"1029","line":756,"column":11,"nodeType":"926","messageId":"927","endLine":756,"endColumn":12},{"ruleId":"924","severity":1,"message":"1030","line":757,"column":11,"nodeType":"926","messageId":"927","endLine":757,"endColumn":12},{"ruleId":"924","severity":1,"message":"1031","line":758,"column":11,"nodeType":"926","messageId":"927","endLine":758,"endColumn":15},{"ruleId":"949","severity":1,"message":"1032","line":774,"column":13,"nodeType":"926","messageId":"951","endLine":774,"endColumn":23},{"ruleId":"924","severity":1,"message":"1033","line":782,"column":13,"nodeType":"926","messageId":"927","endLine":782,"endColumn":18},{"ruleId":"949","severity":1,"message":"1025","line":786,"column":11,"nodeType":"926","messageId":"951","endLine":786,"endColumn":14},{"ruleId":"949","severity":1,"message":"1026","line":787,"column":11,"nodeType":"926","messageId":"951","endLine":787,"endColumn":19},{"ruleId":"949","severity":1,"message":"1027","line":788,"column":11,"nodeType":"926","messageId":"951","endLine":788,"endColumn":20},{"ruleId":"924","severity":1,"message":"975","line":841,"column":15,"nodeType":"926","messageId":"927","endLine":841,"endColumn":24},{"ruleId":"949","severity":1,"message":"1032","line":842,"column":13,"nodeType":"926","messageId":"951","endLine":842,"endColumn":23},{"ruleId":"949","severity":1,"message":"1032","line":849,"column":13,"nodeType":"926","messageId":"951","endLine":849,"endColumn":23},{"ruleId":"961","severity":1,"message":"962","line":882,"column":26,"nodeType":"963","messageId":"964","endLine":882,"endColumn":28},{"ruleId":"949","severity":1,"message":"1001","line":901,"column":16,"nodeType":"926","messageId":"951","endLine":901,"endColumn":17},{"ruleId":"924","severity":1,"message":"1035","line":902,"column":13,"nodeType":"926","messageId":"927","endLine":902,"endColumn":17},{"ruleId":"949","severity":1,"message":"1034","line":902,"column":13,"nodeType":"926","messageId":"951","endLine":902,"endColumn":17},{"ruleId":"924","severity":1,"message":"1036","line":907,"column":13,"nodeType":"926","messageId":"927","endLine":907,"endColumn":29},{"ruleId":"924","severity":1,"message":"1037","line":925,"column":7,"nodeType":"926","messageId":"927","endLine":925,"endColumn":19},{"ruleId":"924","severity":1,"message":"1038","line":1006,"column":18,"nodeType":"926","messageId":"927","endLine":1006,"endColumn":23},{"ruleId":"924","severity":1,"message":"1033","line":1022,"column":15,"nodeType":"926","messageId":"927","endLine":1022,"endColumn":20},{"ruleId":"924","severity":1,"message":"997","line":1052,"column":11,"nodeType":"926","messageId":"927","endLine":1052,"endColumn":17},{"ruleId":"924","severity":1,"message":"993","line":1052,"column":29,"nodeType":"926","messageId":"927","endLine":1052,"endColumn":37},{"ruleId":"924","severity":1,"message":"996","line":1052,"column":39,"nodeType":"926","messageId":"927","endLine":1052,"endColumn":45},{"ruleId":"924","severity":1,"message":"997","line":1071,"column":11,"nodeType":"926","messageId":"927","endLine":1071,"endColumn":17},{"ruleId":"924","severity":1,"message":"996","line":1071,"column":39,"nodeType":"926","messageId":"927","endLine":1071,"endColumn":45},{"ruleId":"979","severity":1,"message":"980","line":1191,"column":59,"nodeType":"963","messageId":"981","endLine":1191,"endColumn":60},{"ruleId":"979","severity":1,"message":"980","line":1193,"column":59,"nodeType":"963","messageId":"981","endLine":1193,"endColumn":60},{"ruleId":"961","severity":1,"message":"962","line":1201,"column":37,"nodeType":"963","messageId":"964","endLine":1201,"endColumn":39},{"ruleId":"949","severity":1,"message":"1001","line":1226,"column":16,"nodeType":"926","messageId":"951","endLine":1226,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1229,"column":44,"nodeType":"963","messageId":"964","endLine":1229,"endColumn":46},{"ruleId":"949","severity":1,"message":"1039","line":1231,"column":15,"nodeType":"926","messageId":"951","endLine":1231,"endColumn":20},{"ruleId":"949","severity":1,"message":"998","line":1232,"column":15,"nodeType":"926","messageId":"951","endLine":1232,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":1296,"column":22,"nodeType":"963","messageId":"964","endLine":1296,"endColumn":24},{"ruleId":"961","severity":1,"message":"962","line":1298,"column":29,"nodeType":"963","messageId":"964","endLine":1298,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":1299,"column":17,"nodeType":"963","messageId":"964","endLine":1299,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":1303,"column":28,"nodeType":"963","messageId":"964","endLine":1303,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":1312,"column":29,"nodeType":"963","messageId":"964","endLine":1312,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":1316,"column":26,"nodeType":"963","messageId":"964","endLine":1316,"endColumn":28},{"ruleId":"949","severity":1,"message":"1001","line":1341,"column":16,"nodeType":"926","messageId":"951","endLine":1341,"endColumn":17},{"ruleId":"924","severity":1,"message":"1002","line":1342,"column":13,"nodeType":"926","messageId":"927","endLine":1342,"endColumn":17},{"ruleId":"924","severity":1,"message":"1040","line":1381,"column":15,"nodeType":"926","messageId":"927","endLine":1381,"endColumn":18},{"ruleId":"924","severity":1,"message":"1036","line":1383,"column":15,"nodeType":"926","messageId":"927","endLine":1383,"endColumn":31},{"ruleId":"924","severity":1,"message":"1041","line":1406,"column":15,"nodeType":"926","messageId":"927","endLine":1406,"endColumn":21},{"ruleId":"924","severity":1,"message":"1042","line":1408,"column":15,"nodeType":"926","messageId":"927","endLine":1408,"endColumn":31},{"ruleId":"949","severity":1,"message":"950","line":1478,"column":24,"nodeType":"926","messageId":"951","endLine":1478,"endColumn":25},{"ruleId":"924","severity":1,"message":"1033","line":1510,"column":17,"nodeType":"926","messageId":"927","endLine":1510,"endColumn":22},{"ruleId":"961","severity":1,"message":"962","line":1577,"column":18,"nodeType":"963","messageId":"964","endLine":1577,"endColumn":20},{"ruleId":"961","severity":1,"message":"962","line":1578,"column":25,"nodeType":"963","messageId":"964","endLine":1578,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":1578,"column":50,"nodeType":"963","messageId":"964","endLine":1578,"endColumn":52},{"ruleId":"961","severity":1,"message":"962","line":1587,"column":15,"nodeType":"963","messageId":"964","endLine":1587,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1593,"column":19,"nodeType":"963","messageId":"964","endLine":1593,"endColumn":21},{"ruleId":"949","severity":1,"message":"987","line":1594,"column":20,"nodeType":"926","messageId":"951","endLine":1594,"endColumn":22},{"ruleId":"979","severity":1,"message":"980","line":1595,"column":54,"nodeType":"963","messageId":"981","endLine":1595,"endColumn":55},{"ruleId":"961","severity":1,"message":"962","line":1613,"column":36,"nodeType":"963","messageId":"964","endLine":1613,"endColumn":38},{"ruleId":"961","severity":1,"message":"962","line":1613,"column":62,"nodeType":"963","messageId":"964","endLine":1613,"endColumn":64},{"ruleId":"961","severity":1,"message":"962","line":1633,"column":41,"nodeType":"963","messageId":"964","endLine":1633,"endColumn":43},{"ruleId":"961","severity":1,"message":"962","line":1633,"column":67,"nodeType":"963","messageId":"964","endLine":1633,"endColumn":69},{"ruleId":"961","severity":1,"message":"962","line":1637,"column":30,"nodeType":"963","messageId":"964","endLine":1637,"endColumn":32},{"ruleId":"961","severity":1,"message":"962","line":1646,"column":16,"nodeType":"963","messageId":"964","endLine":1646,"endColumn":18},{"ruleId":"924","severity":1,"message":"1033","line":1647,"column":13,"nodeType":"926","messageId":"927","endLine":1647,"endColumn":18},{"ruleId":"949","severity":1,"message":"1043","line":1666,"column":13,"nodeType":"926","messageId":"951","endLine":1666,"endColumn":20},{"ruleId":"961","severity":1,"message":"962","line":1715,"column":21,"nodeType":"963","messageId":"964","endLine":1715,"endColumn":23},{"ruleId":"924","severity":1,"message":"1044","line":1825,"column":9,"nodeType":"926","messageId":"927","endLine":1825,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1021","line":2022,"column":37,"nodeType":"968","messageId":"1022","endLine":2022,"endColumn":39},{"ruleId":"924","severity":1,"message":"1045","line":2090,"column":11,"nodeType":"926","messageId":"927","endLine":2090,"endColumn":22},{"ruleId":"924","severity":1,"message":"1031","line":2237,"column":9,"nodeType":"926","messageId":"927","endLine":2237,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":2384,"column":11,"nodeType":"926","messageId":"927","endLine":2384,"endColumn":15},{"ruleId":"924","severity":1,"message":"1046","line":2446,"column":9,"nodeType":"926","messageId":"927","endLine":2446,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":2502,"column":9,"nodeType":"926","messageId":"927","endLine":2502,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":2591,"column":9,"nodeType":"926","messageId":"927","endLine":2591,"endColumn":13},{"ruleId":"924","severity":1,"message":"1047","line":2825,"column":11,"nodeType":"926","messageId":"927","endLine":2825,"endColumn":30},{"ruleId":"924","severity":1,"message":"1046","line":2829,"column":9,"nodeType":"926","messageId":"927","endLine":2829,"endColumn":13},{"ruleId":"924","severity":1,"message":"1048","line":3077,"column":7,"nodeType":"926","messageId":"927","endLine":3077,"endColumn":15},{"ruleId":"924","severity":1,"message":"1050","line":3131,"column":19,"nodeType":"926","messageId":"927","endLine":3131,"endColumn":29},{"ruleId":"1003","severity":1,"message":"1004","line":3506,"column":54,"nodeType":"968","messageId":"1005","endLine":3506,"endColumn":56},{"ruleId":"1003","severity":1,"message":"1004","line":3517,"column":50,"nodeType":"968","messageId":"1005","endLine":3517,"endColumn":52},{"ruleId":"961","severity":1,"message":"962","line":109,"column":12,"nodeType":"963","messageId":"964","endLine":109,"endColumn":14},{"ruleId":"961","severity":1,"message":"962","line":116,"column":56,"nodeType":"963","messageId":"964","endLine":116,"endColumn":58},{"ruleId":"961","severity":1,"message":"962","line":116,"column":66,"nodeType":"963","messageId":"964","endLine":116,"endColumn":68},{"ruleId":"961","severity":1,"message":"962","line":122,"column":19,"nodeType":"963","messageId":"964","endLine":122,"endColumn":21},{"ruleId":"949","severity":1,"message":"1085","line":127,"column":9,"nodeType":"926","messageId":"951","endLine":127,"endColumn":14},{"ruleId":"961","severity":1,"message":"962","line":129,"column":56,"nodeType":"963","messageId":"964","endLine":129,"endColumn":58},{"ruleId":"961","severity":1,"message":"962","line":129,"column":66,"nodeType":"963","messageId":"964","endLine":129,"endColumn":68},{"ruleId":"961","severity":1,"message":"962","line":197,"column":14,"nodeType":"963","messageId":"964","endLine":197,"endColumn":16},{"ruleId":"949","severity":1,"message":"1086","line":200,"column":11,"nodeType":"926","messageId":"951","endLine":200,"endColumn":13},{"ruleId":"961","severity":1,"message":"962","line":204,"column":14,"nodeType":"963","messageId":"964","endLine":204,"endColumn":16},{"ruleId":"949","severity":1,"message":"1087","line":207,"column":11,"nodeType":"926","messageId":"951","endLine":207,"endColumn":13},{"ruleId":"961","severity":1,"message":"962","line":213,"column":49,"nodeType":"963","messageId":"964","endLine":213,"endColumn":51},{"ruleId":"949","severity":1,"message":"1088","line":216,"column":15,"nodeType":"926","messageId":"951","endLine":216,"endColumn":19},{"ruleId":"949","severity":1,"message":"1088","line":220,"column":15,"nodeType":"926","messageId":"951","endLine":220,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":224,"column":56,"nodeType":"963","messageId":"964","endLine":224,"endColumn":58},{"ruleId":"949","severity":1,"message":"1088","line":227,"column":15,"nodeType":"926","messageId":"951","endLine":227,"endColumn":19},{"ruleId":"949","severity":1,"message":"1088","line":231,"column":15,"nodeType":"926","messageId":"951","endLine":231,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":239,"column":49,"nodeType":"963","messageId":"964","endLine":239,"endColumn":51},{"ruleId":"949","severity":1,"message":"1088","line":241,"column":13,"nodeType":"926","messageId":"951","endLine":241,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":249,"column":56,"nodeType":"963","messageId":"964","endLine":249,"endColumn":58},{"ruleId":"949","severity":1,"message":"1088","line":251,"column":13,"nodeType":"926","messageId":"951","endLine":251,"endColumn":17},{"ruleId":"961","severity":1,"message":"965","line":267,"column":25,"nodeType":"963","messageId":"964","endLine":267,"endColumn":27},{"ruleId":"961","severity":1,"message":"965","line":268,"column":25,"nodeType":"963","messageId":"964","endLine":268,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":272,"column":64,"nodeType":"963","messageId":"964","endLine":272,"endColumn":66},{"ruleId":"949","severity":1,"message":"1089","line":275,"column":15,"nodeType":"926","messageId":"951","endLine":275,"endColumn":16},{"ruleId":"949","severity":1,"message":"1085","line":280,"column":13,"nodeType":"926","messageId":"951","endLine":280,"endColumn":18},{"ruleId":"949","severity":1,"message":"1088","line":291,"column":13,"nodeType":"926","messageId":"951","endLine":291,"endColumn":17},{"ruleId":"949","severity":1,"message":"1090","line":292,"column":13,"nodeType":"926","messageId":"951","endLine":292,"endColumn":16},{"ruleId":"949","severity":1,"message":"1091","line":293,"column":13,"nodeType":"926","messageId":"951","endLine":293,"endColumn":16},{"ruleId":"949","severity":1,"message":"1092","line":294,"column":13,"nodeType":"926","messageId":"951","endLine":294,"endColumn":18},{"ruleId":"961","severity":1,"message":"962","line":324,"column":28,"nodeType":"963","messageId":"964","endLine":324,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":324,"column":53,"nodeType":"963","messageId":"964","endLine":324,"endColumn":55},{"ruleId":"961","severity":1,"message":"962","line":327,"column":28,"nodeType":"963","messageId":"964","endLine":327,"endColumn":30},{"ruleId":"961","severity":1,"message":"965","line":327,"column":53,"nodeType":"963","messageId":"964","endLine":327,"endColumn":55},{"ruleId":"961","severity":1,"message":"965","line":330,"column":28,"nodeType":"963","messageId":"964","endLine":330,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":330,"column":53,"nodeType":"963","messageId":"964","endLine":330,"endColumn":55},{"ruleId":"1003","severity":1,"message":"1021","line":401,"column":35,"nodeType":"968","messageId":"1022","endLine":401,"endColumn":37},{"ruleId":"924","severity":1,"message":"1045","line":466,"column":9,"nodeType":"926","messageId":"927","endLine":466,"endColumn":20},{"ruleId":"924","severity":1,"message":"1093","line":497,"column":9,"nodeType":"926","messageId":"927","endLine":497,"endColumn":17},{"ruleId":"924","severity":1,"message":"1044","line":656,"column":7,"nodeType":"926","messageId":"927","endLine":656,"endColumn":13},{"ruleId":"961","severity":1,"message":"962","line":669,"column":14,"nodeType":"963","messageId":"964","endLine":669,"endColumn":16},{"ruleId":"924","severity":1,"message":"1008","line":25,"column":10,"nodeType":"926","messageId":"927","endLine":25,"endColumn":19},{"ruleId":"924","severity":1,"message":"1094","line":33,"column":8,"nodeType":"926","messageId":"927","endLine":33,"endColumn":18},{"ruleId":"924","severity":1,"message":"1095","line":34,"column":8,"nodeType":"926","messageId":"927","endLine":34,"endColumn":23},{"ruleId":"924","severity":1,"message":"1084","line":35,"column":8,"nodeType":"926","messageId":"927","endLine":35,"endColumn":12},{"ruleId":"924","severity":1,"message":"1096","line":39,"column":8,"nodeType":"926","messageId":"927","endLine":39,"endColumn":13},{"ruleId":"924","severity":1,"message":"1097","line":41,"column":7,"nodeType":"926","messageId":"927","endLine":41,"endColumn":19},{"ruleId":"924","severity":1,"message":"1060","line":56,"column":7,"nodeType":"926","messageId":"927","endLine":56,"endColumn":13},{"ruleId":"924","severity":1,"message":"1015","line":235,"column":17,"nodeType":"926","messageId":"927","endLine":235,"endColumn":23},{"ruleId":"924","severity":1,"message":"1016","line":258,"column":21,"nodeType":"926","messageId":"927","endLine":258,"endColumn":24},{"ruleId":"924","severity":1,"message":"1017","line":259,"column":21,"nodeType":"926","messageId":"927","endLine":259,"endColumn":24},{"ruleId":"1003","severity":1,"message":"1004","line":409,"column":29,"nodeType":"968","messageId":"1005","endLine":409,"endColumn":31},{"ruleId":"924","severity":1,"message":"1018","line":457,"column":19,"nodeType":"926","messageId":"927","endLine":457,"endColumn":21},{"ruleId":"924","severity":1,"message":"1019","line":542,"column":9,"nodeType":"926","messageId":"927","endLine":542,"endColumn":13},{"ruleId":"924","severity":1,"message":"1020","line":583,"column":9,"nodeType":"926","messageId":"927","endLine":583,"endColumn":16},{"ruleId":"1003","severity":1,"message":"1021","line":583,"column":49,"nodeType":"968","messageId":"1022","endLine":583,"endColumn":51},{"ruleId":"924","severity":1,"message":"1023","line":584,"column":11,"nodeType":"926","messageId":"927","endLine":584,"endColumn":12},{"ruleId":"1003","severity":1,"message":"1004","line":584,"column":30,"nodeType":"968","messageId":"1005","endLine":584,"endColumn":32},{"ruleId":"924","severity":1,"message":"1024","line":590,"column":9,"nodeType":"926","messageId":"927","endLine":590,"endColumn":18},{"ruleId":"924","severity":1,"message":"1098","line":673,"column":9,"nodeType":"926","messageId":"927","endLine":673,"endColumn":17},{"ruleId":"924","severity":1,"message":"1099","line":773,"column":9,"nodeType":"926","messageId":"927","endLine":773,"endColumn":13},{"ruleId":"949","severity":1,"message":"971","line":833,"column":15,"nodeType":"926","messageId":"951","endLine":833,"endColumn":18},{"ruleId":"961","severity":1,"message":"962","line":838,"column":42,"nodeType":"963","messageId":"964","endLine":838,"endColumn":44},{"ruleId":"949","severity":1,"message":"972","line":839,"column":17,"nodeType":"926","messageId":"951","endLine":839,"endColumn":18},{"ruleId":"949","severity":1,"message":"971","line":844,"column":21,"nodeType":"926","messageId":"951","endLine":844,"endColumn":24},{"ruleId":"949","severity":1,"message":"950","line":876,"column":18,"nodeType":"926","messageId":"951","endLine":876,"endColumn":19},{"ruleId":"949","severity":1,"message":"1025","line":960,"column":11,"nodeType":"926","messageId":"951","endLine":960,"endColumn":14},{"ruleId":"949","severity":1,"message":"1026","line":961,"column":11,"nodeType":"926","messageId":"951","endLine":961,"endColumn":19},{"ruleId":"949","severity":1,"message":"1027","line":962,"column":11,"nodeType":"926","messageId":"951","endLine":962,"endColumn":20},{"ruleId":"924","severity":1,"message":"1028","line":981,"column":11,"nodeType":"926","messageId":"927","endLine":981,"endColumn":14},{"ruleId":"924","severity":1,"message":"1029","line":982,"column":11,"nodeType":"926","messageId":"927","endLine":982,"endColumn":12},{"ruleId":"924","severity":1,"message":"1030","line":983,"column":11,"nodeType":"926","messageId":"927","endLine":983,"endColumn":12},{"ruleId":"924","severity":1,"message":"1031","line":984,"column":11,"nodeType":"926","messageId":"927","endLine":984,"endColumn":15},{"ruleId":"949","severity":1,"message":"1032","line":1000,"column":13,"nodeType":"926","messageId":"951","endLine":1000,"endColumn":23},{"ruleId":"924","severity":1,"message":"1033","line":1008,"column":13,"nodeType":"926","messageId":"927","endLine":1008,"endColumn":18},{"ruleId":"949","severity":1,"message":"1025","line":1012,"column":11,"nodeType":"926","messageId":"951","endLine":1012,"endColumn":14},{"ruleId":"949","severity":1,"message":"1026","line":1013,"column":11,"nodeType":"926","messageId":"951","endLine":1013,"endColumn":19},{"ruleId":"949","severity":1,"message":"1027","line":1014,"column":11,"nodeType":"926","messageId":"951","endLine":1014,"endColumn":20},{"ruleId":"924","severity":1,"message":"975","line":1256,"column":15,"nodeType":"926","messageId":"927","endLine":1256,"endColumn":24},{"ruleId":"949","severity":1,"message":"1032","line":1257,"column":13,"nodeType":"926","messageId":"951","endLine":1257,"endColumn":23},{"ruleId":"949","severity":1,"message":"1032","line":1264,"column":13,"nodeType":"926","messageId":"951","endLine":1264,"endColumn":23},{"ruleId":"961","severity":1,"message":"962","line":1297,"column":26,"nodeType":"963","messageId":"964","endLine":1297,"endColumn":28},{"ruleId":"949","severity":1,"message":"1001","line":1317,"column":16,"nodeType":"926","messageId":"951","endLine":1317,"endColumn":17},{"ruleId":"949","severity":1,"message":"1034","line":1318,"column":13,"nodeType":"926","messageId":"951","endLine":1318,"endColumn":17},{"ruleId":"924","severity":1,"message":"1035","line":1318,"column":13,"nodeType":"926","messageId":"927","endLine":1318,"endColumn":17},{"ruleId":"924","severity":1,"message":"1036","line":1324,"column":13,"nodeType":"926","messageId":"927","endLine":1324,"endColumn":29},{"ruleId":"924","severity":1,"message":"1037","line":1345,"column":7,"nodeType":"926","messageId":"927","endLine":1345,"endColumn":19},{"ruleId":"924","severity":1,"message":"1038","line":1427,"column":18,"nodeType":"926","messageId":"927","endLine":1427,"endColumn":23},{"ruleId":"924","severity":1,"message":"1033","line":1443,"column":15,"nodeType":"926","messageId":"927","endLine":1443,"endColumn":20},{"ruleId":"924","severity":1,"message":"997","line":1473,"column":11,"nodeType":"926","messageId":"927","endLine":1473,"endColumn":17},{"ruleId":"924","severity":1,"message":"993","line":1473,"column":29,"nodeType":"926","messageId":"927","endLine":1473,"endColumn":37},{"ruleId":"924","severity":1,"message":"996","line":1473,"column":39,"nodeType":"926","messageId":"927","endLine":1473,"endColumn":45},{"ruleId":"924","severity":1,"message":"997","line":1492,"column":11,"nodeType":"926","messageId":"927","endLine":1492,"endColumn":17},{"ruleId":"924","severity":1,"message":"996","line":1492,"column":39,"nodeType":"926","messageId":"927","endLine":1492,"endColumn":45},{"ruleId":"979","severity":1,"message":"980","line":1612,"column":59,"nodeType":"963","messageId":"981","endLine":1612,"endColumn":60},{"ruleId":"979","severity":1,"message":"980","line":1614,"column":59,"nodeType":"963","messageId":"981","endLine":1614,"endColumn":60},{"ruleId":"961","severity":1,"message":"962","line":1623,"column":37,"nodeType":"963","messageId":"964","endLine":1623,"endColumn":39},{"ruleId":"949","severity":1,"message":"1001","line":1649,"column":16,"nodeType":"926","messageId":"951","endLine":1649,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":1652,"column":44,"nodeType":"963","messageId":"964","endLine":1652,"endColumn":46},{"ruleId":"949","severity":1,"message":"1039","line":1654,"column":15,"nodeType":"926","messageId":"951","endLine":1654,"endColumn":20},{"ruleId":"949","severity":1,"message":"998","line":1655,"column":15,"nodeType":"926","messageId":"951","endLine":1655,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":1722,"column":22,"nodeType":"963","messageId":"964","endLine":1722,"endColumn":24},{"ruleId":"961","severity":1,"message":"962","line":1724,"column":29,"nodeType":"963","messageId":"964","endLine":1724,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":1725,"column":17,"nodeType":"963","messageId":"964","endLine":1725,"endColumn":19},{"ruleId":"961","severity":1,"message":"962","line":1729,"column":28,"nodeType":"963","messageId":"964","endLine":1729,"endColumn":30},{"ruleId":"961","severity":1,"message":"962","line":1738,"column":29,"nodeType":"963","messageId":"964","endLine":1738,"endColumn":31},{"ruleId":"961","severity":1,"message":"962","line":1742,"column":26,"nodeType":"963","messageId":"964","endLine":1742,"endColumn":28},{"ruleId":"949","severity":1,"message":"1001","line":1767,"column":16,"nodeType":"926","messageId":"951","endLine":1767,"endColumn":17},{"ruleId":"924","severity":1,"message":"1002","line":1768,"column":13,"nodeType":"926","messageId":"927","endLine":1768,"endColumn":17},{"ruleId":"924","severity":1,"message":"1040","line":1808,"column":15,"nodeType":"926","messageId":"927","endLine":1808,"endColumn":18},{"ruleId":"924","severity":1,"message":"1036","line":1810,"column":15,"nodeType":"926","messageId":"927","endLine":1810,"endColumn":31},{"ruleId":"924","severity":1,"message":"1041","line":1833,"column":15,"nodeType":"926","messageId":"927","endLine":1833,"endColumn":21},{"ruleId":"924","severity":1,"message":"1042","line":1835,"column":15,"nodeType":"926","messageId":"927","endLine":1835,"endColumn":31},{"ruleId":"949","severity":1,"message":"950","line":1906,"column":24,"nodeType":"926","messageId":"951","endLine":1906,"endColumn":25},{"ruleId":"924","severity":1,"message":"1033","line":1938,"column":17,"nodeType":"926","messageId":"927","endLine":1938,"endColumn":22},{"ruleId":"961","severity":1,"message":"962","line":2007,"column":18,"nodeType":"963","messageId":"964","endLine":2007,"endColumn":20},{"ruleId":"961","severity":1,"message":"962","line":2008,"column":25,"nodeType":"963","messageId":"964","endLine":2008,"endColumn":27},{"ruleId":"961","severity":1,"message":"962","line":2008,"column":50,"nodeType":"963","messageId":"964","endLine":2008,"endColumn":52},{"ruleId":"961","severity":1,"message":"962","line":2017,"column":15,"nodeType":"963","messageId":"964","endLine":2017,"endColumn":17},{"ruleId":"961","severity":1,"message":"962","line":2023,"column":19,"nodeType":"963","messageId":"964","endLine":2023,"endColumn":21},{"ruleId":"949","severity":1,"message":"987","line":2024,"column":20,"nodeType":"926","messageId":"951","endLine":2024,"endColumn":22},{"ruleId":"979","severity":1,"message":"980","line":2025,"column":54,"nodeType":"963","messageId":"981","endLine":2025,"endColumn":55},{"ruleId":"961","severity":1,"message":"962","line":2043,"column":36,"nodeType":"963","messageId":"964","endLine":2043,"endColumn":38},{"ruleId":"961","severity":1,"message":"962","line":2043,"column":62,"nodeType":"963","messageId":"964","endLine":2043,"endColumn":64},{"ruleId":"961","severity":1,"message":"962","line":2063,"column":41,"nodeType":"963","messageId":"964","endLine":2063,"endColumn":43},{"ruleId":"961","severity":1,"message":"962","line":2063,"column":67,"nodeType":"963","messageId":"964","endLine":2063,"endColumn":69},{"ruleId":"961","severity":1,"message":"962","line":2067,"column":30,"nodeType":"963","messageId":"964","endLine":2067,"endColumn":32},{"ruleId":"961","severity":1,"message":"962","line":2076,"column":16,"nodeType":"963","messageId":"964","endLine":2076,"endColumn":18},{"ruleId":"949","severity":1,"message":"1043","line":2099,"column":13,"nodeType":"926","messageId":"951","endLine":2099,"endColumn":20},{"ruleId":"924","severity":1,"message":"1044","line":2229,"column":9,"nodeType":"926","messageId":"927","endLine":2229,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1021","line":2424,"column":37,"nodeType":"968","messageId":"1022","endLine":2424,"endColumn":39},{"ruleId":"924","severity":1,"message":"1045","line":2492,"column":11,"nodeType":"926","messageId":"927","endLine":2492,"endColumn":22},{"ruleId":"924","severity":1,"message":"1031","line":2654,"column":9,"nodeType":"926","messageId":"927","endLine":2654,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":2805,"column":11,"nodeType":"926","messageId":"927","endLine":2805,"endColumn":15},{"ruleId":"924","severity":1,"message":"1046","line":2867,"column":9,"nodeType":"926","messageId":"927","endLine":2867,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":2923,"column":9,"nodeType":"926","messageId":"927","endLine":2923,"endColumn":13},{"ruleId":"924","severity":1,"message":"1046","line":3012,"column":9,"nodeType":"926","messageId":"927","endLine":3012,"endColumn":13},{"ruleId":"924","severity":1,"message":"1047","line":3246,"column":11,"nodeType":"926","messageId":"927","endLine":3246,"endColumn":30},{"ruleId":"924","severity":1,"message":"1046","line":3250,"column":9,"nodeType":"926","messageId":"927","endLine":3250,"endColumn":13},{"ruleId":"924","severity":1,"message":"1048","line":3557,"column":7,"nodeType":"926","messageId":"927","endLine":3557,"endColumn":15},{"ruleId":"924","severity":1,"message":"1050","line":3611,"column":19,"nodeType":"926","messageId":"927","endLine":3611,"endColumn":29},{"ruleId":"1051","severity":1,"message":"1052","line":3661,"column":25,"nodeType":"1053","endLine":3661,"endColumn":47},{"ruleId":"1003","severity":1,"message":"1004","line":4010,"column":54,"nodeType":"968","messageId":"1005","endLine":4010,"endColumn":56},{"ruleId":"1003","severity":1,"message":"1004","line":4021,"column":50,"nodeType":"968","messageId":"1005","endLine":4021,"endColumn":52},{"ruleId":"924","severity":1,"message":"1048","line":76,"column":7,"nodeType":"926","messageId":"927","endLine":76,"endColumn":15},{"ruleId":"1054","severity":1,"message":"1055","line":23,"column":62,"nodeType":"1056","endLine":23,"endColumn":104},{"ruleId":"1054","severity":1,"message":"1055","line":28,"column":62,"nodeType":"1056","endLine":28,"endColumn":103},{"ruleId":"1054","severity":1,"message":"1055","line":33,"column":62,"nodeType":"1056","endLine":33,"endColumn":105},{"ruleId":"1054","severity":1,"message":"1055","line":49,"column":62,"nodeType":"1056","endLine":49,"endColumn":106},{"ruleId":"1054","severity":1,"message":"1055","line":65,"column":62,"nodeType":"1056","endLine":65,"endColumn":105},{"ruleId":"1054","severity":1,"message":"1055","line":69,"column":62,"nodeType":"1056","endLine":69,"endColumn":99},{"ruleId":"1054","severity":1,"message":"1055","line":73,"column":62,"nodeType":"1056","endLine":73,"endColumn":107},{"ruleId":"1054","severity":1,"message":"1055","line":77,"column":62,"nodeType":"1056","endLine":77,"endColumn":101},{"ruleId":"1054","severity":1,"message":"1055","line":79,"column":62,"nodeType":"1056","endLine":79,"endColumn":107},{"ruleId":"1054","severity":1,"message":"1055","line":116,"column":30,"nodeType":"1056","endLine":116,"endColumn":72},{"ruleId":"1054","severity":1,"message":"1055","line":121,"column":30,"nodeType":"1056","endLine":121,"endColumn":71},{"ruleId":"1054","severity":1,"message":"1055","line":126,"column":30,"nodeType":"1056","endLine":126,"endColumn":73},{"ruleId":"1054","severity":1,"message":"1055","line":142,"column":30,"nodeType":"1056","endLine":142,"endColumn":74},{"ruleId":"1054","severity":1,"message":"1055","line":158,"column":30,"nodeType":"1056","endLine":158,"endColumn":73},{"ruleId":"1054","severity":1,"message":"1055","line":162,"column":30,"nodeType":"1056","endLine":162,"endColumn":67},{"ruleId":"1054","severity":1,"message":"1055","line":166,"column":30,"nodeType":"1056","endLine":166,"endColumn":75},{"ruleId":"1054","severity":1,"message":"1055","line":170,"column":30,"nodeType":"1056","endLine":170,"endColumn":69},{"ruleId":"1054","severity":1,"message":"1055","line":172,"column":30,"nodeType":"1056","endLine":172,"endColumn":75},{"ruleId":"1051","severity":1,"message":"1052","line":204,"column":25,"nodeType":"1053","endLine":204,"endColumn":47},"no-native-reassign",["1100"],"no-negated-in-lhs",["1101"],"no-unused-vars","'GlobalView' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'userRegister' is defined but never used.","'sendOtp' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["1102"],["1103"],"'verify' is defined but never used.","'otpStatus' is assigned a value but never used.","'errorMsg' is assigned a value but never used.","'verifyStatus' is assigned a value but never used.","'Link' is defined but never used.","'config' is defined but never used.","'conc' is assigned a value but never used.","no-redeclare","'j' is already defined.","redeclared","'conc2' is assigned a value but never used.","'source' is assigned a value but never used.","'destination' is assigned a value but never used.","'myStyle' is assigned a value but never used.","'dstData' is assigned a value but never used.","'lists' is assigned a value but never used.","'high_lon' is already defined.","'local_coords' is already defined.","'selectedVenue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'nth_lift'.","ArrowFunctionExpression","unsafeRefs","'temp' is already defined.","'val' is already defined.","'v' is already defined.","'srcName' is assigned a value but never used.","'dstName' is assigned a value but never used.","'dstfloorL' is assigned a value but never used.","'dstfloorB' is assigned a value but never used.","'closed' is assigned a value but never used.","'row2' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'ch' is already defined.","'k' is already defined.","'p' is already defined.","'selectedBuilding' is assigned a value but never used.","'myBounds' is assigned a value but never used.","'srcfloor' is assigned a value but never used.","'dstfloor' is assigned a value but never used.","'building' is assigned a value but never used.","'flrDataPoly' is assigned a value but never used.","'dstVal' is assigned a value but never used.","'srcVal' is assigned a value but never used.","'vert' is already defined.","'flag' is assigned a value but never used.","'dum' is already defined.","'i' is already defined.","'ind1' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Component' is defined but never used.","'render' is defined but never used.","'Typeahead' is defined but never used.","'Instructions' is defined but never used.","'NavigationDetails' is defined but never used.","'GlobalDetails' is defined but never used.","'InstructionTab' is defined but never used.","'Rect' is defined but never used.","'Text' is defined but never used.","'topPos' is assigned a value but never used.","'lat' is assigned a value but never used.","'lng' is assigned a value but never used.","'me' is assigned a value but never used.","'list' is assigned a value but never used.","'listArr' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'k' is assigned a value but never used.","'sortedArr' is assigned a value but never used.","'wrh' is already defined.","'newWidth' is already defined.","'newHeight' is already defined.","'rot' is assigned a value but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'step' is assigned a value but never used.","'half_scale' is already defined.","'scale' is assigned a value but never used.","'elem' is already defined.","'elem' is assigned a value but never used.","'height_of_canvas' is assigned a value but never used.","'pointerangle' is defined but never used.","'timer' is defined but never used.","'coord' is already defined.","'ind' is assigned a value but never used.","'active' is assigned a value but never used.","'initialTransform' is assigned a value but never used.","'context' is already defined.","'Vector' is assigned a value but never used.","'coordinates' is defined but never used.","'resp' is assigned a value but never used.","'srcBuildingLocation' is assigned a value but never used.","'distance' is assigned a value but never used.","'combineInstructions' is assigned a value but never used.","'currentPos' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Drawer' is defined but never used.","'Map' is defined but never used.","'TileLayer' is defined but never used.","'center' is assigned a value but never used.","'Card' is assigned a value but never used.","'Toggle' is assigned a value but never used.","'Sidebar' is assigned a value but never used.","'geocoder' is assigned a value but never used.","'sidebarLeft' is assigned a value but never used.","'routeComponents' is assigned a value but never used.","'srcLat' is assigned a value but never used.","'srcLng' is assigned a value but never used.","'dstLat' is assigned a value but never used.","'dstLng' is assigned a value but never used.","'userInformation' is defined but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'mobileNumber' is assigned a value but never used.","'otpValue' is assigned a value but never used.","'lenErr' is assigned a value but never used.","'capsErr' is assigned a value but never used.","'numErr' is assigned a value but never used.","'password' is assigned a value but never used.","'emailOtpValue' is assigned a value but never used.","'floor' is assigned a value but never used.","'buildingName' is assigned a value but never used.","'venueName' is assigned a value but never used.","'Menu' is defined but never used.","'theta' is already defined.","'p2' is already defined.","'p3' is already defined.","'dist' is already defined.","'z' is already defined.","'ver' is already defined.","'hor' is already defined.","'trans' is already defined.","'lastStep' is assigned a value but never used.","'SourceMenu' is defined but never used.","'DestinationMenu' is defined but never used.","'Modal' is defined but never used.","'customStyles' is assigned a value but never used.","'distList' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1104","fix":"1105"},{"desc":"1106","fix":"1107"},"Update the dependencies array to be: [forgotPassResponse, props.history]",{"range":"1108","text":"1109"},"Update the dependencies array to be: [dispatch, getDetails, props.history, resetResponse]",{"range":"1110","text":"1111"},[1045,1065],"[forgotPassResponse, props.history]",[1520,1555],"[dispatch, getDetails, props.history, resetResponse]"]